---
title: "Exercice BDR et SQL"
description: "Exercice d'apprentissage du SQL"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-expand: 3
from: markdown+emoji
number-sections: true
number-depth: 3
---

## Se connecter à une base de données {.unnumbered}

Vous allez effectuer cet exercice sur le datalab du GENES.

Vous pouvez également réaliser l'exercice sur :

- le [SSPCloud](https://www.sspcloud.fr/){target="_blank"}, même modop que sur le datalab du GENES
- la VM ENSAI (voir section ci-après)
- trouver une ressource sur internet permettant d'exécuter du SQL

### Datalab du GENES {.unnumbered}

- [ ] Connectez-vous à <https://onyxia.lab.groupe-genes.fr/>{target="_blank"}
- [ ] Lancez un service **PostgreSQL**
  - pour créer votre base de données
- [ ] Lancez un service **Cloudbeaver**
  - pour interagir avec la base de données que vous venez de créer

Attendez que le service Cloudbeaver se lance :

- [ ] Ouvrez le service
  - Cliquer pour copier le mot de passe
  - Ouvrir le service
- [ ] Authentification
  - username : `user-<idxxxx>-ensai`
  - password : collez le mot de passe (CTRL+V) copié juste avant

Une fois connecté :

- Dans l'explorateur à gauche, vous devez voir afficher votre connexion à la base de données PostgreSQL 
- [ ] Cliquez sur l'icone **SQL** en haut à gauche


::: {.callout-tip title="Si la connection ne s'est pas faite"}
- [ ] Cliquez su **+**, puis **New connection**
- [ ] Sélectionnez **PostgreSQL**
- [ ] Renseignez : Host, Port, Database, Username, Password

Pour obtenir ces informations, retournez sur le Datalab, onglet **Mes Services**, puis cliquez sur le README du service PostgreSQL.

- [ ] **TEST** pour vérifier que la connexion se fait bien
- [ ] **CREATE**
- [ ] Dans l'explorer à gauche, cliquez sur votre connexion pour qu'elle passe au vert
:::


### VM ENSAI {.unnumbered}

Autre possibilité si vous êtes connectés sur la VM ENSAI :

- [ ] Lancez le logiciel Dbeaver
- [ ] Paramétrez [DBeaver](../outils/DBeaver.qmd){target="_blank"}

### Autres possibilités {.unnumbered}

Si vous n'avez pas accès aux ressources de l'ENSAI, voici par exemple quelques ressources pour faire les exercices :

- <https://www.programiz.com/sql/online-compiler/>{target="_blank"}
  - `DROP table customers; DROP table orders; DROP table shippings;`
  - pour supprimer les tables par défaut
- <https://www.mycompiler.io/fr/new/sql>{target="_blank"}


## Données de l'exercice {.unnumbered}

- [ ] Copiez le contenu du fichier [echecs.sql](./exercice/echecs.sql){target="_blank"}
- [ ] Collez dans votre éditeur
- [ ] Exécutez le script


## Description des données

Nous avons une liste de **joueurs** et de **tournois**. Les joueurs peuvent participer aux différents tournois.

Un tournoi est supervisé par un **arbitre**. Un arbitre est un joueur qui a obtenu un **grade d'arbitre**.

Dans un tournoi, les parties se déroulent à une certaine **cadence** (Lente, Rapide, Blitz).



```{mermaid}
classDiagram
  class arbitre_grade {
    id_arbitre_grade: INT(PK)
    nom: VARCHAR
  }

  class joueur {
    id_joueur: INT(PK)
    pseudo: VARCHAR
    nom: VARCHAR
    prenom: VARCHAR
    elo: INT
    mail: VARCHAR
    id_arbitre_grade: INT(FK -> arbitre_grade)
  }

  class cadence {
    id_cadence: INT(PK)
    nom: VARCHAR
  }

  class tournoi {
    id_tournoi: INT(PK)
    id_arbitre: INT(FK -> joueur)
    nom: VARCHAR
    debut: DATE
    fin: DATE
    nb_rondes: INT
    id_cadence: INT(FK -> cadence)
  }

  class participant {
    id_tournoi: INT(FK -> tournoi)
    id_joueur: INT(FK -> joueur)
  }

  arbitre_grade -- joueur
  cadence -- tournoi
  tournoi -- participant
  joueur -- participant
```

## Questions

### Découverte des tables

- [ ] Listez tous les joueurs
- [ ] Faîtes de même sur les autres tables pour observer leur contenu
- [ ] Listez tous les joueurs ordonnés par elo descroissant
- [ ] Listez tous les joueurs ayant un elo inférieur ou égal à 2000
- [ ] Listez tous les joueurs ayant un elo inférieur ou égal à 2000 et dont le prénom contient un "e" (majuscule ou minuscule) 
  - :bulb: voir méthode UPPER

### Mise à jour

- [ ] Créez la joueuse : *Martine Dupont, elo : 1999, Arbitre Elite*
- [ ] Supprimez le joueur de pseudo *marc78*
- [ ] Essayez de supprimer le joueur ayant pour id : 20
  - Pourquoi cela ne fonctionne pas ? Que faudrait-t-il faire pour supprimer ce joueur ?
- [ ] Listez les joueurs qui sont arbitres 
  - :bulb: *voir IS NOT NULL*
- [ ] Ajoutez à la table joueur la colonne de type booléen *est_arbitre*
- [ ] Remplissez cette nouvelle colonne pour tous les joueurs

### Jointures 

- [ ] Listez les joueurs (nom, prénom) qui sont arbitres, ainsi que leur grade d'arbitre
- [ ] Listez tous les joueurs (nom, prénom) ainsi que leur grade d'arbitre s'ils le sont

### Agrégations

- [ ] Comptez le nombre de joueurs qui sont arbitre
- [ ] Comptez le nombre d'arbitres par grade
- [ ] Comptez le nombre d'arbitres par grade et n'afficher que si la moyenne elo des arbitres du grade est supérieure à 2000
- [ ] Affichez la liste des tournois (nom du tournoi, cadence, arbitre)
- [ ] Ajouter le nombre de joueurs et le elo max des joueurs

::: {.callout-tip title="Correction" collapse="true"}
Lien vers la [correction](./exercice/correction.sql)
:::