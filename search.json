[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Remise à niveau informatique",
    "section": "",
    "text": "Ce cours de remise à niveau s’adresse aux étudiants intégrant directement la deuxième année de l’ENSAI. Il vise à fournir les bases essentielles en Python, SQL et UML, afin de leur permettre de débuter le projet informatique en toute sérénité."
  },
  {
    "objectID": "index.html#programme",
    "href": "index.html#programme",
    "title": "Remise à niveau informatique",
    "section": "Programme",
    "text": "Programme\n\nBases de données et SQL (3h)\nPython - initiation (6h)\nProgrammation Orientée Objet (POO) (9h)\nUML (3h)\nDivers outils utiles (markdown, R, LateX…)"
  },
  {
    "objectID": "index.html#initiation-à-sql",
    "href": "index.html#initiation-à-sql",
    "title": "Remise à niveau informatique",
    "section": "1. Initiation à SQL",
    "text": "1. Initiation à SQL\n\nLisez le cours d’introduction aux bases de données et à SQL\nEffectuez le paramètrage pour utiliser DBeaver\nFaites l’exercice"
  },
  {
    "objectID": "index.html#initiation-à-python",
    "href": "index.html#initiation-à-python",
    "title": "Remise à niveau informatique",
    "section": "2. Initiation à Python",
    "text": "2. Initiation à Python\n\nLisez le cours d’introduction à Python\nLisez et faites les exercices des 5 notebooks"
  },
  {
    "objectID": "index.html#programmation-orientée-objet",
    "href": "index.html#programmation-orientée-objet",
    "title": "Remise à niveau informatique",
    "section": "3. Programmation Orientée Objet",
    "text": "3. Programmation Orientée Objet\nVous pouvez commencer par créer un clone du dépôt Git sur votre machine :\n\nOuvrez Git Bash, puis coller les commandes suivantes\n\nmkdir -p /p/Cours2A/UE3_Remise_a_niveau && cd $_\ngit clone https://github.com/ludo2ne/ENSAI-2A-remise-a-niveau.git\ncela crée une copie du dépôt dans P:/Cours2A/UE3_Remise_a_niveau/ENSAI-2A-remise-a-niveau\n\n\n\n\nLisez le cours d’introduction à la POO\nSuivez les consignes pour le paramètrage de VSCode\nFaites les exercices"
  },
  {
    "objectID": "index.html#uml",
    "href": "index.html#uml",
    "title": "Remise à niveau informatique",
    "section": "4. UML",
    "text": "4. UML\n\nLisez le cours d’introduction à UML\nFaites l’exercice"
  },
  {
    "objectID": "index.html#alternatives",
    "href": "index.html#alternatives",
    "title": "Remise à niveau informatique",
    "section": "Alternatives",
    "text": "Alternatives\nVoici d’autres possibilités pour se mettre à niveau en Python, POO et SQL\n\nVidéos de la session 2022-2023\nsi vous avez vos accès à MyENSAI, les vidéos de la session de l’année 2022-2023 sont disponibles ici\n\n\nCours en ligne pour apprendre Python et SQL\n\nOpenclassrooms - Requêtez avecSQL\nInitiation à Python dans le Service Statistique Public\nOpenclassrooms - bases de Python (parties 1 et 2)\nOpenclassrooms - POO avec Python (parties 1 et 2)\n\n\n\nRessources utiles\n\nhttps://realpython.com/\nhttps://refactoring.guru/\nhttps://github.com/faif/python-patterns\nhttps://inseefrlab.github.io/formation-bonnes-pratiques-git-R/\nPython pour la data science, Lino Galiana (INSEE, ENSAE)"
  },
  {
    "objectID": "docs/sql/sql-cours.html",
    "href": "docs/sql/sql-cours.html",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "",
    "text": "Qu’est ce qu’une base de données relationnelle ?\nComment sont construites les tables ?\nSavoir écrire des requêtes SQL\nUtiliser le logiciel DBeaver"
  },
  {
    "objectID": "docs/sql/sql-cours.html#objectifs",
    "href": "docs/sql/sql-cours.html#objectifs",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "",
    "text": "Qu’est ce qu’une base de données relationnelle ?\nComment sont construites les tables ?\nSavoir écrire des requêtes SQL\nUtiliser le logiciel DBeaver"
  },
  {
    "objectID": "docs/sql/sql-cours.html#quest-ce-quune-base-de-données",
    "href": "docs/sql/sql-cours.html#quest-ce-quune-base-de-données",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Qu’est-ce qu’une base de données ?",
    "text": "Qu’est-ce qu’une base de données ?\n\nCollection organisée de données\nStockée électroniquement\nStructurée pour faciliter l’accès et la gestion\nConçue pour minimiser la redondance\n\n\n\npeut être utilisée par des applications\ninterrogeables, modifiables par les utilisateurs\n\n\n\nBase de données relationnelles\n\nOrganise les données dans des Tables\nTables interconnectées\nTables structurées\n\n\n\nTable = tableau\n\n\n\n\nSGBD\nUn Système de Gestion de Base de Données (SGBD) est un logiciel qui permet de :\n\nstocker\norganiser\ngérer des données de manière structurée\n\nExemples de SGBD :\n\nrelationnelles : PostgreSQL, MySQL, Oracle Database\nNoSQL : MongoDB, Cassandra\n\n\n\nSGBD : interface principale avec les données\nPour nous PostgreSQL, gratuit, libre, installé VM\nNoSQL : Not Only SQL\n\n\n\n\nKesako\n\nPostgreSQL : SGBD\nDBeaver : outil client qui permet de se connecter à un SGBD\nSQL : langage de programmation conçu pour gérer et manipuler des bases de données relationnelles.\n\n\nOn parle de SQL ensuite\n\n\n\nTypes de données\nIl existe de très nombreux types de données que l’on peut stocker, les principaux :\n\nChaîne de caractères\nNumérique\nBooléen\nDate, Temps\nGéométrique\n\nPlus de détails sur la documentation PostgreSQL.\n\n\nDate, Temps -&gt; plein de fonctions\nGéométrique -&gt; contours géographiques\n\n\n\n\nTypes - exemple\nCREATE TABLE personne (\n    id_personne      SERIAL PRIMARY KEY,\n    nom              VARCHAR(100) NOT NULL,\n    prenom           VARCHAR(100) NOT NULL,\n    date_naissance   DATE,\n    email            VARCHAR(255) UNIQUE,\n    nb_enfants       INT CHECK (nb_enfants &gt;= 0),\n    taille_m         DECIMAL(3, 2)\n    est_actif        BOOLEAN,\n    last_updated     TIMESTAMPTZ DEFAULT NOW() \n);\n\n\nSERIAL : séquence\nNOT NULL : obligatoire\nUNIQUE : distinctes, mais n’empêche pas les NULL\nDECIMAL(3, 2) : de -9.99 à 9.99\n\n3 chiffres significatifs dont 2 après la virgule\n\n\nCode bien aligné, Mots clés en majuscule"
  },
  {
    "objectID": "docs/sql/sql-cours.html#table",
    "href": "docs/sql/sql-cours.html#table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Table",
    "text": "Table\nUne Table est composée de lignes et de colonnes :\n\nune ligne représente un enregistrement spécifique\nune colonne représente un attribut particulier de ces enregistrements\nClé primaire (PK) : colonne ou un ensemble de colonnes qui identifie de manière unique chaque enregistrement dans une table\n\npermet d’identifier une ligne sans ambiguïté\n\n\n\nPK :\n\nobligatoire (non null)\nunique\n\n\n\nTable - exemple\n\nMCDDonnées\n\n\nModèle Physique des Données (UML)\n\n\n\n\n\n\nclassDiagram\n  class Joueuse {\n    id_joueuse: INT(PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    date_naissance: DATE\n    pays: VARCHAR\n  }\n\n\n\n\n\n\n\n\n\n\nJoueuse\n\n\nid_joueuse (PK)\nnom\nprenom\ndate_naissance\npays\n\n\n\n\n1\nSebag\nMarie\n1986-10-15\nFrance\n\n\n2\nPolgar\nJudit\n1976-07-23\nHongrie\n\n\n3\nHou\nYifan\n1994-02-27\nChine\n\n\n4\nKosteniuk\nAlexandra\n1984-04-23\nSuisse\n\n\n5\nJu\nWenjun\n1991-01-31\nChine"
  },
  {
    "objectID": "docs/sql/sql-cours.html#associations-entre-tables",
    "href": "docs/sql/sql-cours.html#associations-entre-tables",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Associations entre tables",
    "text": "Associations entre tables\n\nClé étrangère\nUne clé étrangère (FK) :\n\npermet de faire le lien entre 2 tables\nc’est une colonne d’une table A\nelle correspond à la clé primaire d’une table B\n\n\n\nTypes d’associations\n\n1..1 : Une Personne a un Passeport et un Passeport appartient à une seule Personne\n\nclé étrangère dans l’une des 2 tables\n\n1..* : Une Joueuse joue pour une seule équipe Equipe. Une Equipe est composée de plusieurs Joueuses\n\nclé étrangère dans la table Joueuse\n\n*..* : Un Etudiant suit plusieurs Cours et un Cours et suivi par plusieurs Etudiants\n\ntable d’association entre Etudiant et Cours\n\n\n\n\nLien entre 2 tables via une clé étrangère\n\nDiagrammeTable joueuseTable pays\n\n\n\n\n\n\n\n\nclassDiagram\n  direction LR\n  \n  class Joueuse {\n    id_joueuse: INT (PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    date_naissance: DATE\n    code_pays: VARCHAR (FK)\n  }\n  \n  class Pays {\n    code_pays: VARCHAR (PK)\n    nom: VARCHAR\n  }\n\n  Joueuse \"*\" -- \"1\" Pays : Appartient\n\n\n\n\n\n\n\n\n\n\n\n\nid_joueuse\nnom\nprenom\ndate_naissance\ncode_pays\n\n\n\n\n1\nSebag\nMarie\n1986-10-15\nFR\n\n\n2\nPolgar\nJudit\n1976-07-23\nHU\n\n\n3\nHou\nYifan\n1994-02-27\nCN\n\n\n4\nKosteniuk\nAlexandra\n1984-04-23\nCH\n\n\n5\nJu\nWenjun\n1991-01-31\nCN\n\n\n\n\n\n\n\n\ncode_pays\nnom\n\n\n\n\nCH\nSuisse\n\n\nCN\nChine\n\n\nFR\nFrance\n\n\nHU\nHongrie\n\n\n\n\n\n\n\nOn supposera ici :\n\nUne joueuse a un pays\nUn pays a plusieurs joueuses\n\n\n\n\nLien entre 2 tables via une table d’association\n\nDiagrammeTable joueuseTable participationTable tournoi\n\n\n\n\n\n\n\n\nclassDiagram\n  direction LR\n\n  class Joueuse {\n    id_joueuse: INT (PK)\n    nom: VARCHAR\n    prenom: VARCHAR\n    date_naissance: DATE\n    code_pays: VARCHAR (FK)\n  }\n  \n  class Tournoi {\n    id_tournoi: INT (PK)\n    nom: VARCHAR\n    ville: VARCHAR\n  }\n\n  \n  class Participation {\n    id_joueuse: INT (FK)\n    id_tournoi: INT (FK)\n  }\n\n  Joueuse \"*\" .. \"1\" Participation\n  Participation \"1\" .. \"*\" Tournoi\n\n\n\n\n\n\n\n\n\n\n\n\nid_joueuse\nnom\nprenom\ndate_naissance\ncode_pays\n\n\n\n\n1\nSebag\nMarie\n1986-10-15\nFR\n\n\n2\nPolgar\nJudit\n1976-07-23\nHU\n\n\n3\nHou\nYifan\n1994-02-27\nCN\n\n\n4\nKosteniuk\nAlexandra\n1984-04-23\nCH\n\n\n5\nJu\nWenjun\n1991-01-31\nCN\n\n\n\n\n\n\n\n\nid_joueuse\nid_tournoi\n\n\n\n\n1\n1\n\n\n1\n2\n\n\n3\n2\n\n\n4\n1\n\n\n4\n2\n\n\n\n\n\n\n\n\nid_tournoi\nnom\nville\n\n\n\n\n1\nNorway Chess\nOslo\n\n\n2\nTata Steel\nWijk aan Zee\n\n\n\n\n\n\n\n\nUne joueuse peut participer a plusieurs tournois\nUn tournoi accueille plusieurs joueuses"
  },
  {
    "objectID": "docs/sql/sql-cours.html#sql",
    "href": "docs/sql/sql-cours.html#sql",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "SQL",
    "text": "SQL\n\nSQL : Structured Query Language\nInventé en 1970 par Edgar F. Codd\nLangage de programmation\nUtilisé pour gérer et manipuler des bases de données relationnelles\n\n\n\ntrès très très utilisé\ntous les langages qui traitent de la data peuvent encapsuler du SQL\n\n\n\nOpérations CRUD\nSQL permet d’effectuer les opérations du CRUD :\n\nSELECT : récupérer des données depuis une table\nINSERT : insérer de nouvelles données dans une table\nUPDATE : mettre à jour des données existantes\nDELETE : supprimer des données d’une table\n\n\n\n\n\n\n\nCRUD\n\n\n\nCreate, Read, Update, Delete"
  },
  {
    "objectID": "docs/sql/sql-cours.html#actions-sur-une-table",
    "href": "docs/sql/sql-cours.html#actions-sur-une-table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur une table",
    "text": "Actions sur une table\n\nCréer une Table\n\nRequêteRésultat\n\n\n-- Création de la table personne (cette ligne est un commentaire)\n\nCREATE TABLE personne (\n    id_personne      INT         PRIMARY KEY,\n    nom              VARCHAR(30) NOT NULL,\n    prenom           VARCHAR(40),\n    date_naissance   DATE,\n    adresse          TEXT\n);\n\n\nLa table est créée mais vide.\n\n\n\nid_personne\nnom\nprenom\ndate_naissance\nadresse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBonne pratique\n\n\n\n\n\nUne bonne pratique est de stocker les tables dans un schéma pour bien organiser votre base de données.\nCREATE SCHEMA ran;\n\nCREATE TABLE ran.personne (\n    id_personne      INT         PRIMARY KEY,\n    ...\n);\n\n\n\n\n\n\n\n\nInsérer des données\n\nRequêteRésultat\n\n\nINSERT INTO personne (id_personne, nom, prenom, date_naissance, adresse)\nVALUES\n    (1, 'Gatore' , 'Ali'  , '1990-05-15', 'Amiens'),\n    (2, 'Dure'   , 'Laure', '1985-09-22', 'Auxerre'),\n    (3, 'Erateur', 'Maud' , '1995-03-10', 'Lille');\n\n\n\n\n\nid_personne\nnom\nprenom\ndate_naissance\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAuxerre\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n\n\nSupprimer une table\nDROP TABLE personne;\nSi ensuite, vous essayez :\nSELECT *\n  FROM personne;\n\nERREUR: la relation « personne » n’existe pas"
  },
  {
    "objectID": "docs/sql/sql-cours.html#actions-sur-les-lignes",
    "href": "docs/sql/sql-cours.html#actions-sur-les-lignes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur les lignes",
    "text": "Actions sur les lignes\n\nSélectionner tout\nPour afficher tout le contenu d’une table.\nSELECT *\n  FROM personne;\n\n\nUne requête se termine par un ;\nPossible de limiter le nombre de lignes affichées\n\nLIMIT 5\n\n\n\n\n\nFilter les lignes\n\nRequêteRésultatLIKE\n\n\nSELECT *\n  FROM personne\n WHERE adresse LIKE 'A%'\n   AND prenom = 'Laure'\n   AND adresse IN ('Amiens', 'Auxerre')\n   AND adresse IS NOT NULL\n   AND adresse != 'Lille'\n   AND id_personne BETWEEN 2 AND 3;\n\n\n\n\n\n\nTip\n\n\n\nPour une meilleure lisibilité, alignez votre code !\n\n\n\n\n\n\n\nid_personne\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n2\nLaure\nDure\n1985-09-22\nAuxerre\n\n\n\n\n\nLa clause LIKE est utilisée pour rechercher un texte spécifique dans une colonne de texte\n\n% représente zéro, un ou plusieurs caractères\n_ représente un seul caractère\n\n\n\n\n\n\nMettre à jour des lignes\n\nRequêteRésultat\n\n\nUPDATE personne\n   SET adresse = 'Amiens'\n WHERE id_personne = 2;\n\n\nSi vous refaites un SELECT * FROM personne;\n\n\n\nid_personne\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n1\nAli\nGatore\n1990-05-15\nAmiens\n\n\n2\nLaure\nDure\n1985-09-22\nAmiens\n\n\n3\nMaud\nErateur\n1995-03-10\nLille\n\n\n\n\n\n\n\n\nsimples quotes en SQL\npas de double\n\n\n\n\nSupprimer des lignes\n\nRequêteRésultat\n\n\nDELETE FROM personne\n WHERE prenom = 'Ali';\n\nPour ensuite faire revivre Ali :\nINSERT INTO personne (id_personne, nom, prenom, date_naissance, adresse)\nVALUES (1, 'Gatore', 'Ali', '1990-05-15', 'Amiens');\n\n\n\n\n\nid_personne\nprenom\nnom\ndate_naissance\nadresse\n\n\n\n\n2\nLaure\nDure\n1985-09-22\nAmiens\n\n\n3\nMaud\nErateur\n1995-03-10\nLille"
  },
  {
    "objectID": "docs/sql/sql-cours.html#actions-sur-les-colonnes",
    "href": "docs/sql/sql-cours.html#actions-sur-les-colonnes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur les colonnes",
    "text": "Actions sur les colonnes\n\nSélectionner des colonnes\n\nRequêteRésultat\n\n\nSELECT nom,\n       prenom\n  FROM personne;\n\n\n\n\n\nnom\nprenom\n\n\n\n\nGatore\nAli\n\n\nDure\nLaure\n\n\nErateur\nMaud\n\n\n\n\n\n\n\n\nRenommer une colonne\n\nRequêteRésultat\n\n\nALTER TABLE personne\nRENAME COLUMN date_naissance TO dnais;\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n\n\nAjouter un attribut\n\nRequêteRésultat\n\n\nALTER TABLE personne\nADD joue_echecs BOOLEAN;\n\nVous pouvez ajouter une valeur par défaut.\nALTER TABLE personne\nADD joue_echecs BOOLEAN DEFAULT true;\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\njoue_echecs\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\ntrue\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\ntrue\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\ntrue\n\n\n\n\n\n\n\n\nSupprimer une colonne\n\nRequêteRésultat\n\n\nALTER TABLE personne\nDROP COLUMN joue_echecs;\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n\n\nRenommer à l’affichage\nLe mot clé AS permet de renommer une colonne à l’affichage.\n⚠️ Il ne change pas le nom de la colonne.\n\nRequêteRésultat\n\n\nSELECT prenom,\n       adresse AS Ville\n  FROM personne;\n\n\n\n\n\nprenom\nVille\n\n\n\n\nMaud\nLille\n\n\nAli\nAmiens\n\n\nLaure\nAmiens"
  },
  {
    "objectID": "docs/sql/sql-cours.html#jointures",
    "href": "docs/sql/sql-cours.html#jointures",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Jointures",
    "text": "Jointures\n\nAlias\nJusqu’à maintenant, nous n’avions qu’une seule table.\nNous savions donc que le champ nom venait de la table personne.\nComment faire si nous faisons une jointure avec une table qui a également une colonne nommée nom ?\nSELECT p.nom       -- 2. p.nom : attribut nom de la table d'alias p i.e. personne\n  FROM personne p  -- 1. nous déclarons p comme alias de la table personne\n\n\nJointure totale\n\nRequêteRequête bisPersonneCommandeRésultat\n\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM personne p\n  JOIN commande c ON p.id_personne = c.id_personne\n WHERE prenom = 'Laure';\n\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM personne p\n  JOIN commande c USING(id_personne);\n\n\n\n\n\n\nUSING\n\n\n\nSi et seulement si les 2 colonnes qui permettent de faire la jointure ont le même nom.\n↪️ Alors vous pouvez utiliser cette syntaxe avec USING.\n\n\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\n\n\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n\n\n\n\n\n\n\n\n\nCréer et insérer les données\n\n\n\n\n\nCREATE TABLE commande (\n    id_commande INT PRIMARY KEY,\n    produit VARCHAR(50),\n    quantite INT,\n    prix_unitaire DECIMAL(10, 2),\n    id_personne INT,\n    FOREIGN KEY (id_personne) REFERENCES personne(id_personne)\n);\n\nINSERT INTO commande (id_commande, produit, quantite, prix_unitaire, id_personne) VALUES\n(1, 'livre', 1, 10, 2),\n(2, 'pain', 3, 2, 3),\n(3, 'pomme', 10, 0.5, 2);\n\n\n\n\n\n\nid_commande\nproduit\nquantite\nprix_unitaire\nid_personne\n\n\n\n\n1\nlivre\n1\n10\n2\n\n\n2\npain\n3\n2\n3\n\n\n3\npomme\n10\n0.5\n2\n\n\n\n\n\n\n\n\nprenom\nproduit\nquantite\n\n\n\n\nLaure\nlivre\n1\n\n\nLaure\npomme\n10\n\n\nMaud\npain\n3\n\n\n\n\n\n\n\nFaire une jointure c’est comme créer un gros tableau fusionné\n\n\n\nTypes de jointures\nDans la jointure précédente :\n\nLaure apparait 2 fois car elle a 2 commandes\nMaud apparait une fois\nAli n’apparait pas\n\nComment faire pour inclure Ali dans le tableau même sans commande ?\n\n\njointure interne (INNER JOIN)\n\nla valeur de id_personne doit être présente dans les 2 tables\nsinon id_personne est dans une seule, alors rien n’est affiché la concernant\n\n\n\n\n\nJointures externes\n\nRequêteRésultatExplication\n\n\nSELECT p.prenom,\n       c.produit,\n       c.quantite\n  FROM personne p\n  LEFT JOIN commande c USING(id_personne);\n\nLEFT JOIN signifie que l’on garde tout le contenu provenant de la table précédente\net que l’on complète avec le contenu de la table qui suit\nRIGHT JOIN pour faire l’inverse\n\n\n\n\n\n\nprenom\nproduit\nquantite\n\n\n\n\nLaure\nlivre\n1\n\n\nLaure\npomme\n10\n\n\nMaud\npain\n3\n\n\nAli\n\n\n\n\n\n\n\nLa jointure externe effectuée avec le mot clé LEFT JOIN indique que nous affichons :\n\ntoutes les données provenant de la table personnes\ncomplétées par les données de la table commandes\n\npour les lignes où le lien est établi"
  },
  {
    "objectID": "docs/sql/sql-cours.html#agrégation",
    "href": "docs/sql/sql-cours.html#agrégation",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Agrégation",
    "text": "Agrégation\n\nGROUP BY\n\nUtilisé pour regrouper les résultats en fonction d’une ou plusieurs colonnes\nPermet l’utilisation de fonctions d’agrégation telles COUNT, SUM, AVG…\n\n\nRequêteRésultat\n\n\nSELECT adresse,\n       COUNT(1)\n  FROM personne\n GROUP BY adresse;\n\n\n\n\n\nadresse\ncount\n\n\n\n\nAmiens\n2\n\n\nLille\n1\n\n\n\n\n\n\n\n\nHAVING\nPour filter après un GROUP BY\n\nRequêteRésultatAttention\n\n\nSELECT adresse,\n       COUNT(1)\n  FROM personne\n GROUP BY adresse\nHAVING COUNT(1) &gt; 1;\n\n\n\n\n\nadresse\ncount\n\n\n\n\nAmiens\n2\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n\nne pas confondre avec WHERE\nHAVING sert à filter après un GROUP BY"
  },
  {
    "objectID": "docs/sql/sql-cours.html#ordonner-les-lignes",
    "href": "docs/sql/sql-cours.html#ordonner-les-lignes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Ordonner les lignes",
    "text": "Ordonner les lignes\n\nRequêteRésultat\n\n\nSELECT *\n  FROM personne\n ORDER BY dnais DESC\n\nPour ordonner les résultats\n\nAjouter éventuellement DESC pour décroissant\n\n\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\n\n\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\n\n\n\n\n\n\n\nPossible d’ordonner selon plusieurs colonnes"
  },
  {
    "objectID": "docs/sql/sql-cours.html#formes-normales",
    "href": "docs/sql/sql-cours.html#formes-normales",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Formes normales",
    "text": "Formes normales\n\n1ere forme normale\n\nÉnoncéExemples\n\n\nUne relation est de première forme normale (1NF) si\n\nelle possède au moins une clé\net si tous ses attributs sont atomiques\n\n\n\n\n\n\n\nAttribut atomique\n\n\n\n\nNe contient qu’une seule valeur pour un tuple donné\nDonc ne regroupe pas un ensemble de plusieurs valeurs\n\n\n\n\n\n\n\n\nid\nnom\n\n\n\n\n1\nAli Gator\n\n\n2\nLaure Dure\n\n\n3\nMaud Erateur\n\n\n\nCette table ne respecte pas la 1NF car son attribut nom n’est pas atomique.\n\n\n\n\n\nAutres formes normales\n\n2NF : 1NF + tout attribut non clé dépend de la clé\n3NF : 2NF + un attribut non clé ne peut pas dépendre d’un autre attribut non clé"
  },
  {
    "objectID": "docs/sql/sql-cours.html#les-schémas",
    "href": "docs/sql/sql-cours.html#les-schémas",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Les schémas",
    "text": "Les schémas\nUne bonne pratique (non appliquée ici) est de classer nos tables dans différents schémas.\nDe la même manière que vous rangez des fichiers dans des dossiers, vous vous y retrouverez plus facilement en rangeant les tables dans des schémas.\nSi vous ne déclarez pas de shéma lors de la création d’une table, elle va dans le schéma public.\n\nSchémas - exemple\nCréer un schéma pour le projet info\nCREATE schema projet;\n\nÀ la création, stocker la table dans le schéma\nCREATE table projet.joueuse(\n  ...\n);\n\nPréciser le schéma lors des requêtes\nSELECT *\n  FROM projet.joueuse;"
  },
  {
    "objectID": "docs/sql/sql-cours.html#sql-sans-table",
    "href": "docs/sql/sql-cours.html#sql-sans-table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "SQL sans table",
    "text": "SQL sans table\nSELECT CURRENT_DATE;\nSELECT 1 + 2;\nSELECT 1 &gt; 2;\nSELECT 'Salut';"
  },
  {
    "objectID": "docs/sql/sql-cours.html#autres-notions-non-abordées",
    "href": "docs/sql/sql-cours.html#autres-notions-non-abordées",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Autres notions non abordées",
    "text": "Autres notions non abordées\n\nACID, COMMIT, ROLLBACK\nvues, snapshot\nindex\ndroits : grant / revoke\nWITH (Common Table Expressions)\nUNION, INTERSECT, EXCEPT\nDISTINCT\nEXISTS\nSEQUENCE"
  },
  {
    "objectID": "docs/sql/sql-cours.html#bibliographie",
    "href": "docs/sql/sql-cours.html#bibliographie",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nhttps://www-lisic.univ-littoral.fr/~hebert/bdd/introduction/\nhttps://sgbd.developpez.com/tutoriels/cours-complet-bdd-sql/\nhttps://sql.sh/"
  },
  {
    "objectID": "docs/sql/sql-cours.html#exercice",
    "href": "docs/sql/sql-cours.html#exercice",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Exercice",
    "text": "Exercice\nexercice"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#objectifs",
    "href": "docs/sql/sql-cours-slides.html#objectifs",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Objectifs",
    "text": "Objectifs\n\nQu’est ce qu’une base de données relationnelle ?\nComment sont construites les tables ?\nSavoir écrire des requêtes SQL\nUtiliser le logiciel DBeaver"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#quest-ce-quune-base-de-données",
    "href": "docs/sql/sql-cours-slides.html#quest-ce-quune-base-de-données",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Qu’est-ce qu’une base de données ?",
    "text": "Qu’est-ce qu’une base de données ?\n\nCollection organisée de données\nStockée électroniquement\nStructurée pour faciliter l’accès et la gestion\nConçue pour minimiser la redondance\n\n\n\npeut être utilisée par des applications\ninterrogeables, modifiables par les utilisateurs"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#table",
    "href": "docs/sql/sql-cours-slides.html#table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Table",
    "text": "Table\nUne Table est composée de lignes et de colonnes :\n\nune ligne représente un enregistrement spécifique\nune colonne représente un attribut particulier de ces enregistrements\nClé primaire (PK) : colonne ou un ensemble de colonnes qui identifie de manière unique chaque enregistrement dans une table\n\npermet d’identifier une ligne sans ambiguïté\n\n\n\nPK :\n\nobligatoire (non null)\nunique"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#associations-entre-tables",
    "href": "docs/sql/sql-cours-slides.html#associations-entre-tables",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Associations entre tables",
    "text": "Associations entre tables"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#sql",
    "href": "docs/sql/sql-cours-slides.html#sql",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "SQL",
    "text": "SQL\n\nSQL : Structured Query Language\nInventé en 1970 par Edgar F. Codd\nLangage de programmation\nUtilisé pour gérer et manipuler des bases de données relationnelles\n\n\n\ntrès très très utilisé\ntous les langages qui traitent de la data peuvent encapsuler du SQL"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#actions-sur-une-table",
    "href": "docs/sql/sql-cours-slides.html#actions-sur-une-table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur une table",
    "text": "Actions sur une table"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#actions-sur-les-lignes",
    "href": "docs/sql/sql-cours-slides.html#actions-sur-les-lignes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur les lignes",
    "text": "Actions sur les lignes"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#actions-sur-les-colonnes",
    "href": "docs/sql/sql-cours-slides.html#actions-sur-les-colonnes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Actions sur les colonnes",
    "text": "Actions sur les colonnes"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#jointures",
    "href": "docs/sql/sql-cours-slides.html#jointures",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Jointures",
    "text": "Jointures"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#agrégation",
    "href": "docs/sql/sql-cours-slides.html#agrégation",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Agrégation",
    "text": "Agrégation"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#ordonner-les-lignes",
    "href": "docs/sql/sql-cours-slides.html#ordonner-les-lignes",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Ordonner les lignes",
    "text": "Ordonner les lignes\n\nRequêteRésultat\n\n\nSELECT *\n  FROM personne\n ORDER BY dnais DESC\n\nPour ordonner les résultats\n\nAjouter éventuellement DESC pour décroissant\n\n\n\n\n\n\n\nid_personne\nnom\nprenom\ndnais\nadresse\n\n\n\n\n3\nErateur\nMaud\n1995-03-10\nLille\n\n\n1\nGatore\nAli\n1990-05-15\nAmiens\n\n\n2\nDure\nLaure\n1985-09-22\nAmiens\n\n\n\n\n\n\n\nPossible d’ordonner selon plusieurs colonnes"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#formes-normales",
    "href": "docs/sql/sql-cours-slides.html#formes-normales",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Formes normales",
    "text": "Formes normales"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#les-schémas",
    "href": "docs/sql/sql-cours-slides.html#les-schémas",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Les schémas",
    "text": "Les schémas\nUne bonne pratique (non appliquée ici) est de classer nos tables dans différents schémas.\nDe la même manière que vous rangez des fichiers dans des dossiers, vous vous y retrouverez plus facilement en rangeant les tables dans des schémas.\nSi vous ne déclarez pas de shéma lors de la création d’une table, elle va dans le schéma public."
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#sql-sans-table",
    "href": "docs/sql/sql-cours-slides.html#sql-sans-table",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "SQL sans table",
    "text": "SQL sans table\nSELECT CURRENT_DATE;\nSELECT 1 + 2;\nSELECT 1 &gt; 2;\nSELECT 'Salut';"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#autres-notions-non-abordées",
    "href": "docs/sql/sql-cours-slides.html#autres-notions-non-abordées",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Autres notions non abordées",
    "text": "Autres notions non abordées\n\nACID, COMMIT, ROLLBACK\nvues, snapshot\nindex\ndroits : grant / revoke\nWITH (Common Table Expressions)\nUNION, INTERSECT, EXCEPT\nDISTINCT\nEXISTS\nSEQUENCE"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#bibliographie",
    "href": "docs/sql/sql-cours-slides.html#bibliographie",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Bibliographie",
    "text": "Bibliographie\n\nhttps://www-lisic.univ-littoral.fr/~hebert/bdd/introduction/\nhttps://sgbd.developpez.com/tutoriels/cours-complet-bdd-sql/\nhttps://sql.sh/"
  },
  {
    "objectID": "docs/sql/sql-cours-slides.html#exercice",
    "href": "docs/sql/sql-cours-slides.html#exercice",
    "title": "Bases de Données Relationnelles et SQL",
    "section": "Exercice",
    "text": "Exercice\nexercice"
  },
  {
    "objectID": "docs/python/python-cours.html",
    "href": "docs/python/python-cours.html",
    "title": "Introduction à Python",
    "section": "",
    "text": "Créé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours.html#historique",
    "href": "docs/python/python-cours.html#historique",
    "title": "Introduction à Python",
    "section": "",
    "text": "Créé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours.html#pourquoi-apprendre-python",
    "href": "docs/python/python-cours.html#pourquoi-apprendre-python",
    "title": "Introduction à Python",
    "section": "Pourquoi Apprendre Python ?",
    "text": "Pourquoi Apprendre Python ?\n\nLangage polyvalent et populaire\nFacilité d’apprentissage et de lecture\nLarge communauté et nombreuses ressources\nNombreux packages\n\n\n\nImportant dans le monde de la data science et de l’ingénierie."
  },
  {
    "objectID": "docs/python/python-cours.html#les-fondamentaux-de-python",
    "href": "docs/python/python-cours.html#les-fondamentaux-de-python",
    "title": "Introduction à Python",
    "section": "Les Fondamentaux de Python",
    "text": "Les Fondamentaux de Python\n\nLangage interprété et interactif\nTypage Dynamique\nSyntaxe claire et concise\nSupporte plusieurs paradigmes (procédural, orienté objet, fonctionnel)\n\n\n\nExpliquer la différence entre un langage interprété et compilé.\ninteractif : environnement où vous pouvez entrer des commandes Python une par une, voir immédiatement les résultats (Notebook)\nTypage Dynamique (vérification des types au moment de l’exécution)\na = 5\na = \"toto\""
  },
  {
    "objectID": "docs/python/python-cours.html#python-à-lensai",
    "href": "docs/python/python-cours.html#python-à-lensai",
    "title": "Introduction à Python",
    "section": "Python à l’ENSAI",
    "text": "Python à l’ENSAI\n\nDistribution CPython\nVersion 3.10 (python --version)\nVous allez coder dans :\n\ndes notebooks Jupyter\nVisual Studio Code\n\nPackages pré-installés\n\n\nDistribution : version pré-packagée de l’interpréteur Python accompagnée de nombreux modules, bibliothèques et outils\n\nAnaconda (datascience et machine learning)\nMiniconda (plus léger)\n\nAutre IDE : PyCharm, Atom\nGestionnnaire de packages pip, à lancer dans un terminal"
  },
  {
    "objectID": "docs/python/python-cours.html#packages",
    "href": "docs/python/python-cours.html#packages",
    "title": "Introduction à Python",
    "section": "Packages",
    "text": "Packages\nDans un terminal (par exemple : Git Bash)\npip list                            # Packages installés\npip install &lt;package&gt;               # Installer un package\npip install &lt;package&gt;==&lt;version&gt;    # Version spécifique\npip uninstall &lt;package&gt;\n\n# Distribution utilisée\npython -c 'import platform; print(platform.python_implementation())'\n\nEn projet :\n\nliste des packages dans un fichier texte à la racine\npip install - r requirements.txt\n\nDémo : lancer python dans le terminal\n\n\nPackages populaires\nDatascience :\n\nNumPy\nPandas, Polars\nMatplotlib, Seaborn\n\n\n\nNumPy\n\nCalcul numérique\nndarray, perf, stats, manipulation des tableaux\n\nPandas\n\ndataframe, analyse de données\n\nMatplotlib : graphiques"
  },
  {
    "objectID": "docs/python/python-cours.html#écrire-votre-premier-code-en-python",
    "href": "docs/python/python-cours.html#écrire-votre-premier-code-en-python",
    "title": "Introduction à Python",
    "section": "Écrire votre Premier Code en Python",
    "text": "Écrire votre Premier Code en Python\n\nVariables et types de données (int, float, str, bool, list, dict)\nOpérations de base\nSensible à l’indentation\nStructures de contrôle (if, for, while)\n\n\n\n= : affectation\n== : test d’égalité / != différence\n\nindentation : utiliser un formateur dans VSCode\n\n\nStructures de contrôle\n\nIfForWhileEnumerate\n\n\n\nnote = 18\n\nif note &gt; 16:\n    print(\"Validé avec mention\")\nelif note &gt; 10:\n    print(\"Validé\")\nelse:\n    print(\"Non validé\")\n\nValidé avec mention\n\n\n\n\n\nfor i in range(1, 5):\n    print(i)\n\n1\n2\n3\n4\n\n\n\n\n\ncpt = 10\nwhile cpt &gt; 0:\n    print(cpt, end = \" \")\n    cpt -= 1    \nprint(\"boom\")\n\n10 9 8 7 6 5 4 3 2 1 boom\n\n\n\n\n\nliste = [\"Alban\", \"Bertille\", \"Corine\"]\n\nfor i, v in enumerate(liste):\n    print(f\"index {i} : valeur {v}\")\n\nindex 0 : valeur Alban\nindex 1 : valeur Bertille\nindex 2 : valeur Corine"
  },
  {
    "objectID": "docs/python/python-cours.html#collections---les-2-principales",
    "href": "docs/python/python-cours.html#collections---les-2-principales",
    "title": "Introduction à Python",
    "section": "Collections - les 2 principales",
    "text": "Collections - les 2 principales\n\nListe : collection ordonnée de valeurs modifiables\nlist = [\"pomme\", \"poire\", 2, True]\nDictionnaire : collection de paires clé-valeur non ordonnées\nrecette = {\"fraise\": 5, \"Moutarde\": \"5g\"}\n\n\nAutres Collections utiles\n\nSet : collection non ordonnée de valeurs uniques\npremiers = {2, 3, 5, 7, 11, 13}\nTuple : collection ordonnée de valeurs immuables\ncoord = (-1, 5, 4)\n\n\n\n\n\n\n\nNote\n\n\n\nDe nombreux autres types de collections existent (Arbre, Liste chainée…).\n\n\n\n\nCollections principales - résumé\n\n\n\nType de Donnée\nOrdonné\nMutable\nDoublon\n\n\n\n\nlist\n✔\n✔\n✔\n\n\ndict\n\n✔\n\n\n\ntuple\n✔\n\n✔\n\n\nset\n\n✔"
  },
  {
    "objectID": "docs/python/python-cours.html#aide-au-développement",
    "href": "docs/python/python-cours.html#aide-au-développement",
    "title": "Introduction à Python",
    "section": "Aide au développement",
    "text": "Aide au développement\nPour apprendre le langage, évitez de foncer vers les LLM.\nPréférez :\n\nAide en ligne\nVotre moteur de recherche favori\nStack Overflow\n\n\nRessources utiles\n\nReal Python\nPython pour la datascience\nAutomate the Boring Stuff with Python\n\n\nLLM pas adapté pour retenir mais pratique pour :\n\ndéboguer\ndocumenter"
  },
  {
    "objectID": "docs/python/python-cours.html#au-travail",
    "href": "docs/python/python-cours.html#au-travail",
    "title": "Introduction à Python",
    "section": "Au travail",
    "text": "Au travail\n5 notebooks sont à votre disposition pour apprendre les bases du langage :\nComment utiliser les notebooks"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#historique",
    "href": "docs/python/python-cours-slides.html#historique",
    "title": "Introduction à Python",
    "section": "Historique",
    "text": "Historique\n\nCréé par Guido van Rossum (Pays-Bas)\n1ère version en 1991\nGéré par la Python Software Foundation depuis 2001\nPython 3.12\n\n\n\nCréé fin 1989 pendant les vacances de Noël\nPython Software Foundation (asso à but non lucratif) : promouvoir et protéger le langage afin d’étendre la communauté"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#pourquoi-apprendre-python",
    "href": "docs/python/python-cours-slides.html#pourquoi-apprendre-python",
    "title": "Introduction à Python",
    "section": "Pourquoi Apprendre Python ?",
    "text": "Pourquoi Apprendre Python ?\n\nLangage polyvalent et populaire\nFacilité d’apprentissage et de lecture\nLarge communauté et nombreuses ressources\nNombreux packages\n\n\n\nImportant dans le monde de la data science et de l’ingénierie."
  },
  {
    "objectID": "docs/python/python-cours-slides.html#les-fondamentaux-de-python",
    "href": "docs/python/python-cours-slides.html#les-fondamentaux-de-python",
    "title": "Introduction à Python",
    "section": "Les Fondamentaux de Python",
    "text": "Les Fondamentaux de Python\n\nLangage interprété et interactif\nTypage Dynamique\nSyntaxe claire et concise\nSupporte plusieurs paradigmes (procédural, orienté objet, fonctionnel)\n\n\n\nExpliquer la différence entre un langage interprété et compilé.\ninteractif : environnement où vous pouvez entrer des commandes Python une par une, voir immédiatement les résultats (Notebook)\nTypage Dynamique (vérification des types au moment de l’exécution)\na = 5\na = \"toto\""
  },
  {
    "objectID": "docs/python/python-cours-slides.html#python-à-lensai",
    "href": "docs/python/python-cours-slides.html#python-à-lensai",
    "title": "Introduction à Python",
    "section": "Python à l’ENSAI",
    "text": "Python à l’ENSAI\n\nDistribution CPython\nVersion 3.10 (python --version)\nVous allez coder dans :\n\ndes notebooks Jupyter\nVisual Studio Code\n\nPackages pré-installés\n\n\nDistribution : version pré-packagée de l’interpréteur Python accompagnée de nombreux modules, bibliothèques et outils\n\nAnaconda (datascience et machine learning)\nMiniconda (plus léger)\n\nAutre IDE : PyCharm, Atom\nGestionnnaire de packages pip, à lancer dans un terminal"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#packages",
    "href": "docs/python/python-cours-slides.html#packages",
    "title": "Introduction à Python",
    "section": "Packages",
    "text": "Packages\nDans un terminal (par exemple : Git Bash)\npip list                            # Packages installés\npip install &lt;package&gt;               # Installer un package\npip install &lt;package&gt;==&lt;version&gt;    # Version spécifique\npip uninstall &lt;package&gt;\n\n# Distribution utilisée\npython -c 'import platform; print(platform.python_implementation())'\n\nEn projet :\n\nliste des packages dans un fichier texte à la racine\npip install - r requirements.txt\n\nDémo : lancer python dans le terminal"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#écrire-votre-premier-code-en-python",
    "href": "docs/python/python-cours-slides.html#écrire-votre-premier-code-en-python",
    "title": "Introduction à Python",
    "section": "Écrire votre Premier Code en Python",
    "text": "Écrire votre Premier Code en Python\n\nVariables et types de données (int, float, str, bool, list, dict)\nOpérations de base\nSensible à l’indentation\nStructures de contrôle (if, for, while)\n\n\n\n= : affectation\n== : test d’égalité / != différence\n\nindentation : utiliser un formateur dans VSCode"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#collections---les-2-principales",
    "href": "docs/python/python-cours-slides.html#collections---les-2-principales",
    "title": "Introduction à Python",
    "section": "Collections - les 2 principales",
    "text": "Collections - les 2 principales\n\nListe : collection ordonnée de valeurs modifiables\nlist = [\"pomme\", \"poire\", 2, True]\nDictionnaire : collection de paires clé-valeur non ordonnées\nrecette = {\"fraise\": 5, \"Moutarde\": \"5g\"}"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#aide-au-développement",
    "href": "docs/python/python-cours-slides.html#aide-au-développement",
    "title": "Introduction à Python",
    "section": "Aide au développement",
    "text": "Aide au développement\nPour apprendre le langage, évitez de foncer vers les LLM.\nPréférez :\n\nAide en ligne\nVotre moteur de recherche favori\nStack Overflow"
  },
  {
    "objectID": "docs/python/python-cours-slides.html#au-travail",
    "href": "docs/python/python-cours-slides.html#au-travail",
    "title": "Introduction à Python",
    "section": "Au travail",
    "text": "Au travail\n5 notebooks sont à votre disposition pour apprendre les bases du langage :\nComment utiliser les notebooks"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html",
    "href": "docs/python/05-POO-introduction.html",
    "title": "Introduction à la POO",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#avant-de-commencer",
    "href": "docs/python/05-POO-introduction.html#avant-de-commencer",
    "title": "Introduction à la POO",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#la-programmation-orientée-objet",
    "href": "docs/python/05-POO-introduction.html#la-programmation-orientée-objet",
    "title": "Introduction à la POO",
    "section": "1 La programmation orientée objet",
    "text": "1 La programmation orientée objet\nLa Programmation Orientée Objet (POO) est un paradigme de programmation qui permet de structurer les programmes autour d’objets, qui contiennent :\n\ndes attributs (caractéristiques de l’objet)\ndes méthodes (fonctions propres à l’objet)\n\nEn Python, il est possible mais pas obligatoire d’utiliser la POO. Cependant, le fonctionnement interne de Python est fortement teinté de POO.\n\n1.1 « Tout est objet »\nEn Python, tout est un objet (au sens de la POO). Regardons ce que cela signifie en récupérant le type de différents objets que nous avons vus dans les précédents tutoriels.\n\nprint(type(1))\nprint(type(\"bonjour\"))\nprint(type([]))\nprint(type({}))          \nprint(type(lambda x: x**2))\n\n\n\n1.2 Définir ses propres objets\nPour créer un objet, nous avons besoin dans un premier temps d’un modèle : une classe.\nNous pouvons voir la classe comme un « moule » qui permettra ensuite de construire des objets.\nPar exemple, nous créons une classe Velo dont voici la documentation :\n    \"\"\"\n    Classe représentant un vélo.\n\n    Attributs:\n        couleur (str): La couleur du vélo.\n        vitesse (int): La vitesse actuelle du vélo.\n        porte_bagage (bool): Indique si le vélo a un porte-bagage.\n\n    Méthodes:\n        __init__(couleur, porte_bagage=False): Construit un nouvel objet Velo \n        __str__(): représentation en chaîne de caractères d'un objet Velo\n        accelerer(acceleration): Accélère le vélo en ajoutant l'accélération à sa vitesse actuelle.\n        ralentir(deceleration): Ralentit le vélo en soustrayant la décélération de sa vitesse actuelle.\n        installer_porte_bagage(): Installe un porte-bagage sur le vélo en le mettant à True.\n        est_arrete(): Vérifie si le vélo est complètement arrêté.\n\n    \"\"\"\n\nclass Velo:\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self.vitesse = 0\n        self.porte_bagage = porte_bagage\n        \n    def __str__(self):\n        s = \"Je suis un vélo \" + self.couleur + \".\"\n        s += \" Ma vitesse est de : \" + str(self.vitesse) + \".\"\n        if self.porte_bagage:\n            s += \" J'ai un porte-bagages.\"\n        return s\n\n    def accelerer(self, acceleration):\n        self.vitesse += acceleration\n\n    def ralentir(self, deceleration):\n        self.vitesse -= deceleration\n        if self.vitesse &lt; 0:\n            self.vitesse = 0\n\n    def installer_porte_bagage(self):\n        self.porte_bagage = True\n            \n    def est_arrete(self):\n        return self.vitesse == 0\n\nAvec cette classe nous pouvons maintenant créer des instances (objets) de type Velo\n\nv1 = Velo(\"bleu\")\nprint(v1)\n\nv2 = Velo(\"violet\", True)\nprint(v2)\n\n\n## Nous pouvons appliquer les méthodes définies dans la classe à cet objet velo\nv1.accelerer(20)\nv1.installer_porte_bagage()\nprint(v1)\n\nAnalysons la syntaxe de construction d’une classe d’objets :\n\nl’instruction class définit la classe d’objets. Différents objets pourront être créés selon le modèle défini par cette classe.\nPar convention, le nom de la classe doit commencer par une majuscule.\nla classe spécifie un certains nombres de fonctions que l’on appelle méthodes : ce sont des fonctions spécifiques à la classe d’objets définie.\nla méthode __init__, est appelée le constructeur. Elle est obligatoire, sinon il est impossible d’instancier d’objets de la classe.\nElle permet de définir les attributs attachés à cette classe d’objets.\nIl est possible de passer des paramètres au constructeur (ex : couleur) pour définir des attributs propres à une instance de l’objet.\nle constructeur a un paramètre obligatoire : self. C’est une référence aux instances qui vont être créées à partir de cette classe.\nLa syntaxe suivante définit un attribut : self.attribut = valeur.\nLa méthode __str__ (facultative) permet de redéfinir la représentation en chaîne de caractères d’un objet.\nles autres méthodes sont définies par l’utilisateur. Elles prennent également le self en paramètre, pour accéder aux attributs et méthodes.\nComme ce sont des fonctions, elles peuvent également admettre d’autres paramètres.\n\n\n\n1.3 Attributs\nUn attribut est une variable associée à un objet. Un attribut peut contenir n’importe quel objet Python.\n\nAccéder aux attributs\nUne fois que l’objet est instancié, il est possible d’accéder à ses attributs. La syntaxe est simple : instance.attribut.\n\nprint(v1.couleur)\nprint(v2.couleur)\nprint()\nprint(v1.vitesse)\nprint(v2.vitesse)\n\nOn voit bien que les deux instances sont autonomes : bien qu’elles soient du même type, leurs attributs diffèrent.\n\n\nModifier un attribut\nModifier un attribut d’une instance est très simple, la syntaxe est : instance.attribut = nouvelle_valeur.\n\nv2.couleur = \"jaune\"\nprint(v2.couleur)\n\n\n\nAttributs de classe\nChaque instance de Velo a ses propres attributs d’instance (couleur, vitesse, porte_bagage).\nIl est possible d’avoir des attributs communs à tous les Velos : les attributs de classe.\nCréons la classe VeloBis pour illustrer avec un attribut comptant le nombre de VeloBis créés.\n\nclass VeloBis:\n    nb_velos_bis = 0                                       # Attribut de classe pour compter le nombre de VeloBis\n\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self.vitesse = 0\n        self.porte_bagage = porte_bagage\n        VeloBis.nb_velos_bis += 1\n\n\nprint(VeloBis.nb_velos_bis)\nvb1 = VeloBis(\"rose\")\nprint(VeloBis.nb_velos_bis)\nvb2 = VeloBis(\"orange\")\nprint(VeloBis.nb_velos_bis)\n\n\n\n\n1.4 Méthodes\nUne méthode est une fonction associée à un objet. Elle peut utiliser ses attributs, les modifier, et faire intervenir d’autres méthodes de l’objet.\n\nAppeler une méthode\nLa syntaxe pour appeler une méthode d’un objet instancié est la suivante : instance.methode(parametres).\n\nv1.est_arrete()\n\nRemarque : les méthodes n’ont pas d’existence propre en dehors de l’objet.\nNous ne pouvons pas appeler la méthode est_arrete() seule, cela n’a pas de sens.\n\nest_arrete()\n\nRemarque 2 :\n\nle 1er paramètre de chaque méthode d’instance est toujours self pour faire référence à l’objet lui même\nlors des appels aux méthodes, on ne spécifie pas ce paramètre self\n\n\n\nAgir sur les attributs\nTout l’intérêt des méthodes est qu’elles peuvent accéder aux attributs, les modifier et mettre en place des contrôles.\nPar exemple :\n\nsi l’on n’utilise pas les méthodes accelerer et decelerer, il est possible de se retrouver avec une vitesse négative\n\n\nv1.vitesse = -10\nprint(v1)\n\nModifier directement un attribut de cette manière est une mauvaise pratique car on n’effectue aucun contrôle sur ce qui est saisi.\nIl est possible d’aller encore plus loin :\n\nv1.vitesse = \"Jean-Michel\"\nprint(v1)\n\nEn utilisant les méthodes, cela évite de se retrouver dans des situations absurdes ou incohérentes.\n\nv1 = Velo(\"Bleu\")\nv1.accelerer(10)\nprint(v1)\nv1.ralentir(20)\nprint(v1)\n\n\n\n\n1.5 Bonus : la classe Property\nPour écarter tout problème, une solution intéressante est d’utiliser la classe property.\nCette classe property permet sans changer la syntaxe d’accès aux attributs d’appeler des mutateurs.\n\nclass Velo:\n    def __init__(self, couleur, porte_bagage=False):\n        self.couleur = couleur\n        self._vitesse = 0                                    # Attribut privé pour stocker la vitesse\n        self.porte_bagage = porte_bagage\n\n    def __str__(self):\n        s = \"Je suis un vélo \" + self.couleur + \".\"\n        s += \" Ma vitesse est de : \" + str(self.vitesse) + \".\"\n        if self.porte_bagage:\n            s += \" J'ai un porte-bagages.\"\n        return s\n\n    @property\n    def vitesse(self):\n        return self._vitesse\n\n    @vitesse.setter\n    def vitesse(self, nouvelle_vitesse):\n        if nouvelle_vitesse &gt;= 0:\n            self._vitesse = nouvelle_vitesse\n        else:\n            raise ValueError(\"La vitesse doit être un nombre positif.\")\n\n    def installer_porte_bagage(self):\n        self.porte_bagage = True\n\n    def est_arrete(self):\n        return self.vitesse == 0\n\n\nv3 = Velo(\"noir\")\nprint(v3)\nv3.vitesse = 10\nprint(v3)\nv3.vitesse = -20\nprint(v3)"
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#bonnes-pratiques",
    "href": "docs/python/05-POO-introduction.html#bonnes-pratiques",
    "title": "Introduction à la POO",
    "section": "2 Bonnes pratiques",
    "text": "2 Bonnes pratiques\nPour conclure cette introduction au langage Python, voici une liste de bonnes pratiques généralement suivies par les développeurs.\nLe respect de ces pratiques est fortement recommandé et vous aidera à mieux coder.\n\n2.1 Convention de nommage\n\nvariables\n\ndonner des noms explicites (éviter les toto, var1 …)\nen minuscules avec des mots séparés par des underscores (snake_case)\n\nexception pour les variables constantes : utiliser des MAJUSCULES avec des mots séparés par des underscores\n\ncela permet d’avoir un code plus lisible pour vous même et pour les autres\n\nfonctions et méthodes\n\nidem que pour les variables\n\nclasses\n\nutiliser le camelCase : chaque mot commence par une Majuscule.\nex : VeloElectrique\n\n\n\n\n2.2 Indenter correctement le code\nUtilisez une indentation de 4 espaces pour chaque niveau d’indentation.\nL’indentation correcte est essentielle en Python, car elle détermine la structure du code.\n\n\n2.3 Ajouter des commentaires pertinents\nDès qu’il y a un peu de complexité, commentez votre code pour expliquer son fonctionnement.\nAjoutez des docstrings aux fonctions, classes et modules pour expliquer leur fonctionnement, leurs paramètres et leurs valeurs de retour."
  },
  {
    "objectID": "docs/python/05-POO-introduction.html#exercices",
    "href": "docs/python/05-POO-introduction.html#exercices",
    "title": "Introduction à la POO",
    "section": "3 Exercices",
    "text": "3 Exercices\n\n3.1 Exercice 1\nCréez une classe Etudiant avec les attributs :\n\nnom\nage\nliste_notes\n\nAvec les méthodes :\n\ninit() : constructeur\najouter_note() : pour ajouter une nouvelle note à la liste\ncalculer_moyenne() : calculer la moyenne des notes\n\n\n## Testez votre réponse dans cette cellule\n\n\n\n3.2 Exercice 2\nCréer une classe Point qui représente les coordonnées d’un point en 2D.\nAjouter une méthode distance(autre_point) qui calcule la distance avec un autre point.\nCréez une classe Cercle avec les attributs centre (de la classe Point) et rayon.\nAjoutez une méthode calculer_surface() qui renvoie la surface du cercle.\n\n## Testez votre réponse dans cette cellule\n\n\n\n3.3 Exercice 3\nCréez une classe CompteBancaire avec les attributs suivants :\n\ntitulaire : le nom du titulaire du compte (chaîne de caractères)\nsolde : le solde du compte (nombre réel)\n\nLa classe devra avoir les méthodes suivantes :\n\n__init__(self, titulaire) : le constructeur de la classe\ndeposer(self, montant) : une méthode qui permet de déposer un montant sur le compte. Le montant devra être ajouté au solde\nretirer(self, montant) : une méthode qui permet de retirer un montant du compte. Le montant devra être soustrait du solde\nafficher_solde(self) : une méthode qui affiche le solde du compte\ntransferer(self, autreCompte, montant) qui transfère de l’argent du compte vers l’autre si le solde est suffisant\n\nCréer 2 Comptes et tester les différentes fonctionnalités.\n\n## Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html",
    "href": "docs/python/03-tests-et-boucles.html",
    "title": "Tests et Boucles",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#avant-de-commencer",
    "href": "docs/python/03-tests-et-boucles.html#avant-de-commencer",
    "title": "Tests et Boucles",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#structures-condionnelles-et-boucles",
    "href": "docs/python/03-tests-et-boucles.html#structures-condionnelles-et-boucles",
    "title": "Tests et Boucles",
    "section": "1 Structures condionnelles et boucles",
    "text": "1 Structures condionnelles et boucles\nDans ce Notebook, nous allons aborder les thèmes suivants :\n\nles structures if, else\nla boucle for\nla boucle while\nles instructions break et continue"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#structures-conditionnelles",
    "href": "docs/python/03-tests-et-boucles.html#structures-conditionnelles",
    "title": "Tests et Boucles",
    "section": "2 Structures conditionnelles",
    "text": "2 Structures conditionnelles\nNous allons tester différentes conditions booléennes (voir Notebook 1) en utilisant les mots clés : if, else et elif.\nLe principe est le suivant :\nif condition1:\n    # Bloc de code à exécuter si la condition1 est vraie\nelif condition2:\n    # Bloc de code à exécuter si la condition1 est fausse et condition2 est vraie\nelse:\n    # Bloc de code à exécuter si la condition1 et 2 sont fausses\nRemarques :\n\nil peut y avoir autant de elif que nécessaire (entre 0 et infini)\nle else est facultatif\n\nAttention : Il est important de respecter la syntaxe, en particulier l’indentation !\n\na = 12\n\n# Simple if\nif a &gt; 5:\n    print(\"la variable a({}) est strictement supérieure à 5\".format(a))\n\n\na = 3\n\n# if else\nif a &gt; 5:\n    print(\"la variable a({}) est strictement supérieure à 5\".format(a))\nelse:\n    print(\"la variable a({}) est inférieure ou égale à 5\".format(a))\n\n\nnb_habitants = 750\n\nif nb_habitants &lt; 500:\n    print(\"village\")\nelif nb_habitants &lt; 10000:\n    print(\"ville\")\nelse:\n    print(\"grande ville\")\n\n\n# Conditions multiples\n\nnote_maths = 14\nnote_info = 20\nvalidation_anglais = True\n\nif note_maths &gt; 10 and note_info &gt; 10 and validation_anglais:\n    print(\"Année validée\")\n\n\n# Conditions en cascade\nif note_maths &gt; 10:\n    if note_info &gt; 10:\n        if validation_anglais:\n            print(\"Félicitation, continuez comme ça !\")\n        else:\n            print(\"Work harder\")\n    else:\n        print(\"il y a 10 types de personnes, ceux qui sont bons en info et les autres\")\nelse:\n    print(\"1+1=2\")"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#boucles",
    "href": "docs/python/03-tests-et-boucles.html#boucles",
    "title": "Tests et Boucles",
    "section": "3 Boucles",
    "text": "3 Boucles\nLes boucles sont utiles pour répéter de nombreuses fois la même opération.\nPar exemple si l’on souhaite afficher tous les éléments d’une liste, écrire autant de print qu’il y a d’éléments serait assez pénible.\nComme pour les structures conditionnelles, il est très important de respecter l’indentation !\n\n3.1 La boucle for\nIl y a plusieurs manières d’utiliser la boucle for, voici quelques exemples.\nIl est très fréquent d’utiliser avec les boucles la méthode range(start, stop, step) qui génére une suite d’entiers\n\nstart : Valeur de départ de la séquence (optionnelle). Par défaut, elle est définie à 0.\nstop : Valeur de fin de la séquence (exclue).\nstep : Pas d’incrément (optionnel). Par défaut, il est défini à 1.\n\n\n# Afficher les entiers entre 1 et 6\nfor i in range(1, 6):\n    print(i)\n\n\nfor i in range(6):\n    print(i, i ** 2, sep=\"\\t\")\n\n\n# Parcours d'une liste\npersonnages = [\"Luke\", \"Leia\", \"Han\", \"Obi-Wan\"]\n\nfor p in personnages:\n    print(\"Hello \" + p)\n\n\n# Parcours d'une liste par indice\nfor i in range(len(personnages)):\n    print(\"Personnage \" + str(i) + \" : \" + personnages[i])\n\nLa fonction enumerate() est utilisée pour itérer simultanément sur les indices et les éléments.\nElle permet de générer un tuple(indice, élément)\n\nlist(enumerate(personnages))\n\n\n# Parcours d'une liste en utilisant enumerate\nfor numero, nom in enumerate(personnages):\n    print(\"Personnage \" + str(numero) + \" : \" + nom)\n\n\n# Parcours d'une chaîne de caractères\nfor char in \"Dark Vador\":\n    print(char, end=\" - \")\n\n\nimport time\n\nmessage = \"Salut les lapinous\"\nfor i in range(len(message)):\n    time.sleep(0.5)\n    print(message[i], end=\"\")\n\n\ningredients = {'sucre': '100g', 'poire': 2, 'lait': '1L', 'sel': True}\n\n# Parcours des clés d'un dictionnaire\nfor cle in ingredients:\n    print(cle)\n\n\n\n3.2 La boucle while\nLe principe de la boucle while est le suivant :\n\nune condition d’entrée dans la boucle est définie\ntant que la condition est vérifiée, le code dans la boucle est exécuté\net ainsi de suite, jusqu’à ce que l’on sorte de la boucle (ou que l’on reste coincé dedans à tout jamais…)\n\n\ncpt = 5\nwhile cpt &gt;= 0:\n    print(cpt, end=\"...\")\n    cpt -= 1      # cpt = cpt - 1\nprint(\"Boom\")\n\n\nuser_input = input(\"Entrez un nombre pair : \")\nwhile int(user_input) % 2 != 0:\n    print(\"Ce n'est pas un nombre pair.\")\n    user_input = input(\"Entrez un nombre pair : \")\nprint(\"Merci, vous avez entré un nombre pair.\")\n\n\nCritère d’arrêt\nLa différence principale avec la boucle for est le critère d’arrêt.\nDans une boucle for, ce critère est clair : la boucle itère sur les éléments d’un objet itérable, nécessairement de taille finie.\nAu contraire, dans la boucle while, ce critère peut ne jamais se réaliser et l’on se retrouve alors dans une boucle infinie…\nPar exemple si l’on se trompe dans le nom des indices, voici le résultat :\n\n# Utilisez le bouton \"Stop\" (carré noir) de Jupyter pour arrêter le programme en cours\ni = 1\nj = 1\nwhile i &lt;= 5:\n    j = j + 1\n\nComme i = 1 et ne change jamais, la condition i &lt;= 5 est toujours égale à True\n\nprint(i)\nprint(j)\n\n\n\n\n3.3 L’instruction break\nUne autre possibilité pour sortir d’une boucle for ou while est d’utiliser l’instruction break.\nLe code ci-dessous montre une utilisation de cette instruction :\n\nOn rentre dans une boucle infinie (While true)\nLe seul moyen d’en sortir est de trouver le bon nombre, ce qui nous envoie vers le break\n\nLe code contient également des instructions try et except qui gérent le cas ou la valeur saisie n’est pas numérique.\nRemarque : en cas de boucles imbriquées, le break ne met fin qu’à la boucle de niveau supérieur.\n\nimport random\n\nnombre_aleatoire = random.randint(1, 20)\n\nprint(\"Entrez un nombre entre 1 et 20\")\nwhile True:\n    nombre_saisi = input()\n    try:\n        nombre_saisi = int(nombre_saisi)\n        if nombre_saisi == nombre_aleatoire:\n            break\n        elif nombre_saisi &lt; 1 or nombre_saisi &gt; 20:\n            print(\"Entre 1 et 20 !!!\")        \n        elif nombre_saisi &gt; nombre_aleatoire:\n            print(\"c'est moins\")\n        elif nombre_saisi &lt; nombre_aleatoire:\n            print(\"c'est plus\")\n    except ValueError:\n        print(\"Veuillez entrer un entier valide\")\n        \nprint(\"Félicitations, vous avez trouvé le nombre secret :\", nombre_aleatoire)\n\n\n\n3.4 L’instruction continue\nL’instruction continue permet de passer à l’itération suivante de la boucle.\nDans l’exemple ci-dessus :\n\non rentre dans une boucle infinie\ntant que l’on ne rentre pas le bon prénom, on recommence au début de la boucle\n\npuis on ne sort de la boucle que lorsque l’on a rentré le bon mot de passe\n\n\n\nvotre_prenom = \"alice\"\n\nwhile True:\n    print(\"Veuillez entrer votre prénom.\")\n    prenom = input()\n    if prenom != votre_prenom:\n        continue\n    print(\"Veuillez entrer votre mot de passe.\")\n    mdp = input()\n    if mdp == \"123456\":\n        break\nprint(\"Bienvenue \" + votre_prenom)"
  },
  {
    "objectID": "docs/python/03-tests-et-boucles.html#exercices",
    "href": "docs/python/03-tests-et-boucles.html#exercices",
    "title": "Tests et Boucles",
    "section": "4 Exercices",
    "text": "4 Exercices\n\n4.1 Exercice 1\nEcrire un programme qui calcule la somme des 10 premiers entiers au carré.\nEcrire un programme qui calcule la somme des 5 premiers entiers impairs au carré.\n\n# Testez votre réponse dans cette cellule\n\n\n# Remarque : avec Python il est possible parfois de condenser l'écriture\nsum(i**2 for i in range(1,11) if i%2 == 1)\n\n\n\n4.2 Exercice 2\nRé-écrivez le code ci-dessous à l’aide d’une boucle for.\nIndice : explorez les différentes utilisations de la méthode range()\n\ncpt = 5\nwhile cpt &gt;= 0:\n    print(cpt)\n    cpt -= 1      # cpt = cpt - 1\nprint(\"Boom\")\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.3 Exercice 3\nRéécrivez la boucle for suivante à l’aide d’une boucle while.\n\ngamme = ['do', 're', 'mi', 'fa', 'sol', 'la', 'si']\n\nfor i, note in enumerate(gamme):\n    print(\"La note numéro \" + str(i) + \" de la gamme de do majeur est \" + note)\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.4 Exercice 4\nTriez la liste ci-dessous à l’aide de 2 boucles for (sans utiliser de méthode toute faite de tri) :\n\nliste = [34, 7, 20, 12, 50, 23, 16, 28, 6, 11, 19, 13, 26, 8, 9]\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.5 Exercice 5\nEcrivez un programme permettant de calculer les 10 premiers termes de la suite de Fibonacci à l’aide d’une boucle for.\nMême question avec une boucle while.\nRappel : La suite de Fibonacci se définit de la manière suivante :\n\nles deux premiers nombres sont 0 et 1\nchaque autre nombre de la suite s’obtient en additionnant les deux nombres qui le précèdent\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.6 Exercice 6\nCalculer le minimum et le maximum de la série de valeurs suivantes, sans utiliser les fonctions min et max de Python.\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.7 Exercice 7\nÀ l’aide de boucles for et while, parcourez ce dictionnaire et affichez la moyenne de chaque élève.\n\nnotes = {\n    \"Miranda\"  : [16, 5, 8, 12],\n    \"Celestin\" : [19, 1, 7, 10],\n    \"Hypolyte\" : [18, 3, 12],\n    \"Josephine\": [12, 15, 14, 14]\n}\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n4.8 Exercice 8\nCalculer la moyenne et la variance de la série de valeurs suivantes, sans utiliser des fonctions déjà codées :\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\nPour rappel, les formules sont :\n\nmoyenne : \\[\\bar{x} = {\\frac {1}{n}}\\sum_{i=1}^{n}x_{i}\\]\nvariance : \\[\\sigma^2 = {\\frac {1}{n}}\\sum_{i=1}^{n} (x_{i}-\\bar{x})^2\\]\n\n\n# Testez votre réponse dans cette cellule\n\n\n# Pour vérifier vos résultats\nimport numpy as np\n\n# Create an array of numbers\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\n\nprint(\"Mean     : \", np.mean(x))\nprint(\"Variance : \", np.var(x))"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html",
    "href": "docs/python/01-types-et-variables.html",
    "title": "Types et variables",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#avant-de-commencer",
    "href": "docs/python/01-types-et-variables.html#avant-de-commencer",
    "title": "Types et variables",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#introduction",
    "href": "docs/python/01-types-et-variables.html#introduction",
    "title": "Types et variables",
    "section": "Introduction",
    "text": "Introduction\nDans ce notebook, nous allons découvrir les types de base en python :\n\nnumériques\n\nint : entiers\nfloat : décimaux\n\nchaines de caractères : str\nbooléens : bool"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#affectation-de-variables",
    "href": "docs/python/01-types-et-variables.html#affectation-de-variables",
    "title": "Types et variables",
    "section": "1 Affectation de variables",
    "text": "1 Affectation de variables\n\n# Créer la variable a et lui affecter la valeur 8\na = 8\n\n# Créer la variable b et lui affecter la chaîne de caractère \"texte\"\nb = \"texte\"\n\n# Créer la variable c et lui affecter le booléen True\nc = True\n\n\n# Afficher le contenu de a\na\n\nRemarque : Un notebook n’affiche que la dernière valeur qui lui est demandé.\nPour réaliser plusieurs affichages, il faut utiliser la méthode print\n\nprint(a+1)\nprint(b)\nprint(c)\n\nPython est langage typé dynamiquement.\nCela siginifie qu’il est possible de modifier le type d’une variable sans contrainte.\nSi la variable a contient du texte, il est possible de lui affecter ensuite un entier.\n\nprint(a)\na = \"abcd\"\nprint(a)\na = False\nprint(a)\n\nAstuce : Pour afficher toutes les variables créées et leurs valeurs, vous pouvez utiliser la commande %whos\n\n%whos"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#nombres",
    "href": "docs/python/01-types-et-variables.html#nombres",
    "title": "Types et variables",
    "section": "2 Nombres",
    "text": "2 Nombres\nLa fonction type permet de connaitre le type\n\na = 8\ntype(a)\n\n\nb = 33.5\ntype(b)\n\n\nfloat('inf')\n\n\n2.1 Convertions\nLes fonctions float et int peuvent être utilisées pour passer d’un type à l’autre.\n\n# Conversion en float\nfloat(a)\n\n\n# Conversion en int (partie entière)\nint(b)\n\n\n# Notation scientifique\n2.1e3\n\n\n\n2.2 Opérations arithmétiques de base\n\n# Addition\n1 + 1\n\n\n# Soustraction\n6 - 2\n\n\n# Multiplication\n3 * 4\n\n\n# Division\n11 / 5\n\n\n# Division euclidienne : quotient\n11 // 5\n\n\n# Division euclidienne : reste (modulo)\n11 % 5\n\n\n# Puissance\n2 ** 10\n\n\n# Racine carrée\n36 ** 0.5"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#chaînes-de-charactères",
    "href": "docs/python/01-types-et-variables.html#chaînes-de-charactères",
    "title": "Types et variables",
    "section": "3 Chaînes de charactères",
    "text": "3 Chaînes de charactères\nLes chaînes de caractères (strings) sont utilisées pour stocker de l’information textuelle.\nUn string se définit en mettant l’information entre apostrophes ' ou entre guillemets \".\n\n3.1 Définition\n\na = 'une chaine de caractères définie avec des apostrophes'\na\n\n\nb = \"une chaine de caractères définie avec des guillemets\"\nb\n\n\n# Pour inclure une apostrophe à l'intérieur de la chaine\n\"j'inclus l'apostrophe\"\n\n\n# Pour inclure des guillemets à l'intérieur de la chaine\n'les \"guillemets\" sont là'\n\n\n\n3.2 Métodes utiles\nVoici un aperçu de quelques méthodes utiles. De nombreuses autres existent (voir documentation officielle)\n\n# Longueur d'une chaîne (nombre de caractères)\nlen(\"J'ai 18 caractères\")\n\n\n# Concaténation\n\"I am\" + \"your father\"\n\" \".join([\"I am\", \"your father\"])\n\n\n# Concaténation avec un nombre\nannee = 2\n\"je suis en \" + annee + \"ème année\"\n\nProblème, il faut au préalable convertir le nombre en chaîne de caractères.\nLa méthode str fait le travail.\n\n# Concaténation avec un nombre - après convertion du nombre en string\nannee = 2\n\"je suis en \" + str(annee) + \"ème année\"\n\n\n# Répétition\n\"hop \" * 5\n\n\n# Mettre en majuscules\n\"C'est OK\".upper()\n\n\n# Mettre en minuscules\n\"C'est OK\".lower()\n\n\n# Compter le nombre d'occurences\n\"Mangez cinq fruits et légumes par jour\".count(\"a\")\n\n\n# Créer une liste de mots\n\"Mangez cinq fruits et légumes par jour\".split()\n\n\n# Séparer les mots selon un caractère spécifique\n\"un-deux-trois-soleil\".split(\"-\")\n\n\n# Utiliser les strings comme templates\n\"mon numéro est : {}\".format(\"06 12 34 56 78\")\n\n\n# Commence par ?\n\"vélo\".startswith(\"vé\")\n\n\n# Se termine par ?\n\"vélo\".endswith(\"lo\")\n\n\n\n3.3 Extraire des sous-chaînes\nUne chaîne de caractères est considérée en Python comme une liste de caractères.\nIl est donc possible d’extraire différents éléments de cette liste\n\n# Premier élémént\n\"c'est de toute beauté\"[0]\n\n\n# Deuxième élémént\n\"c'est de toute beauté\"[1]\n\n\n# Dernier élémént\n\"c'est de toute beauté\"[-1]\n\n\n# À partir d'un certain caractère\n\"c'est de toute beauté\"[6:]\n\n\n# Jusqu'à un certain caractère\n\"c'est de toute beauté\"[:8]\n\n\n# Extraire une sous-chaîne\n\"c'est de toute beauté\"[9:14]\n\n\n# Extraire tous les 2 caractères, à partir de la 4 ème position\n\"c'est de toute beauté\"[4::2]\n\n\n# Inverser une chaîne\n\"c'est de toute beauté\"[::-1]\n\n\nCaractères spéciaux\nPour insérer des caractères spéciaux au sein d’une chaîne de caractère, il faut utiliser le caractère d’échappement \\.\n\n\n\nCaractère\nDescription\n\n\n\n\n\\\nCaractère d’échappement\n\n\n\\’\nApostrophe\n\n\n\\”\nGuillemets doubles\n\n\n\\n\nRetour à la ligne\n\n\n\\t\nTabulation horizontale\n\n\n\\r\nRetour chariot\n\n\n\n\nc = \"une chaîne\\nsur 2 lignes\"\nprint(c)\n\n\n# Définir une chaîne de caractères sur plusieurs lignes\nd = \"\"\"une autre \\\"possibilité\\\" pour\navoir une chaîne sur 2 lignes\"\"\"\nprint(d)"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#booléens",
    "href": "docs/python/01-types-et-variables.html#booléens",
    "title": "Types et variables",
    "section": "4 Booléens",
    "text": "4 Booléens\nLes Booléens ne peuvent prendre que deux valeurs : True et False\nAttention à bien respecter la notation avec la première lettre en majuscule et les autres en minuscule.\n\ntype(True)\n\n\n4.1 Opérateurs de comparaison\n\n\n\nOpérateur\nSignification\n\n\n\n\n==\nEgal à\n\n\n!=\nNon égal à\n\n\n&lt;\nStrictement inférieur à\n\n\n&gt;\nStrictement supérieur à\n\n\n&lt;=\nInférieur ou égal à\n\n\n&gt;=\nSupérieur ou égal à\n\n\n\n\n8 &gt; 5\n\n\n1+1 == 2\n\n\n[1, 2, 3] == [1, 2, 3]\n\n\n\"girafe\" != \"gnou\"\n\n\n# Enchainement d'opérateurs\n1 &lt; 2 == 2 &gt;= 1 != 2\n\n\n\n4.2 Opérateurs and, or, not\n\na = True\nb = False\n\na and b\n\n\na or b\n\n\nnot a\n\n\n(a or b) and (a and not b)"
  },
  {
    "objectID": "docs/python/01-types-et-variables.html#exercices",
    "href": "docs/python/01-types-et-variables.html#exercices",
    "title": "Types et variables",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nCalculer la somme des longueurs des trois chaînes de caractères suivantes :\n\n“une première chaîne”\n“et une deuxième”\n“jamais deux sans trois”\n\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.2 Exercice 2\nQuel est le type adapté pour définir un code postal ?\nEssayer de définir les codes postaux suivants au format int et au format string :\n\n92120\n02350\n\nQue concluez-vous ?\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.3 Exercice 3\nCompter le nombre de fois où la lettre e est présente dans la chaîne suivante : Je compte le nombre de e dans cette chaîne de caractères\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.4 Exercice 4\nRepérer la première position où la lettre e est présente dans la chaîne suivante : “Je fais un comptage des e.”\nIndice : on peut utiliser la méthode built-in find.\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.5 Exercice 5\nSupprimer les espaces superflus au début et à la fin de la chaîne suivante :\nIndice : on peut utiliser la méthode built-in strip.\n\n# Tapez votre réponse dans cette cellule\na = \"    Un string très mal formatté.         \"\n\n\n\n5.6 Exercice 6\nRéaliser la suite d’opérations suivantes à l’aide des opérateurs d’incrémentation, et imprimer la valeur finale :\n\ninitialiser une variable à 1\nlui soustraire 5\nla multiplier par 4\nlui ajouter 22\n\n\n# Tapez votre réponse dans cette cellule\n\n\n\n5.7 Exercice 7\nConsidérons les deux séquences suivantes :\n\n“nous sommes en”\n“2022”\n\nTrouvez à partir du tutoriel deux manières différentes de les utiliser pour composer la séquence “nous sommes en 2022”.\n\n# Tapez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/outils/YAML.html",
    "href": "docs/outils/YAML.html",
    "title": "YAML 101",
    "section": "",
    "text": "YAML (YAML Ain’t Markup Language) est un format de sérialisation de données lisible par l’homme, conçu pour être facile à lire et à écrire.\nIl est souvent utilisé pour la configuration des fichiers, le stockage de données, et les échanges de données entre langages de programmation."
  },
  {
    "objectID": "docs/outils/YAML.html#quest-ce-que-yaml",
    "href": "docs/outils/YAML.html#quest-ce-que-yaml",
    "title": "YAML 101",
    "section": "",
    "text": "YAML (YAML Ain’t Markup Language) est un format de sérialisation de données lisible par l’homme, conçu pour être facile à lire et à écrire.\nIl est souvent utilisé pour la configuration des fichiers, le stockage de données, et les échanges de données entre langages de programmation."
  },
  {
    "objectID": "docs/outils/YAML.html#pourquoi-utiliser-yaml",
    "href": "docs/outils/YAML.html#pourquoi-utiliser-yaml",
    "title": "YAML 101",
    "section": "2 Pourquoi utiliser YAML ?",
    "text": "2 Pourquoi utiliser YAML ?\n\nLisibilité\n\nYAML est conçu pour être lisible par l’homme. La syntaxe est simple et directe, sans beaucoup de ponctuations.\nLes indentations permettent une structure claire et hiérarchisée, semblable à celle des langages de programmation comme Python.\n\nFlexibilité\n\nYAML supporte des structures de données complexes comme les listes imbriquées et les dictionnaires.\nIl permet des alias et des ancres pour éviter la duplication de données, ce qui peut être utile pour des fichiers de configuration réutilisables.\n\nCompatibilité avec les autres formats\n\nYAML peut facilement être converti en JSON, et vice versa\n\nUsage dans DevOps\n\nYAML est largement utilisé dans les outils de gestion de configuration, les pipelines CI/CD, et les orchestrateurs de conteneurs"
  },
  {
    "objectID": "docs/outils/YAML.html#syntaxe",
    "href": "docs/outils/YAML.html#syntaxe",
    "title": "YAML 101",
    "section": "3 Syntaxe",
    "text": "3 Syntaxe\nVoici quelques exemples de syntaxe avec son équivalent json\n\n3.1 Attributs\n\n\n\n\nyaml\n\nperson:\n  name: Alice             # str\n  city: \"Amiens\"          # str\n  age: 30                 # int\n  height: 1.75            # float\n  student: false          # bool\n  birth_date: 1994-05-15  # date\n\n\n\n\njson\n\n{\n  \"person\": {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"height\": 1.75,\n    \"student\": false,\n    \"birth_date\": \"1994-05-15\"\n  }\n}\n\n\n\n\n\n3.2 Liste de valeurs\nPlusieurs possibilités pour déclarer des listes\n\n\n\n\nyaml\n\nhobbies: \n  - chess\n  - hiking\n  - landart\n\n--- # ou\n\nhobbies: [\"chess\", \"hiking\", \"landart\"]\n\n\n\n\njson\n\n{\n  \"hobbies\": [\n    \"chess\",\n    \"hiking\",\n    \"landart\"\n  ]\n}\n\n\n\nAutre exemple\n\n\n\n\nyaml\n\nservers:\n  - name: server1\n    ip: 192.168.1.1\n  - name: server2\n    ip: 192.168.1.2\n  - {name: \"server3\", ip: 192.168.1.3}\n\n\n\n\njson\n\n{\n  \"servers\": [\n    {\"name\": \"server1\", \"ip\": \"192.168.1.1\"},\n    {\"name\": \"server2\", \"ip\": \"192.168.1.2\"},\n    {\"name\": \"server3\", \"ip\": \"192.168.1.3\"}\n  ]\n}\n\n\n\n\n\n3.3 Ancre et alias\n\n\n\n\nyaml\n\nparent: &pere Bob\nchild:\n  - name: Eva\n    papa: *pere\n  - name: Laury\n    papa: *pere\n\n\n\n\njson\n\n{\n  \"parent\": \"Bob\",\n  \"child\": [\n    {\"name\": \"Eva\", \"parent\": \"Bob\"},\n    {\"name\": \"Laury\", \"parent\": \"Bob\"}\n  ]\n}\n\n\n\n\n\n3.4 Héritage\n\n\n\n\nyaml\n\ndefault: &default_settings\n  timeout: 30\n  retries: 5\n\nserver1:\n  &lt;&lt;: *default_settings\n  name: server1\n\nserver2:\n  &lt;&lt;: *default_settings\n  name: server2\n  retries: 3\n\n\n\n\njson\n\n{\n  \"default\": {\n    \"timeout\": 30,\n    \"retries\": 5\n  },\n  \"server1\": {\n    \"timeout\": 30,\n    \"retries\": 5,\n    \"name\": \"server1\"\n  },\n  \"server2\": {\n    \"timeout\": 30,\n    \"retries\": 3,\n    \"name\": \"server2\"\n  }\n}\n\n\n\n\n\n3.5 Long texte\n\n\nyaml\n\n\n# En conservant les retours à la ligne\nfable: |\n  Maître Corbeau, sur un arbre perché,\n  Tenait en son bec un fromage.\n  Maître Renard, par l'odeur alléché,\n  Lui tint à peu près ce langage :\n  \"Hé ! bonjour, Monsieur du Corbeau.\n  Que vous êtes joli ! que vous me semblez beau !\n  Sans mentir, si votre ramage\n  Se rapporte à votre plumage,\n  Vous êtes le Phénix des hôtes de ces bois.\"\n  À ces mots le Corbeau ne se sent pas de joie ;\n  Et pour montrer sa belle voix,\n  Il ouvre un large bec, laisse tomber sa proie.\n  Le Renard s'en saisit, et dit : \"Mon bon Monsieur,\n  Apprenez que tout flatteur\n  Vit aux dépens de celui qui l'écoute :\n  Cette leçon vaut bien un fromage, sans doute.\"\n  Le Corbeau honteux et confus\n  Jura, mais un peu tard, qu'on ne l'y prendrait plus.\n\n# En supprimant les retours à la ligne\nchoixpeau: &gt;\n  Les nouveaux élèves de Poudlard sont répartis en quatre maisons : Gryffondor\n  pour les courageux, Poufsouffle pour les travailleurs, Serdaigle pour les\n  intelligents, Serpentard pour les ambitieux. Le Choixpeau magique, qui \n  s'occupe de la répartition, hésite sur la meilleure maison pour Harry. \n  Comme Harry a entendu dire que les mages noirs venaient tous de Serpentard,\n  il demande à aller ailleurs, et le Choixpeau l'envoie à Gryffondor, avec \n  Ron et Hermione. Albus Dumbledore, le directeur, prévient les élèves qu’ils\n  ne doivent pas aller dans la Forêt interdite, ni dans le couloir du deuxième\n  étage.\n\na"
  },
  {
    "objectID": "docs/outils/VM.html",
    "href": "docs/outils/VM.html",
    "title": "VM",
    "section": "",
    "text": "http://view.ensai.fr\ninstaller VMWare Horizon (Recommandé)\nOuvrir VMWare Horizon\n\nAller dans Paramètre &gt; Sécurité &gt; Désactiver la vérification de Certificat\nAjouter un serveur\n\nview.ensai.fr\nsaisir id et mot de passe"
  },
  {
    "objectID": "docs/outils/VM.html#se-connecter-à-distance-la-vm-ensai",
    "href": "docs/outils/VM.html#se-connecter-à-distance-la-vm-ensai",
    "title": "VM",
    "section": "",
    "text": "http://view.ensai.fr\ninstaller VMWare Horizon (Recommandé)\nOuvrir VMWare Horizon\n\nAller dans Paramètre &gt; Sécurité &gt; Désactiver la vérification de Certificat\nAjouter un serveur\n\nview.ensai.fr\nsaisir id et mot de passe"
  },
  {
    "objectID": "docs/outils/VM.html#ctrl-alt-f12",
    "href": "docs/outils/VM.html#ctrl-alt-f12",
    "title": "VM",
    "section": "2 CTRL + ALT + F12",
    "text": "2 CTRL + ALT + F12\n\npour bloquer votre session dès que vous quittez votre poste\nà votre retour, se reconnecter simplement\nla session reste active pendant 3h"
  },
  {
    "objectID": "docs/outils/VM.html#lecteur-p",
    "href": "docs/outils/VM.html#lecteur-p",
    "title": "VM",
    "section": "3 Lecteur P:",
    "text": "3 Lecteur P:\n\nespace Personnel de 2Go\nEnregistrez vos fichiers dans ce lecteur\nfaite des sauvegardes de temps en temps sur clé USB"
  },
  {
    "objectID": "docs/outils/VM.html#disque-plein",
    "href": "docs/outils/VM.html#disque-plein",
    "title": "VM",
    "section": "4 Disque plein",
    "text": "4 Disque plein\n\nSi vous recevez des mails Votre disque est plein à 100%\nSouvent cela est du à des fichiers temporaires qui se créent lorsque vous ouvrez VSCode, Teams…\nPaliatif :\n\nCliquer sur l’icone Windows Démarrer\n2-Accessoires\nlancer les scripts : Nettoyage-profil et Nettoyage-Python"
  },
  {
    "objectID": "docs/outils/VM.html#impression",
    "href": "docs/outils/VM.html#impression",
    "title": "VM",
    "section": "5 Impression",
    "text": "5 Impression\n\nMode opératoire complet : ENT &gt; Assistance &gt; Foire aux questions &gt; Rechercher “imprimer”\nImprimez votre document sur PAPERCUT (imprimante ENSAI salle 113)\nRetenez votre code d’identification à 6 chiffres\nPapercut (ou dans ENT &gt; Impression &gt; Papercut)\nAllez en salle 113\nEntrez votre code d’identification sur l’imprimante\nSélectionnez et libérez vos documents en attente d’impression\nAutre possibilité pour s’identifier auprès de l’imprimante\nEn utilisant votre carte étudiant\n\nSuivre mode opératoire affiché en salle 113"
  },
  {
    "objectID": "docs/outils/LaTeX.html",
    "href": "docs/outils/LaTeX.html",
    "title": "LaTeX",
    "section": "",
    "text": "LaTeX, créé par Leslie Lamport en 1984, est un langage de programmation conçu pour la mise en forme de documents. Il est très utilisé dans les milieux académiques et scientifiques pour la rédaction de textes complexes, notamment des articles, des rapports, des thèses et des présentations. LaTeX permet de créer des documents de haute qualité typographique grâce à sa gestion avancée des formules mathématiques, des tableaux, des figures et des références bibliographiques.\nLaTeX reste incontournable pour les documents nécessitant une mise en page complexe et des formules mathématiques avancées, mais il est supplanté par Markdown beaucoup plus utilisé pour des tâches plus simples. Markdown est souvent préféré pour la rédaction rapide de notes, de documents collaboratifs, et de contenus web, en raison de sa simplicité et de sa flexibilité."
  },
  {
    "objectID": "docs/outils/LaTeX.html#quest-ce-que-latex",
    "href": "docs/outils/LaTeX.html#quest-ce-que-latex",
    "title": "LaTeX",
    "section": "",
    "text": "LaTeX, créé par Leslie Lamport en 1984, est un langage de programmation conçu pour la mise en forme de documents. Il est très utilisé dans les milieux académiques et scientifiques pour la rédaction de textes complexes, notamment des articles, des rapports, des thèses et des présentations. LaTeX permet de créer des documents de haute qualité typographique grâce à sa gestion avancée des formules mathématiques, des tableaux, des figures et des références bibliographiques.\nLaTeX reste incontournable pour les documents nécessitant une mise en page complexe et des formules mathématiques avancées, mais il est supplanté par Markdown beaucoup plus utilisé pour des tâches plus simples. Markdown est souvent préféré pour la rédaction rapide de notes, de documents collaboratifs, et de contenus web, en raison de sa simplicité et de sa flexibilité."
  },
  {
    "objectID": "docs/outils/LaTeX.html#pourquoi-utiliser-latex",
    "href": "docs/outils/LaTeX.html#pourquoi-utiliser-latex",
    "title": "LaTeX",
    "section": "2 Pourquoi utiliser LaTeX ?",
    "text": "2 Pourquoi utiliser LaTeX ?\n\nQualité typographique : LaTeX produit des documents avec une mise en page professionnelle, idéale pour les publications académiques.\nGestion avancée des formules mathématiques : LaTeX excelle dans la présentation des formules et des équations complexes.\nAutomatisation : LaTeX automatise de nombreuses tâches, comme la numérotation des sections, la gestion des références croisées et la création de bibliographies.\nFlexibilité et extensibilité : Avec une vaste bibliothèque de packages, LaTeX peut être personnalisé pour répondre à une grande variété de besoins spécifiques.\nStabilité et reproductibilité : Les documents LaTeX sont textuels et peuvent être versionnés facilement avec des outils comme Git, assurant une gestion précise des versions et des collaborations.\nSupport pour les références et citations : LaTeX gère efficacement les références bibliographiques et les citations avec des outils comme BibTeX et BibLaTeX."
  },
  {
    "objectID": "docs/outils/LaTeX.html#utiliser-latex",
    "href": "docs/outils/LaTeX.html#utiliser-latex",
    "title": "LaTeX",
    "section": "3 Utiliser LaTeX",
    "text": "3 Utiliser LaTeX\nPour utiliser LaTeX, vous avez principalement deux options :\n\nen ligne via des plateformes dédiées : Overleaf…\nen installant un logiciel sur votre ordinateur : Texmaker, TeXstudio…\n\nLes interfaces pour travailler avec LaTeX sont souvent divisées en deux parties distinctes : d’un côté, l’éditeur de code LaTeX et de l’autre, la vue de mise en forme du document.\n\n3.1 Démarrer avec Overleaf\n\nConnectez vous au site d’Overleaf, créez un compte si nécessaire et connectez-vous\nCliquez sur le bouton New Project, puis sur Blank project et nommez votre projet\n\n\n\n\n\n\n\nNote\n\n\n\nCela ouvre la page de votre projet avec :\n\ndans le menu de gauche : votre explorateur de fichiers (avec par défaut un fichier main.tex)\nà gauche : votre code LaTeX\nà droite : le document mis en forme\n\nPour revenir à l’écran principal, cliquez sur l’icone 🏠\n\n\n\nAjoutez du texte dans la section Introduction, puis cliquez sur Recompile\nDans l’explorer, créez un dossier img qui contiendra vos images\n\n\n\n\n\n\n\nQuelques fonctionnalités utiles\n\n\n\nEn haut à droite, vous trouverez des boutons proposant des fonctionnalités utiles :\n\nReview : pour ajouter des commentaires\n\nDans la partie code, sélectionnez du code à la souris\nCliquez sur le bouton Add comment qui doit apparaitre\n\nShare : pour travailler en groupe\n\nTurn on the sharing link\nPartagez le lien d’édition\n\nHistory : pour voir l’historique des modifications\n\n\n\n\n\n3.2 Mon premier document\nVoici un exemple simple illustrant les étapes essentielles pour rédiger un document LaTeX :\n\nDéfinissez le type de document (article, report, book, slide…) et la taille de police par défaut\nListez des packages nécessaires : de très nombreuses fonctionnalités nécessitent l’utilisation d’un package\nDéfinissez les métadonnées du document telles que le titre, l’auteur et la date\nÉcrivez votre contenu principal entre \\begin{document} et \\end{document}\n\n\\documentclass[11pt]{article}     % Article avec une taille de police à 11 par défaut\n\n% Imports de packages\n\\usepackage[french]{babel}        % typographie française\n\\usepackage[T1]{fontenc}          % type d'encodage pour les polices de caractères\n\\usepackage{graphicx}             % pour insérer des images\n\\usepackage{amsmath, amssymb}     % symboles mathematiques\n\\usepackage{enumerate, enumitem}  % pour les listes\n\n% Métadonnées\n\\title{An awesome title}\n\\author{An awesome author}\n\\date{September 2024}\n\n% Début du document\n\\begin{document}\n\n\\maketitle                        % pour afficher titre, auteur et date\n\nAn awesome content.\n\n\\end{document}\n\n\n\n\n\n\nImportant\n\n\n\nIl faut bien distinguer et ne pas mélanger :\n\nles entêtes (imports de packages, métadonnées, redéfinitions de commandes…)\nle contenu du document : entre les balises \\begin{document} et \\end{document}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#sections",
    "href": "docs/outils/LaTeX.html#sections",
    "title": "LaTeX",
    "section": "4 Sections",
    "text": "4 Sections\nVous pouvez découper votre document en sections, sous-sections et sous-sous-sections qui seront automatiquement numérotées avec les commandes \\section, \\subsection et \\subsubsection.\n\n\n\n\n\n\nNumérotation\n\n\n\nIl est possible de ne pas numéroter certaines sections en ajoutant le symbole * à la fin de la commande.\nCela est utile par exemple pour introduction et conclusion.\n\nToujours à propos de numérotation, mais cette fois-ci concernant celle des pages : il est d’usage de ne pas numéroter la page de titre, ni la table des matières. La commande titlepage permet de définir les pages qui ne doivent pas être numérotées.\n\n\nVous pouvez également inclure une table des matières.\n\\documentclass[11pt]{article}\n\n\\begin{document}\n\n\\begin{titlepage}                  % Crée une nouvelle page de titre non numérotée\n    My title\n\\end{titlepage}\n\n\\begin{titlepage}\n    \\tableofcontents               % Table des matières\n\\end{titlepage}\n\n\\section*{Introduction}            % avec le *, cette section n'est pas numérotée\n\\addcontentsline{toc}{section}{Introduction} % Pour ajouter cette section non numérotée à la Table des matières\nintro content\n\n\\section{First Section}\ncontent of first section\n\n\\section{Second Section}\ncontent of second section\n\n\\subsection{First Subsection of second section}\nContent of subsection 2.1\n\n\\subsubsection{subsubsection}\nContent of subsubsection 2.1.1\n\n\\end{document}\n\n4.1 Découper son fichier\nSi vous trouvez votre fichier principal main.tex trop long et que vous avez du mal à vous y retrouver, il est possible de le découper en plusieurs fichiers.\nImaginez que votre fichier initial est le suivant :\n\n\nmain.tex\n\n\\documentclass[11pt]{article}\n\n\\begin{document}\n\n\\begin{titlepage}\n    My title\n\\end{titlepage}\n\n\\section{First Section}\nvery very very long first section\n\n\\newpage\n\n\\section{Second Section}\nvery very very long second section\n\n\\end{document}\n\nVous pouvez découper votre fichier de cette manière :\n\ncréer 2 nouveaux fichiers partie1.tex et partie2.tex\ndéplacer le contenu des sections 1 et 2 dans ces fichiers\nimporter le contenu de ces fichiers dans le main.tex\n\n\n\npartie1.tex\n\n\\section{First Section}\nvery very very long first section\n\n\n\npartie2.tex\n\n\\section{Second Section}\nvery very very long second section\n\n\n\nmain.tex\n\n\\documentclass[11pt]{article}\n\n\\begin{document}\n\n\\begin{titlepage}\n    My title\n\\end{titlepage}\n\n\\include{partie1}          % import du contenu du fichier partie1.tex\n\n\\newpage\n\n\\include{partie2}          % import du contenu du fichier partie2.tex\n\n\\end{document}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#mise-en-forme",
    "href": "docs/outils/LaTeX.html#mise-en-forme",
    "title": "LaTeX",
    "section": "5 Mise en forme",
    "text": "5 Mise en forme\n\n\n\nExemple d’utilisation\nRésultat\n\n\n\n\n\\textbf{Texte en gras}\nTexte en gras\n\n\n\\textit{Texte en italique}\nTexte en italique\n\n\n\\underline{Texte souligné}\nTexte souligné\n\n\n\\texttt{Texte en monospace}\nTexte en monospace\n\n\n\n\n5.1 Autres mises en forme\n\n\n\nCommande\nRésultat\n\n\n\n\n\\textsc{}\nTexte en petites majuscules\n\n\n\\textsuperscript{}\nTexte en exposant\n\n\n\\textsubscript{}\nTexte en indice\n\n\n\\tiny{}\nTexte minuscule\n\n\n\\large{}\nTexte grand\n\n\n\\Huge{}\nTexte géant\n\n\n\n\n\n5.2 Alignement\n\nGaucheCentréDroite\n\n\n\\begin{flushleft}\n    Ce texte est aligné à gauche\n\\end{flushleft}\n\n\n\\begin{center}\n    Ce texte est centré\n\\end{center}\n\n\n\\begin{flushright}\n    Ce texte est aligné à droite\n\\end{flushright}\n\n\n\n\n\n5.3 Couleur\nLa mise en couleur du texte nécessite le package xcolor. Pour avoir accès à plus de noms de couleurs, vous pouvez par exemple ajouter l’option x11names.\n% \\usepackage[x11names]{xcolor}\n\n\\textcolor{green}{Ce texte est en vert.}                                 \\par\n\\colorbox{magenta}{Ce texte a un fond magenta.}                          \\par\n\\fcolorbox{blue}{cyan}{Ce texte a une bordure bleue et un fond cyan.}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#retour-à-la-ligne",
    "href": "docs/outils/LaTeX.html#retour-à-la-ligne",
    "title": "LaTeX",
    "section": "6 Retour à la ligne",
    "text": "6 Retour à la ligne\n\n\n\n\n\n\nWarning\n\n\n\nPour LaTeX, un retour à la ligne simple est l’équivalent d’un espace.\n\n\nIl existe de très nombreuses manières de faire un retour à la ligne, en voici quelques unes :\nRetour à la ligne \\newline\nAutre retour à la ligne \\\\\nAjout d'un argument pour préciser l'espace vertical attendu \\\\[2 cm]\nUtilisation de vspace : \\vspace{1cm}\n\nUtiliser un big break\n\\bigbreak\nLaisser simplement une ligne vide en dessous\n\nEt c'est déjà pas mal !\n\n6.1 Saut de page\nLa commande \\newpage permet simplement de faire un saut de page."
  },
  {
    "objectID": "docs/outils/LaTeX.html#listes",
    "href": "docs/outils/LaTeX.html#listes",
    "title": "LaTeX",
    "section": "7 Listes",
    "text": "7 Listes\n\n7.1 Non ordonnée\n\\begin{itemize}\n    \\item un élément\n    \\item un autre élément \n\\end{itemize}\n\n\n7.2 Ordonnée\n\\begin{enumerate}\n    \\item élément 1\n    \\item élément 2\n\\end{enumerate}\n\n\n\n\n\n\nIndentation\n\n\n\nLaTeX n’est pas sensible à l’indentation mais pour plus de lisibilité, nous vous conseillons d’indenter votre code.\n\n\n\n\n7.3 Changer les numérotations ou symboles\n\na) b) c)RenewcommandItem par item\n\n\n% \\usepackage{enumitem}\n\n\\begin{enumerate}[label=\\alph*)]\n    \\item élément a\n    \\item élément b\n\\end{enumerate}\n\n\nEn redéfinissant les puces utilisées à chaque niveau.\n% \\usepackage{amssymb}\n\n\\renewcommand{\\labelitemi}{$\\checkmark$}      % 1er niveau\n\\renewcommand{\\labelitemii}{$\\blacksquare$}   % 2e niveau\n\n\\begin{itemize}\n    \\item un élément\n    \\item un autre élément     \n        \\begin{itemize}\n            \\item un élément\n            \\item un autre élément \n        \\end{itemize}\n\\end{itemize}\n\n\nEn choisissant la puce utilisée pour chaque item.\n\\begin{itemize}\n    \\item[$\\blacksquare$] Carré noir\n    \\item[$\\checkmark$] Check\n    \\item[$\\star$] Étoile    \n\\end{itemize}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#tableaux",
    "href": "docs/outils/LaTeX.html#tableaux",
    "title": "LaTeX",
    "section": "8 Tableaux",
    "text": "8 Tableaux\n\n\n\n\n\n\nTip\n\n\n\nLa syntaxe LaTeX pour réaliser un tableau est peu intuitive et très fastidieuse. Il est vivement recommandé de créer votre tableau dans un tableur calc et d’utiliser un outil en ligne pour le convertir en code LaTeX.\nExemple d’outil : https://tableconvert.com/excel-to-latex\n\n\n\\begin{table}\n    \\centering                               % Table centrée\n    \\caption{Tableau des départements}       % Titre du tableau\n    \\label{tab_dep}                          % Label pour référencer le tableau\n    \\vspace{2mm}                             % Ajout d'un espace vertical\n    \\begin{tabular}{|c||l|l|r|}\n        \\hline\n        \\textbf{Numéro} & \\textbf{Département} & \\textbf{Chef Lieu} & \\textbf{Nb habitants} \\\\\n        \\hline \\hline\n        01 & Ain                     & Bourg-en-Bresse & 650 000 \\\\\n        02 & Aisne                   & Laon            & 535 000 \\\\\n        03 & Allier                  & Moulins         & 339 000 \\\\\n        04 & Alpes-de-Haute-Provence & Digne-les-Bains & 166 000 \\\\\n        05 & Hautes-Alpes            & Gap             & 140 000 \\\\\n        \\hline\n    \\end{tabular}\n\\end{table}\nEssayons tout de même d’expliquer la syntaxe ci-dessus :\nLa commande \\begin{tabular}{|c||l|l|r|} permet de définir les colonnes et leurs alignements :\n\n\n\nSymbole\nSignification\n\n\n\n\nc\nColonne centrée\n\n\nl\nColonne alignée à gauche\n\n\nr\nColonne alignée à droite\n\n\n|\nTrait vertical\n\n\n||\nDouble trait vertical\n\n\n\nLes entêtes de colonnes sont mises en gras avec la commande \\textbf{}.\nPour définir les lignes et le contenu :\n\n\n\nSymbole\nSignification\n\n\n\n\n\\hline\nLigne horizontale dans le tableau\n\n\n&\nPour séparer les colonnes dans un tableau\n\n\n\\\\\nFin d’une ligne dans un tableau"
  },
  {
    "objectID": "docs/outils/LaTeX.html#images",
    "href": "docs/outils/LaTeX.html#images",
    "title": "LaTeX",
    "section": "9 Images",
    "text": "9 Images\n\n\n\n\n\n\nDossier img\n\n\n\nUne bonne pratique consiste à stocker toutes les images dans un seul dossier nommé par exemple img.\nRéférencez ensuite ce dossier au niveau des métadonnées du document :\n\\graphicspath{{img/}}          %% le chemin vers les images\n\n\n\n9.1 Image simple\n\\includegraphics[width=0.2\\textwidth]{ensai_logo.png}\nL’option [width=0.2\\textwidth] signifie que l’image aura une largeur de 20% de la largeur du texte\n\n\n9.2 Figures\nNous préférons généralement inclure une image dans une figure. Cela permet de numéroter, définir un titre, un label.\n\\begin{figure}[h]\n    \\centering\n    \\includegraphics[width=0.75\\textwidth]{ensai_logo.png}\n    \\caption{Le logo ENSAI}\n    \\label{fig:logo-ensai}\n\\end{figure}\n\n\n\n\n\n\nNote\n\n\n\nVous pouvez utiliser la commande \\ref{} pour faire référence à la figure via son label.\nExemple : “Comme vous pouvez le remarquer, la figure \\ref{fig:logo-ensai} représente le logo de l’école.”"
  },
  {
    "objectID": "docs/outils/LaTeX.html#formules-mathématiques",
    "href": "docs/outils/LaTeX.html#formules-mathématiques",
    "title": "LaTeX",
    "section": "10 Formules mathématiques",
    "text": "10 Formules mathématiques\n\n\n\n\n\n\nNote\n\n\n\nVous pouvez insérer des formules :\n\nà l’intérieur d’un texte avec un seul $\navec retour à la ligne avec deux $$\n\n\n\nLa formule de la variance : \\[V = \\frac{1}{n} \\sum_{i=1}^{n} (x_{i} - \\overline{x})^{2}\\]\nLa formule de Koenig-Huygens : \\(\\mathbb{V}(X) = \\mathbb{E}(X^{2}) - (\\mathbb{E}(X))^{2}\\).\nLa formule de la variance : $$V = \\frac{1}{n} \\sum_{i=1}^{n} (x_{i} - \\overline{x})^{2}$$\n\nLa formule de Koenig-Huygens : $\\mathbb{V}(X) = \\mathbb{E}(X^{2}) - (\\mathbb{E}(X))^{2}$."
  },
  {
    "objectID": "docs/outils/LaTeX.html#bibliographie",
    "href": "docs/outils/LaTeX.html#bibliographie",
    "title": "LaTeX",
    "section": "11 Bibliographie",
    "text": "11 Bibliographie\nNous allons utiliser le format BibTeX. Ce format est réguliérement utilisé pour citer des articles scientifiques.\n\nÀ la racine de votre projet, créez un fichier .bib : biblio.bib et collez ce contenu\n@article{prospect_theory,\ntitle={Prospect theory: An analysis of decision under risk},\nauthor={Kahneman, Daniel and Tversky, Amos},\njournal={Econometrica},\nvolume={47},\nnumber={2},\npages={363--391},\nyear={1979}\n}\n\n@article{marriage_stability,\ntitle={College admissions and the stability of marriage},\nauthor={Gale, David and Shapley, Lloyd S},\njournal={The American Mathematical Monthly},\nvolume={69},\nnumber={1},\npages={9--15},\nyear={1962},\npublisher={Taylor \\& Francis}\n}\nRetournez dans votre fichier main.tex et citez un article\nLa Prospect Theory \\cite{prospect_theory}, développée par Daniel Kahneman et Amos Tversky, suggère que les individus évaluent les pertes et les gains de manière asymétrique,donnant généralement plus de poids aux pertes qu'aux gains équivalents.\nVous pouvez également ajouter à votre bibliographie des articles que vous ne citez pas avec \\nocite{marriage_stability}\nAffichez votre bibliographie\n\\bibliographystyle{plain}\n\\bibliography{biblio}\n\\addcontentsline{toc}{section}{Bibliographie} %% Ajout à la table des matières"
  },
  {
    "objectID": "docs/outils/LaTeX.html#annexes",
    "href": "docs/outils/LaTeX.html#annexes",
    "title": "LaTeX",
    "section": "12 Annexes",
    "text": "12 Annexes\nPour ajouter vos annexes :\n% \\usepackage{appendix}              % Package à ajouter au début\n\n\\appendix \n\\appendixpage \n\\addappheadtotoc\n\n\\section*{Annexe 1}\n\n\\section*{Annexe 2}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#redéfinir-les-commandes",
    "href": "docs/outils/LaTeX.html#redéfinir-les-commandes",
    "title": "LaTeX",
    "section": "13 Redéfinir les commandes",
    "text": "13 Redéfinir les commandes\nIl est parfois utile de pouvoir redéfinir certaines commandes LaTeX.\nCela est possible grâce à la commande \\renewcommand{\\nom_commande}{nouvelle_définition}.\n\n\n\n\n\n\nImportant\n\n\n\nLes commandes doivent être redéfinies avant le début du document i.e. avant \\begin{document}\n\n\nQuelques exemples :\n\\renewcommand{\\contentsname}{Sommaire} % Renommer la Table des matières\n\\renewcommand{\\refname}{Bibliographie} % Renommer la Bibliographie\n\n% Renommer les annexes\n\\renewcommand{\\appendixname}{Annexes} \n\\renewcommand{\\appendixpagename}{Annexes} \n\\renewcommand{\\appendixtocname}{Liste des Annexes}\n\n% définir une nouvelle commande (\\HRule : ligne horizontale)\n\\newcommand{\\HRule}{\\rule{\\linewidth}{0.5mm}}"
  },
  {
    "objectID": "docs/outils/LaTeX.html#ressources",
    "href": "docs/outils/LaTeX.html#ressources",
    "title": "LaTeX",
    "section": "Ressources",
    "text": "Ressources\n\nhttps://latexref.xyz/fr/\nWiki LaTeX"
  },
  {
    "objectID": "docs/outils/Bash.html",
    "href": "docs/outils/Bash.html",
    "title": "Le Bash",
    "section": "",
    "text": "Il y a peu, dans un monde proche, très proche la ligne de commande était le seul moyen de transmettre ses instructions à un ordinateur. Pas de souris, pas de bureau avec des icones, simplement un clavier et un terminal.\nDans de nombreux domaines de l’informatique, les instructions se donnent toujours en lignes de commande. En effet, créer des interfaces graphiques est couteux et plus difficile à maintenir.\nNous allons ici présenter quelques commandes simples, connues et utilisées par tout informaticien. Chez windows il y a 2 terminaux disponibles :\nCependant, nous nous interesserons ici à la sphère Unix beaucoup plus populaire. Il y a également différents interpréteurs, le plus utilisé étant Bash. Les commandes présentées ici sont standardisées et compréhensibles par n’importe quel interpréteur Unix (et sont même parfois identiques chez Windows)\nEn tant que Data Scientist on ne vous demandera pas de savoir pirater la CIA avec une Casio Collège. Cependant, connaitre ces commandes est un must-have qui vous servira à coup sûr."
  },
  {
    "objectID": "docs/outils/Bash.html#apprendre-à-naviguer",
    "href": "docs/outils/Bash.html#apprendre-à-naviguer",
    "title": "Le Bash",
    "section": "1 Apprendre à naviguer",
    "text": "1 Apprendre à naviguer\nIl ne s’agit pas d’apprendre à faire un noeud de chaise, mais de savoir parcourir les dossiers et les fichiers de votre machine.\n\nOuvrir un terminal Bash\n\nPar exemple Git Bash\n\nEcire la commande pwd puis ENTREE\n\nun faux ami : cela ne signifie pas password mais print working directory\nnormalement le résultat de cette commande est /p/\nvous êtes donc à la racine du lecteur /p, votre espace personnel\n\nls pour lister\n\naffiche les dossiers et fichiers de l’endroit où vous êtes (en l’occurence /p)\nls -l pour afficher en colonne (plus joli), et affiche d’autres informations telles le nom du propriétaire du fichier, la date de modification, les droits en lecture, écriture…\n\nll : souvent cet alias à ls -l existe\ncela signifie que pour l’interpréteur ll ou ls -l, c’est pareil\nmais ll c’est plus rapide à taper\nalias : affiche la liste des alias\n\nLe -l est donc une option de la commande ls\nChaque commande a de nombreuses options, internet est votre ami si besoin\n\ncd 'Ma musique'\n\ncd = change directory\nle terminal affiche votre nouvel emplacement : /p/Ma musique\nlorsqu’il y a des espaces dans un nom de dossier, il faut ajouter des guillemets simples ’ ou doubles ” autour du nom du dossier\n\npwd\nls\ncd ..\n\npour revenir au dossier parent\n\ncd /c\n\npour changer de lecteur et aller sur le disque C:/\n\nls\ncd /p\n\nrevenir au lecteur P pour la suite\n\n\nAvec les 3 commandes décrites ci-dessus (pwd, ls et cd) vous pouvez naviguer sereinement dans les dossiers."
  },
  {
    "objectID": "docs/outils/Bash.html#quelques-trucs-et-astuces",
    "href": "docs/outils/Bash.html#quelques-trucs-et-astuces",
    "title": "Le Bash",
    "section": "2 Quelques trucs et astuces",
    "text": "2 Quelques trucs et astuces\nVoici des raccourcis clavier bien utiles :\n\nFLECHE HAUT : historique des commandes lancées\n\nutile pour éviter de réécrire en entier une commande que l’on a lancée 2 min avant\nFLECHE BAS : également pour parcourir l’historique mais dans le sens inverse\n\nhistory : historique des commandes exécutées\nTAB : autocompletion\n\ncd Ma puis TAB\nle terminal va tenter de “compléter” la commande que vous êtes en train d’écrire\nComme il n’y a qu’un seul dossier commençant par “Ma”, en faisant TAB, le terminal va ajouter pour obtenir cd Ma\\ musique (= cd \"Ma musique\")\n\nCTRL + C : pour stopper la commande en cours si elle est trop longue\nCLIC Molette (ou parfois CLIC droit, ou encore SHIFT + INSER) : Coller"
  },
  {
    "objectID": "docs/outils/Bash.html#manipuler-fichiers-et-dossiers",
    "href": "docs/outils/Bash.html#manipuler-fichiers-et-dossiers",
    "title": "Le Bash",
    "section": "3 Manipuler fichiers et dossiers",
    "text": "3 Manipuler fichiers et dossiers\n\ncd /p\nmkdir -p Cours/Informatique/bash-tp\n\nmkdir = make directory\nCette commande crée le dossier bash-tp\n-p permet de créer les dossiers parents (Cours et Informatique) s’ils n’existent pas\n\ncd Cours/Informatique/bash-tp\n\nPour aller dans le dossier que l’on vient de créer\n\ntouch a.txt\n\ncréer un fichier vide nommé a.txt\n\nPour écrire dans un fichier il y a de nombreuses possibilités, par exemple avec l’éditeur vi\n\nCependant l’utilisation de vi est loin d’être triviale\nSi vous trouvez que ce TP est déjà assez compliqué comme ça, ne touchez pas à vi\nSi vous êtes trop curieux, que vous avez ouvert le fichier a.txt avec vi et que maintenant vous êtes bloqué, tapez :q! pour sortir\n\nPour info d’autres éditeurs :\n\nNano moins connu mais qui a l’air plus intuitif : nano a.txt (CTRL + X pour quitter)\nSi vous avez lancé votre terminal sous Windows : notepad a.txt\n\nrm a.txt\n\nrm = remove pour supprimer le fichier\n⚠️ attention à bien utiliser cette commande, risque de perte de données\n\nls -l /c &gt; b.txt\n\nExécute la commande ls -l /c qui liste tous les fichiers et dossiers du lecteur /c\nPuis le &gt; indique que l’on sauvegarde le résultat dans le fichier b.txt créé s’il n’existe pas\n\ncat b.txt\n\naffiche le fichier\nhead b.txt : affiche uniquement les 10 premières lignes\ntail b.txt : affiche uniquement les 10 dernières lignes\n\npwd &gt;&gt; b.txt\n\nS’il y avait un seul &gt; : le contenu du fichier b.txt serait écrasé\navec 2 &gt;&gt; : le résultat de la commande pwd est ajouté à la fin du fichier sans écraser ce qu’il y avait avant\ncat b.txt\n\non voit que le fichier b.txt contient :\n\nd’abord le résultat de la commande ls -l /c\npuis celui de la commande pwd\n\n\n\ncp b.txt b1.txt\n\nCrée une copie du fichier b.txt dans le fichier b1.txt\n\nmv b1.txt b2.txt\n\nmv = move pour renommer le fichier b1.txt en b2.txt\n\ngrep Program b.txt\n\ngrep = Global Regular Expression Print\nL’exemple ci-dessus recherche dans le fichier b.txt toutes les lignes contenant le mot Program et les affiche\nOu sinon comme le nom de la commande l’indique vous pouvez utiliser des expressions régulières si vous aimez ça\n\nls -l /c | grep Program\n\nle résultat est le même que la dernière commande\nle terminal exécute la première commande ls -l /c et stocke le résultat\nle pipe | signifie que ce résultat est transféré à la commande suivante pour application (il est possible d’en enchainer plusieurs)\nAinsi dans un second temps, le terminal exécute :\n\ngrep Program \"résultat première commande\"\n\nf(x) | g ➡️ traduit en langage matheux donne : g(f(x))"
  },
  {
    "objectID": "docs/outils/Bash.html#résumé",
    "href": "docs/outils/Bash.html#résumé",
    "title": "Le Bash",
    "section": "4 Résumé",
    "text": "4 Résumé\nles commandes qu’il faut retenir et savoir utiliser\n\n\n\npwd\nPour savoir où on est\n\n\nls\nPour lister ce qu’il y a\n\n\ncd “dossier”\nPour se déplacer vers un sous-dossier\n\n\ncd ..\nPour aller dans le dossier parent\n\n\ncat “fichier”\nPour voir le contenu d’un fichier"
  },
  {
    "objectID": "docs/outils/Bash.html#un-petit-exercice-dapplication",
    "href": "docs/outils/Bash.html#un-petit-exercice-dapplication",
    "title": "Le Bash",
    "section": "5 Un petit exercice d’application",
    "text": "5 Un petit exercice d’application\n\nAller dans le dossier /p/Cours/Informatique/bash-tp\nCréer un dossier exo1 et aller dans ce dossier (commandes : mkdir, cd)\nLister en lignes tous les fichiers et dossiers de /C/Program Files (ls -l)\nStocker le résultat de la commande précédente dans le dossier exo1, fichier liste_programmes.txt (utiliser &gt;)\nRenommer ce fichier en prog.txt (mv)\nAfficher le contenu de ce fichier (cat)\nCompléter la commande précédente pour avoir uniquement les lignes contenant la lettre m (| et grep)\nCompléter la commande précédente pour trier (commande sort)\nCompléter la commande précédente pour ne garder que les 3 premières lignes (head -3)\nCopier le fichier prog.txt dans /p/Cours/Informatique/bash-tp (commande cp et utiliser .. pour accéder au dossier parent)\n\n\n\n\n\n\n\nSolution\n\n\n\n\n\ncd Cours/Informatique/bash-tp\nmkdir exo1\nls -l \"/C/Program Files\"\nls -l \"/C/Program Files\" &gt; liste_programmes.txt\nmv liste_programmes.txt prog.txt\ncat prog.txt\ncat prog.txt | grep m\ncat prog.txt | grep m | sort\ncat prog.txt | grep m | sort | head -3\ncp prog.txt .."
  },
  {
    "objectID": "docs/UML/UML.html",
    "href": "docs/UML/UML.html",
    "title": "UML",
    "section": "",
    "text": "UML (Unified Modeling Language) est un langage de modélisation graphique largement utilisé dans le domaine de l’ingénierie logicielle. Il fournit un ensemble de notations et de diagrammes standardisés pour représenter visuellement différents aspects d’un système logiciel.\nL’objectif principal d’UML est de faciliter la communication, la compréhension et la documentation des systèmes logiciels complexes. Il permet aux concepteurs, développeurs et parties prenantes de collaborer efficacement en utilisant des diagrammes compréhensibles et normalisés.\nLes 3 principaux diagrammes :"
  },
  {
    "objectID": "docs/UML/UML.html#diagramme-de-cas-dutilisation",
    "href": "docs/UML/UML.html#diagramme-de-cas-dutilisation",
    "title": "UML",
    "section": "1 Diagramme de cas d’utilisation",
    "text": "1 Diagramme de cas d’utilisation\nUn diagramme de cas d’utilisation UML (Unified Modeling Language) est un type de diagramme utilisé pour représenter les interactions entre les acteurs (utilisateurs ou systèmes externes) et le système logiciel. Il met l’accent sur les fonctionnalités fournies par le système du point de vue des utilisateurs.\nUn diagramme de cas d’utilisation se compose de plusieurs éléments clés :\n\nActeur : Un acteur représente un rôle joué par un utilisateur ou un système externe qui interagit avec le système logiciel. Il peut s’agir d’une personne, d’un autre système, d’un périphérique matériel, etc. Les acteurs sont souvent représentés par des silhouettes.\nCas d'utilisation : Un cas d’utilisation représente une fonctionnalité ou une action que le système logiciel fournit à ses acteurs. Il décrit une interaction entre les acteurs et le système pour atteindre un objectif spécifique.\nRelation d'association : Les relations d’association connectent les acteurs aux cas d’utilisation pour montrer quel acteur utilise quel cas d’utilisation.\n\nLes diagrammes de cas d’utilisation UML sont utilisés pour :\n\ncapturer les exigences fonctionnelles du système\nidentifier les acteurs impliqués\ndécrire les interactions entre les acteurs et le système\ndéfinir les fonctionnalités attendues du système\n\nIls aident à communiquer efficacement les besoins des utilisateurs et à guider le processus de développement logiciel en se concentrant sur les objectifs de l’utilisateur final.\n\n1.1 Outils\n\nPlantUML\n\nexemple\n\n\n\n\n1.2 Exemple\n\n\n\n\n\ngraph LR\n\n  player[\",-. \\n`-' \\n/|\\ \\n |\\n/ \\ \\n Player\"]\n  organizer[\",-. \\n`-' \\n/|\\ \\n |\\n/ \\ \\n Organizer\"]\n\n  player --&gt; modifyProfile([Modify Profile])\n  player --&gt; register([Register Tournament])\n  player --&gt; becomeArbiter([Become Arbiter])\n  \n  organizer --&gt; createTournament([Create   Tournament])\n  organizer --&gt; modifyTournament([Modify Tournament])"
  },
  {
    "objectID": "docs/UML/UML.html#diagramme-de-classe",
    "href": "docs/UML/UML.html#diagramme-de-classe",
    "title": "UML",
    "section": "2 Diagramme de classe",
    "text": "2 Diagramme de classe\nUn diagramme de classes UML (Unified Modeling Language) est un type de diagramme utilisé pour représenter la structure statique d’un système logiciel. Il montre les classes du système, leurs attributs, leurs méthodes et les relations entre les classes.\nUn diagramme de classes UML se compose de différentes boîtes représentant les classes, avec des lignes qui connectent ces boîtes pour montrer les relations entre les classes. Voici quelques éléments clés que l’on retrouve généralement dans un diagramme de classes :\n\nClasse : Elle est représentée par une boîte avec trois sections :\n\nle nom de la classe\nles attributs\nles méthodes\n\nRelation d'association : Une relation d’association représente une connexion entre 2 classes. Elle montre que les objets d’une classe sont associés aux objets d’une autre classe. Par exemple, une classe Étudiant peut être associée à une classe Cours via une relation d’association pour indiquer que les étudiants suivent des cours.\nHéritage : Cela permet de modéliser les concepts de généralisation et de spécialisation.\nAgrégation et Composition : Ces relations décrivent la structure des classes et leur association avec d’autres classes.\n\nL’agrégation est une relation où une classe peut être composée d’autres classes, mais ces classes peuvent exister indépendamment\nLa composition est une relation plus forte où une classe est composée d’autres classes, et ces classes n’existent pas sans la classe parente.\n\nMultiplicité : La multiplicité spécifie le nombre d’objets d’une classe associés à un ou plusieurs objets d’une autre classe dans une relation d’association. Elle est représentée par des nombres ou des symboles tels que “0..1”, “1”, “*“, etc.\n\nLes diagrammes de classes UML sont utilisés pour modéliser la structure conceptuelle d’un système logiciel, identifier les classes et leurs relations. Ils fournissent une représentation visuelle et standardisée pour analyser, concevoir et documenter les systèmes orientés objet.\n\n2.1 Outils\n\nPlantUML\n\nexemples\n\nmermaid\n\n\n\n2.2 Exemple\n\n\n\n\n\nclassDiagram\n    class Adresse {\n        +numero: string\n        +rue: string\n        +ville: string\n    }\n\n    class Personne {\n        +nom: string\n        +prenom: string\n        +age: int\n        +demenager()\n    }\n\n    class Conducteur {\n        +no_permis: string\n    }\n\n    class Voiture {\n        +immat : string\n        +vitesse: float\n    }\n\n    class Roue {\n        +taille: string\n    }\n\n    class Carrosserie {\n        +couleur: string\n    }\n\n    Personne \"*\" -- \"1\" Adresse\n    Personne &lt;|-- Conducteur\n    Conducteur \"*\" -- \"*\" Voiture : conduit\n    Voiture o-- Roue\n    Voiture *-- Carrosserie"
  },
  {
    "objectID": "docs/UML/UML.html#exercice",
    "href": "docs/UML/UML.html#exercice",
    "title": "UML",
    "section": "3 Exercice",
    "text": "3 Exercice\nUn Courrier peut être de 2 types : Lettre ou Colis.\nUne Lettre est caractérisée par :\n\npoids (en grammes)\nmode d’expédition (Rapide ou Normal)\nadresse de destination\nformat (A3 ou A4)\n\nUn Colis est caractérisé par :\n\npoids (en grammes)\nmode d’expédition (Rapide ou Normal)\nadresse de destination\nvolume (en litres)\n\nChaque Courrier dispose des méthodes suivantes :\n\n__init__() : un constructeur\n__str__() : une méthode qui retourne une chaine décrivant le Courrier\ncalcul_affranchissement()\n\npour une Lettre : tarif_base + poids * 0.001\n\navec tarif_base = 2€50 pour le format A4 et 3€50 pour le A3\n\npour un colis : volume / 4 + poids * 0.001\nen mode d’expédition rapide, les montants ci-dessus sont doublés\n\n\n\nQuestions\n\nDéfinir le diagramme de classe\nCoder ces classes en Python\n\nExemple de résultat attendu\n&gt;&gt;&gt; l1 = Lettre(\"Bordeaux\", 80, \"normal\", \"A4\")\n&gt;&gt;&gt; print(l1)\nLettre : \n    Adresse destination : Bordeaux\n    Poids : 80 grammes\n    Mode : normal\n    Format : A4\n    Prix du timbre : 2.58 €\n&gt;&gt;&gt; c1 = Colis(\"Rennes\", 3500, \"rapide\", 2.25)\n&gt;&gt;&gt; print(c1)\nColis : \n    Adresse destination : Rennes \n    Poids : 3500 grammes \n    Mode : rapide \n    Volume : 2.25 litres \n    Prix du timbre : 8.12 €\nLa correction est disponible ici"
  },
  {
    "objectID": "docs/POO/poo-cours.html",
    "href": "docs/POO/poo-cours.html",
    "title": "Programmation Orientée Objet",
    "section": "",
    "text": "La POO est un paradigme de programmation qui organise le code autour d’objets plutôt que de fonctions et de procédures.\nCes objets représentent des entités du monde réel, ils ont :\n\ndes attributs : ce qu’ils sont\ndes méthodes : ce qu’ils peuvent faire\n\n\n\nLa POO permet :\n\nd’organiser le code de manière plus structurée\nde favoriser la réutilisation et la maintenance du code\nde modéliser les concepts du domaine d’application de manière naturelle\n\nElle est largement utilisée dans de nombreux langages de programmation, dont Python, pour développer des applications complexes et évolutives.\n\n\n\nModélisons par exemple une personne :\n\nAttributs : nom, prenom, age, compétences\nMéthodes : apprendre(), vieillir()\n\n\n\n\n\n\n\nLes méthodes peuvent agir sur les attributs\n\n\n\nLa méthode vieillir() va augmenter l’age de la personne de 1.\nLa méthode apprendre(“Python”), va ajouter “Python” à la liste des compétences."
  },
  {
    "objectID": "docs/POO/poo-cours.html#introduction",
    "href": "docs/POO/poo-cours.html#introduction",
    "title": "Programmation Orientée Objet",
    "section": "",
    "text": "La POO est un paradigme de programmation qui organise le code autour d’objets plutôt que de fonctions et de procédures.\nCes objets représentent des entités du monde réel, ils ont :\n\ndes attributs : ce qu’ils sont\ndes méthodes : ce qu’ils peuvent faire\n\n\n\nLa POO permet :\n\nd’organiser le code de manière plus structurée\nde favoriser la réutilisation et la maintenance du code\nde modéliser les concepts du domaine d’application de manière naturelle\n\nElle est largement utilisée dans de nombreux langages de programmation, dont Python, pour développer des applications complexes et évolutives.\n\n\n\nModélisons par exemple une personne :\n\nAttributs : nom, prenom, age, compétences\nMéthodes : apprendre(), vieillir()\n\n\n\n\n\n\n\nLes méthodes peuvent agir sur les attributs\n\n\n\nLa méthode vieillir() va augmenter l’age de la personne de 1.\nLa méthode apprendre(“Python”), va ajouter “Python” à la liste des compétences."
  },
  {
    "objectID": "docs/POO/poo-cours.html#principes-fondamentaux",
    "href": "docs/POO/poo-cours.html#principes-fondamentaux",
    "title": "Programmation Orientée Objet",
    "section": "Principes fondamentaux",
    "text": "Principes fondamentaux\n\nEncapsulation\nL’encapsulation consiste à regrouper les données et les méthodes qui les manipulent au sein d’un même objet.\nCela permet de :\n\ncacher les détails d’implémentation\nde fournir une interface cohérente pour interagir avec l’objet\n\n\n\nHéritage\nL’héritage permet de créer de nouvelles classes à partir de classes existantes, en héritant de leurs attributs et méthodes. Cela favorise :\n\nla réutilisation du code\nla création d’une hiérarchie de classes\n\n\nExemple : Carré hérite de Rectangle. Un carré est un rectangle avec des propriétés supplémentaires.\n\n\n\nPolymorphisme\nLe polymorphisme permet à des objets de classes différentes de répondre de manière différente à une même action.\nCela permet de manipuler des objets de différentes classes de manière uniforme, en utilisant des interfaces communes."
  },
  {
    "objectID": "docs/POO/poo-cours.html#classe-et-objet",
    "href": "docs/POO/poo-cours.html#classe-et-objet",
    "title": "Programmation Orientée Objet",
    "section": "Classe et Objet",
    "text": "Classe et Objet\n\nUne classe est un modèle pour créer des objets\n\nElle définit les attributs et les méthodes qui seront présents dans chaque objet de cette classe\n\nLes objets sont des instances de classes\n\nIls possèdent des attributs et des méthodes qui définissent leur état et leur comportement\n\n\n\nExemple\n\nCréation de la classe Personne qui représente une personne\n\navec ses attributs et ses méthodes\n\nCréation de l’objet personne1 à partir de cette classe\n\nprénom = Sacha\nnom = Touille\nage = 20\ncompétences = []\n\n\n\n\nClasse Python\n\n\npersonne.py\n\nclass Personne:\n    def __init__(self, nom, prenom, age):\n        self.nom = nom\n        self.prenom = prenom\n        self.age = age\n        self.competences = []\n\n    def apprendre(self, nouvelle_competence):\n        \"\"\"Ajoute une nouvelle compétence à la liste des compétences.\"\"\"\n        self.competences.append(nouvelle_competence)\n\n    def vieillir(self):\n        \"\"\"Incrémente l'âge de la personne d'un an.\"\"\"\n        self.age += 1\n\n\n\nObjets Python\nÀ partir de la classe Personne, nous pouvons créer des objets.\n\n\nmain.py\n\nfrom personne import Personne\n\npersonne1 = Personne(\"Touille\", \"Sacha\", 20)\npersonne2 = Personne(\"Ginal\", \"Laury\", 30)\npersonne2.vieillir()\npersonne2.apprendre(\"SQL\")\n\n\n\nConstructeur\nLe code Personne(\"Touille\", \"Sacha\", 20) appelle la méthode __init__() de la classe Personne.\nCette méthode est appelée le constructeur.\nComme son nom l’indique, elle permet de « construire » des objets à partir de la classe.\n\n\nConventions Python\n\nUn nom de classe s’écrit en CamelCase (majuscule à chaque mot)\nUn fichier python (ou module) ne contient qu’une seule classe\nUn nom de module s’écrit en snake_case (mots en minuscules séparés par des _)\n\n\n\nvelo_electrique.py\n\nclass VeloElectrique:\n    ..."
  },
  {
    "objectID": "docs/POO/poo-cours.html#héritage-1",
    "href": "docs/POO/poo-cours.html#héritage-1",
    "title": "Programmation Orientée Objet",
    "section": "Héritage",
    "text": "Héritage\nUn des trois piliers de la POO est l’héritage.\nUne classe enfant peut utiliser tous les attributs et méthodes de sa classe mère.\nCe principe d’héritage permet également de mettre en commun des attributs et méthodes pour éviter des duplications de code.\n\nExemple d’Héritage\nSupposons que dans notre code, nous voulons gérer des vélos et de trottinettes.\nL’idée naïve est de créer une classe pour chacun.\n\n\nExemple d’Héritage\n\nVeloTrottinette\n\n\n\n\nvelo.py\n\nclass Velo:\n    def __init__(self, couleur, nb_pignons):\n        self.couleur = couleur\n        self.nb_pignons = nb_pignons\n        self.vitesse = 0  # La vitesse initiale est 0\n\n    def accelerer(self, increment):\n        \"\"\"Augmente la vitesse du vélo.\"\"\"\n        self.vitesse += increment\n\n    def ralentir(self, decrement):\n        \"\"\"Diminue la vitesse du vélo.\"\"\"\n        self.vitesse -= decrement\n        if self.vitesse &lt; 0:\n            self.vitesse = 0  # La vitesse ne peut pas être négative\n\n\n\n\n\ntrottinette.py\n\nclass Trottinette:\n    def __init__(self, couleur, nb_pignons):\n        self.couleur = couleur\n        self.vitesse = 0  # La vitesse initiale est 0\n\n    def accelerer(self, increment):\n        \"\"\"Augmente la vitesse.\"\"\"\n        self.vitesse += increment\n\n    def ralentir(self, decrement):\n        \"\"\"Diminue la vitesse.\"\"\"\n        self.vitesse -= decrement\n        if self.vitesse &lt; 0:\n            self.vitesse = 0  # La vitesse ne peut pas être négative\n\n\n\n\n\n\nExemple d’Héritage\nEn réfléchissant un peu, nous nous disons que ces 2 classes ont des attributs et méthodes en commun :\n\ncouleur\nvitesse\naccelerer()\nralentir()\n\nUne idée est de regrouper ces caractéristiques communes dans une classe DeuxRoues. Puis de faire hériter Vélo et Trottinette de DeuxRoues\n\n\nExemple d’Héritage\n\nDeux RouesVeloTrottinette\n\n\n\n\ndeux_roues.py\n\nclass DeuxRoues:\n    def __init__(self, couleur):\n        self.couleur = couleur\n        self.vitesse = 0  # La vitesse initiale est 0\n\n    def accelerer(self, increment):\n        \"\"\"Augmente la vitesse.\"\"\"\n        self.vitesse += increment\n\n    def ralentir(self, decrement):\n        \"\"\"Diminue la vitesse.\"\"\"\n        self.vitesse -= decrement\n        if self.vitesse &lt; 0:\n            self.vitesse = 0  # La vitesse ne peut pas être négative\n\n\n\n\n\nvelo.py\n\nfrom deux_roues import DeuxRoues\n\nclass Velo(DeuxRoues):\n    def __init__(self, couleur, nb_pignons):\n        super().__init__(couleur)  # Appel du constructeur de la classe mère\n        self.nb_pignons = nb_pignons\n\n\n\n\n\ntrottinette.py\n\nfrom deux_roues import DeuxRoues\n\nclass Trottinette(DeuxRoues):\n    def __init__(self, couleur, nb_pignons):\n        super().__init__(couleur)   # Appel du constructeur de la classe mère\n\n\n\n\n\n\nSelf et Super\n\nself est une référence à l’instance actuelle de la classe\n\nIl est utilisé pour accéder aux attributs et aux méthodes d’une instance spécifique de la classe\n\nsuper() est une fonction intégrée qui référence la classe mère\n\nIl est utilisé pour appeler des méthodes de la classe parent dans une classe enfant"
  },
  {
    "objectID": "docs/POO/poo-cours.html#classe-abstraite",
    "href": "docs/POO/poo-cours.html#classe-abstraite",
    "title": "Programmation Orientée Objet",
    "section": "Classe Abstraite",
    "text": "Classe Abstraite\n\n\n\n\n\n\nDessine-moi un deux roues\n\n\n\n\nEst-ce que cela a du sens de créer un objet à partir de la classe DeuxRoues ?\n\nSi l’on vous demande de dessiner un deux-roues, vous ne savez pas vraiment comment faire, vous manquez d’informations.\nAlors que dessiner un vélo ou une trottinette, c’est déjà plus concret.\n\n\n\nClasse Abstraite - DeuxRoues\nCertaines classes n’ont pas vocation à être instanciées. Par exemple, nous n’allons pas créer d’objets de la classe DeuxRoues.\nNous allons directement créer des Velo et des Trottinettes.\nNous pouvons donc définir la classe DeuxRoues comme abstraite.\n\non ne peut pas créer d’objets à partir de cette classe\n\n\n\nClasse Abstraite - DeuxRoues\nLa principale utilité des classes abstraites est de définir un contrat pour les classes filles.\nElles fournissent une structure et une organisation cohérentes pour les classes qui partagent des caractéristiques communes, tout en permettant une flexibilité pour les implémentations spécifiques à chaque classe fille.\n\n\nClasse Abstraite - Python\n\n\n\n\n\n\nTip\n\n\n\nEn Python, la notion de classe abstraite est implémentée grâce au module abc (Abstract Base Classes).\nCe module fournit le décorateur @abstractmethod qui permet de déclarer une méthode comme abstraite dans une classe abstraite.\nUne classe abstraite est définie en héritant de la classe ABC du module abc.\n\n\n\n\nClasse Abstraite - Remarque\n\n\n\n\n\n\nWarning\n\n\n\nClasse mère ne veut pas dire forcément classe abstraite.\nPar exemple :\n\nConsidérons par exemple une classe VeloElectrique qui hérite de la classe Velo\nCela parait cohérent car un vélo électrique est un vélo\n\ndonc il hérite de tous ses attributs et méthodes\net il a des caractéristiques supplémentaires (batterie, autonomie, puissance…)\n\nOr ici la classe Velo n’a pas vocation à être abstraite car il n’est pas absurde de créer un objet vélo"
  },
  {
    "objectID": "docs/POO/poo-cours.html#exercices",
    "href": "docs/POO/poo-cours.html#exercices",
    "title": "Programmation Orientée Objet",
    "section": "Exercices",
    "text": "Exercices\nexercices"
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#introduction",
    "href": "docs/POO/poo-cours-slides.html#introduction",
    "title": "Programmation Orientée Objet",
    "section": "Introduction",
    "text": "Introduction\nLa POO est un paradigme de programmation qui organise le code autour d’objets plutôt que de fonctions et de procédures.\nCes objets représentent des entités du monde réel, ils ont :\n\ndes attributs : ce qu’ils sont\ndes méthodes : ce qu’ils peuvent faire"
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#principes-fondamentaux",
    "href": "docs/POO/poo-cours-slides.html#principes-fondamentaux",
    "title": "Programmation Orientée Objet",
    "section": "Principes fondamentaux",
    "text": "Principes fondamentaux"
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#classe-et-objet",
    "href": "docs/POO/poo-cours-slides.html#classe-et-objet",
    "title": "Programmation Orientée Objet",
    "section": "Classe et Objet",
    "text": "Classe et Objet\n\nUne classe est un modèle pour créer des objets\n\nElle définit les attributs et les méthodes qui seront présents dans chaque objet de cette classe\n\nLes objets sont des instances de classes\n\nIls possèdent des attributs et des méthodes qui définissent leur état et leur comportement"
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#héritage-1",
    "href": "docs/POO/poo-cours-slides.html#héritage-1",
    "title": "Programmation Orientée Objet",
    "section": "Héritage",
    "text": "Héritage\nUn des trois piliers de la POO est l’héritage.\nUne classe enfant peut utiliser tous les attributs et méthodes de sa classe mère.\nCe principe d’héritage permet également de mettre en commun des attributs et méthodes pour éviter des duplications de code."
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#classe-abstraite",
    "href": "docs/POO/poo-cours-slides.html#classe-abstraite",
    "title": "Programmation Orientée Objet",
    "section": "Classe Abstraite",
    "text": "Classe Abstraite\n\n\n\n\n\n\n\nDessine-moi un deux roues\n\n\n\nEst-ce que cela a du sens de créer un objet à partir de la classe DeuxRoues ?\n\nSi l’on vous demande de dessiner un deux-roues, vous ne savez pas vraiment comment faire, vous manquez d’informations.\nAlors que dessiner un vélo ou une trottinette, c’est déjà plus concret."
  },
  {
    "objectID": "docs/POO/poo-cours-slides.html#exercices",
    "href": "docs/POO/poo-cours-slides.html#exercices",
    "title": "Programmation Orientée Objet",
    "section": "Exercices",
    "text": "Exercices\nexercices"
  },
  {
    "objectID": "docs/POO/poo-exercice.html",
    "href": "docs/POO/poo-exercice.html",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "",
    "text": "À partir de maintenant, nous n’allons plus coder dans des Notebooks mais dans l’IDE VSCode.\n\nOuvrez Visual Studio Code\nParamétrez VSCode\nDans la fiche VSCode, suivez les consignes de la section Première utilisation\n\ncela vous permettra de créer un clone du code\n\nDans le dossier src/Python-POO/exercices, créez les 2 dossiers suivants :\n\ngeometrie pour stocker vos classes des exercices 1 et 2\ndomino pour l’exercice 3\n\n\n\n\nSi vous n’avez pas accès au réseau ENSAI, vous pouvez soit :\n\ncontinuer à coder dans les notebooks\ninstaller les outils pour développer en python\n\n\n\n\n\n\n\nInstallation outils Python\n\n\n\n\nTéléchargez et installez Python version ≥ 3.10\nTéléchargez et installez Visual Studio Code\nTéléchargez et installez Git\nOuvrez VS Code et installez l’extension Python (View &gt; Extension)\n\nPlus de détails"
  },
  {
    "objectID": "docs/POO/poo-exercice.html#avant-de-commencer",
    "href": "docs/POO/poo-exercice.html#avant-de-commencer",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "",
    "text": "À partir de maintenant, nous n’allons plus coder dans des Notebooks mais dans l’IDE VSCode.\n\nOuvrez Visual Studio Code\nParamétrez VSCode\nDans la fiche VSCode, suivez les consignes de la section Première utilisation\n\ncela vous permettra de créer un clone du code\n\nDans le dossier src/Python-POO/exercices, créez les 2 dossiers suivants :\n\ngeometrie pour stocker vos classes des exercices 1 et 2\ndomino pour l’exercice 3\n\n\n\n\nSi vous n’avez pas accès au réseau ENSAI, vous pouvez soit :\n\ncontinuer à coder dans les notebooks\ninstaller les outils pour développer en python\n\n\n\n\n\n\n\nInstallation outils Python\n\n\n\n\nTéléchargez et installez Python version ≥ 3.10\nTéléchargez et installez Visual Studio Code\nTéléchargez et installez Git\nOuvrez VS Code et installez l’extension Python (View &gt; Extension)\n\nPlus de détails"
  },
  {
    "objectID": "docs/POO/poo-exercice.html#exercice-1---points",
    "href": "docs/POO/poo-exercice.html#exercice-1---points",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "1 Exercice 1 - Points",
    "text": "1 Exercice 1 - Points\nDéfinissez une classe Point pour représenter un point du plan de coordonnées x et y.\nCodez les méthodes suivantes :\n\n__init__(self, x, y) : constructeur du point avec des coordonnées cartésiennes\nr(self) et t(self) : renvoyant les coordonnées polaires du point\n__str__(self) : pour afficher le Point sous forme de texte, ex : (1.0, 2.4)\ndistance(self, autre_point) : distance avec un autre point\n__eq__(self, autre_point) -&gt; bool : dit si les 2 points sont identiques\nhomothetie(self, k) : appliquant au point une homothétie de centre (0, 0) et de rapport k\ntranslation(self, dx, dy) : appliquant au point une translation de vecteur (dx, dy)\nrotation(self, a) (bonus) : appliquant au point une rotation de centre (0, 0) et d’angle a\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nPour vérifier que vos méthodes sont correctes, vous pouvez ajouter à la fin de votre classe un bloc main. Lorsque vous exécuterez ce fichier, c’est ce code qui sera lancé.\n\n\npoint.py\n\nclass Point:\n\n    # ...\n\nif __name__ == \"__main__\":\n    p1 = Point(1, 2)\n    p2 = Point(1, 2)\n    print(f\"p1 : {p1}\")\n    print(f\"Distance entre p1 et p2 : {p1.distance(p2)}\")\n    print(f\"p1 est égal à p2 : {p1 == p2}\")"
  },
  {
    "objectID": "docs/POO/poo-exercice.html#exercice-2---polygones",
    "href": "docs/POO/poo-exercice.html#exercice-2---polygones",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "2 Exercice 2 - Polygones",
    "text": "2 Exercice 2 - Polygones\n\nCréez une classe Polygone composées d’objets de la classe Point\n\nNous supposerons par la suite que les segments ne se croisent pas\n\nAjoutez à cette classe 2 méthodes abstraites aire() et périmètre()\n\nces méthodes seront définies dans les classes filles\n\nCréez les classes Segment, Triangle et Quadrilatere qui héritent de la classe Polygone\n\nvérifiez à chaque fois le nombre de points\n\nDéfinissez les méthodes aire() et périmètre() dans ces 3 classes\nCréez la classe Rectangle qui hérite de Quadrilatere\nVérifier pour Rectangle, que les 2 cotés opposés sont de même longeur et qu’il y a un angle droit\n\nVoici le diagramme de classes généré avec Mermaid\n\n\n\n\n\nclassDiagram\n    Point --o Polygone\n    Polygone &lt;|-- Segment : 2\n    Polygone &lt;|-- Triangle : 3\n    Polygone &lt;|-- Quadrilatere : 4\n    Quadrilatere &lt;|-- Rectangle\n    class Point{\n        +float x\n        +float y\n        +distance(autre_point)\n    }\n    class Polygone{\n        +liste[Point] liste_points\n        +aire()\n        +perimetre()\n    }\n    class Quadrilatere{\n        +aire()\n        +perimetre()\n    }\n    class Segment{\n        +aire()\n        +perimetre()\n    }\n    class Triangle{\n        +aire()\n        +perimetre()\n    }"
  },
  {
    "objectID": "docs/POO/poo-exercice.html#exercice-3---domino",
    "href": "docs/POO/poo-exercice.html#exercice-3---domino",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "3 Exercice 3 - Domino",
    "text": "3 Exercice 3 - Domino\n\n3.1 Un Domino\nÉcrire une classe Domino avec :\n\n2 attributs entiers entre 1 et 6 : extr_A et extr_B\n__str__() : qui affiche les points présents sur les deux extrémités\nretourne() qui retourne le domino (son extrémité A devient son extrémité B et vice-versa).\naccepte_apres(autre_domino) : vérifie si l’extrémité B du domino courant a la même valeur que l’extrémité A de l’autre domino\n\n\n\n3.2 Jeu\nMaintenant nous allons essayer de coder un jeu de dominos (pour plus de facilité, il n’y aura qu’un seul joueur et il n’est possible de poser que d’un seul côté, à la fin de la rangée de domino):\n\nÉcrivez une fonction qui génère tous les dominos et renvoie la liste\nÉcrivez une fonction pioche() qui pioche au hasard un domino dans une liste et le retire de cette liste\nÉcrivez une fonction affiche_dominos() qui affiche une liste de dominos\nÉcrivez une fonction domino_posables(dominos_en_main, dominos_poses) qui prend deux listes de dominos en arguments. La fonction retourne la liste des dominos en main qui pourraient être posés après le dernier domino de la liste dominos_poses.\n\nÉcrivez une fonction jouer() qui :\n\ngénére la liste de tous les dominos\ntire un 1er domino au hasard et le place dans la liste dominos_poses\ndistribue aléatoirement 6 dominos au joueur\naffiche les dominos qu’il peut jouer\nsi aucun domino n’est jouable, lui proposer de piocher\nlui demande lequel il veut jouer (par exemple en lui demandant de saisir le numéro dans la liste de dominos, et quit pour arrêter de jouer)\najoute le domino joué à la liste dominos_poses et le retire de dominos_en_main\n\n\n\n\n\n\nclassDiagram\n    class Domino{\n        +int extr_A\n        +int extr_B\n        +retourne()\n        +accepte_apres(autre_domino)\n    }"
  },
  {
    "objectID": "docs/POO/poo-exercice.html#correction",
    "href": "docs/POO/poo-exercice.html#correction",
    "title": "Programmation Orientée Objet - Exercices",
    "section": "Correction",
    "text": "Correction\n\n\n\n\n\n\nProposition de correction\n\n\n\n\n\n\nExercices 1 et 2\n\npoint.py\npolygone.py\nsegment.py\ntriangle.py\nquadrilatere.py\nrectangle.py\n\nUn exemple de tests unitaires sur la classe Point :\n\ntest_point.py\n\n\n\nExercice 3\n\ndomino.py\njeu.py"
  },
  {
    "objectID": "docs/annales/examen-2024.html",
    "href": "docs/annales/examen-2024.html",
    "title": "Examen 2024 - correction",
    "section": "",
    "text": "Créez une collection adaptée qui permet de stocker les clés et valeurs suivantes :\n\nnumero : 23\nvoie : “Boulevard Gambetta”\ncode_postal : “02300”\nville : “Chauny”\nzone_inondable : False\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nPour stocker ces informations en Python, la structure de données la plus adaptée est un dictionnaire :\nadresse = {\n    \"numero\": 23,\n    \"voie\": \"Boulevard Gambetta\",\n    \"code_postal\": \"02300\",\n    \"ville\": \"Chauny\",\n    \"zone_inondable\": False\n}\n\n\n\n\n\n\nQue va afficher le code ci-dessous ?\nliste = [0, 1, 2, 3, 4, 5]\nliste.append(12)\nprint(liste[-1])\nliste2 = liste\nliste2.pop()\nprint(len(liste))\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n12  # cette instruction affiche le dernier élément de la liste\n6   # `liste2` et `liste` pointent vers le même objet\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée une chaîne de caractères et retourne le nombre de voyelles contenues dans cette chaîne de caractères.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\ndef compter_voyelles(chaine) -&gt; int:\n    voyelles = \"aeiouyAEIOUY\"\n    compteur = 0\n    for caractere in chaine:\n        if caractere in voyelles:\n            compteur += 1\n    return compteur\n\n# Exemple d'utilisation\nres = compter_voyelles(\"Bonjour tout le monde\")\nprint(res)\n\n\n\n\n\n\nRecopiez et complétez ce code pour n’afficher que les valeurs de i paires et sortir de la boucle quand i est égal à 0. Que va afficher votre code ?\ni = 10\nwhile True:\n    i = i - 1\n    # Compléter ici    \n    print(i, end=\" \")    \n    # Compléter ici    \nprint(\"\\nboom\")\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n⚠️ Il n’était pas autorisé de décaler vers la droite le print(i, end=\" \").\ni = 10\nwhile True:\n    i = i - 1\n    if i % 2 != 0:  # Si i n'est pas pair, passer à l'itération suivante\n        continue\n    print(i, end=\" \")\n    if i == 0:      # Si i est égal à 0, sortir de la boucle\n        break\nprint(\"\\nboom\")\nCe code va afficher :\n8 6 4 2 0 \nboom\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée un entier n et affiche les n premières valeurs de la suite de Fibonacci.\nRappel :\n\n\\(F_0 = 0\\)\n\\(F_1 = 1\\)\n\\(\\forall n \\geq 2 \\, F_n = F_{n-1} + F_{n-2}\\)\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n⚠️ Il était demandé d’afficher les valeurs et non pas de les retourner !\ndef fibonacci(n) -&gt; None:\n    if n &lt;= 0 or not isinstance(n, int):\n        raise ValueError(\"Veuillez entrer un entier strictement positif.\")\n\n    Fn_2, Fn_1 = 0, 1\n    \n    # Affiche le 1er terme\n    print(Fn_2, end=\" \")\n\n    # Si n vaut au moins 2, affiche le 2e terme\n    if n &gt;= 2:\n        print(Fn_1, end=\" \")\n\n    # Calcule et affiche les termes suivants\n    for _ in range(2, n):\n        Fn = Fn_2 + Fn_1\n        print(Fn, end=\" \")\n        Fn_2, Fn_1 = Fn_1, Fn\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée une température en Celsius et retourne celle-ci convertie en Fahrenheit (\\(F = \\frac{9}{5} \\times C + 32\\)).\n\n\n\n\n\n\nRéponse\n\n\n\n\n\ndef celsius_vers_fahrenheit(celsius) -&gt; float:\n    if not isinstance(celsius, (int, float)):\n        raise TypeError(\"L'argument doit être de type int ou float\")\n    \n    fahrenheit = (9 / 5) * celsius + 32\n    return fahrenheit"
  },
  {
    "objectID": "docs/annales/examen-2024.html#python",
    "href": "docs/annales/examen-2024.html#python",
    "title": "Examen 2024 - correction",
    "section": "",
    "text": "Créez une collection adaptée qui permet de stocker les clés et valeurs suivantes :\n\nnumero : 23\nvoie : “Boulevard Gambetta”\ncode_postal : “02300”\nville : “Chauny”\nzone_inondable : False\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nPour stocker ces informations en Python, la structure de données la plus adaptée est un dictionnaire :\nadresse = {\n    \"numero\": 23,\n    \"voie\": \"Boulevard Gambetta\",\n    \"code_postal\": \"02300\",\n    \"ville\": \"Chauny\",\n    \"zone_inondable\": False\n}\n\n\n\n\n\n\nQue va afficher le code ci-dessous ?\nliste = [0, 1, 2, 3, 4, 5]\nliste.append(12)\nprint(liste[-1])\nliste2 = liste\nliste2.pop()\nprint(len(liste))\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n12  # cette instruction affiche le dernier élément de la liste\n6   # `liste2` et `liste` pointent vers le même objet\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée une chaîne de caractères et retourne le nombre de voyelles contenues dans cette chaîne de caractères.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\ndef compter_voyelles(chaine) -&gt; int:\n    voyelles = \"aeiouyAEIOUY\"\n    compteur = 0\n    for caractere in chaine:\n        if caractere in voyelles:\n            compteur += 1\n    return compteur\n\n# Exemple d'utilisation\nres = compter_voyelles(\"Bonjour tout le monde\")\nprint(res)\n\n\n\n\n\n\nRecopiez et complétez ce code pour n’afficher que les valeurs de i paires et sortir de la boucle quand i est égal à 0. Que va afficher votre code ?\ni = 10\nwhile True:\n    i = i - 1\n    # Compléter ici    \n    print(i, end=\" \")    \n    # Compléter ici    \nprint(\"\\nboom\")\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n⚠️ Il n’était pas autorisé de décaler vers la droite le print(i, end=\" \").\ni = 10\nwhile True:\n    i = i - 1\n    if i % 2 != 0:  # Si i n'est pas pair, passer à l'itération suivante\n        continue\n    print(i, end=\" \")\n    if i == 0:      # Si i est égal à 0, sortir de la boucle\n        break\nprint(\"\\nboom\")\nCe code va afficher :\n8 6 4 2 0 \nboom\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée un entier n et affiche les n premières valeurs de la suite de Fibonacci.\nRappel :\n\n\\(F_0 = 0\\)\n\\(F_1 = 1\\)\n\\(\\forall n \\geq 2 \\, F_n = F_{n-1} + F_{n-2}\\)\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\n⚠️ Il était demandé d’afficher les valeurs et non pas de les retourner !\ndef fibonacci(n) -&gt; None:\n    if n &lt;= 0 or not isinstance(n, int):\n        raise ValueError(\"Veuillez entrer un entier strictement positif.\")\n\n    Fn_2, Fn_1 = 0, 1\n    \n    # Affiche le 1er terme\n    print(Fn_2, end=\" \")\n\n    # Si n vaut au moins 2, affiche le 2e terme\n    if n &gt;= 2:\n        print(Fn_1, end=\" \")\n\n    # Calcule et affiche les termes suivants\n    for _ in range(2, n):\n        Fn = Fn_2 + Fn_1\n        print(Fn, end=\" \")\n        Fn_2, Fn_1 = Fn_1, Fn\n\n\n\n\n\n\nÉcrivez le code d’une fonction qui prend en entrée une température en Celsius et retourne celle-ci convertie en Fahrenheit (\\(F = \\frac{9}{5} \\times C + 32\\)).\n\n\n\n\n\n\nRéponse\n\n\n\n\n\ndef celsius_vers_fahrenheit(celsius) -&gt; float:\n    if not isinstance(celsius, (int, float)):\n        raise TypeError(\"L'argument doit être de type int ou float\")\n    \n    fahrenheit = (9 / 5) * celsius + 32\n    return fahrenheit"
  },
  {
    "objectID": "docs/annales/examen-2024.html#sql",
    "href": "docs/annales/examen-2024.html#sql",
    "title": "Examen 2024 - correction",
    "section": "SQL",
    "text": "SQL\n\nUn adhérent peut emprunter plusieurs dvd.\nUn emprunt est caractérisé par un numéro d’emprunt, la date de début, la date de fin, le numéro d’adhérent et le numéro du dvd emprunté.\nUn dvd contient un seul et unique film. Un film peut-être disponible sur plusieurs dvd différents.\nÉcrivez la requête SQL qui répond à chaque question ci-dessous.\n\n1\nListez tous les films du genre « science-fiction » en les classant en premier ceux qui sont sortis le plus récemment.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT *\n  FROM film\n WHERE genre = 'science-fiction'\n ORDER BY date_sortie DESC;\n\n\n\n\n\n2\nListez tous les films qui contiennent dans leur titre le mot « batman ».\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT *\n  FROM film\n WHERE LOWER(titre) LIKE '%batman%';\n\n\n\n\n\n3\nDonnez le prix d’achat moyen des DVD du film « Alibi ».\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT AVG(d.prix_achat)\n  FROM dvd d\n  JOIN film f USING(id_film)\n WHERE f.titre = 'Alibi';\n\n\n\n\n\n4\nDonnez les noms et prénoms des adhérents ayant déjà emprunté le film « Matrix ».\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT a.nom, \n       a.prenom\n  FROM adherent a\n  JOIN emprunte e USING (id_adherent)\n  JOIN dvd d USING (id_dvd)\n  JOIN film f USING (id_film)\n WHERE f.titre = 'Matrix';\n\n\n\n\n\n5\nListez les identifiants des DVD qui n’ont jamais été empruntés.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT d.id_dvd\n  FROM dvd d\nWHERE d.id_dvd NOT IN (SELECT e.id_dvd \n                         FROM emprunte e);\n\n-- ou\n\nSELECT d.id_dvd \n  FROM dvd d\n WHERE NOT EXISTS (SELECT 1\n                     FROM emprunte e\n                    WHERE e.id_dvd = d.id_dvd);\n\n-- ou encore\n\nSELECT d.id_dvd\n  FROM dvd d\n  LEFT JOIN emprunte e USING(id_dvd)\n WHERE e.id_emprunt IS NULL;\n\n\n\n\n\n6\nListez les titres des films qui ont été empruntés plus de 10 fois.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nSELECT f.titre,\n       COUNT(1) AS nb_emprunts\n  FROM film f\n  JOIN dvd d USING (id_film) \n  JOIN emprunte e USING (id_dvd)\n GROUP BY f.titre\nHAVING COUNT(1) &gt; 10;\n\n\n\n\n\n7\nInsérez en base de données le film Barbie du genre « comédie » sorti le 19 juillet 2023.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nINSERT INTO film (titre, genre, date_sortie)\nVALUES ('Barbie', 'comédie', '2023-07-19');"
  },
  {
    "objectID": "docs/annales/examen-2024.html#poo-et-uml",
    "href": "docs/annales/examen-2024.html#poo-et-uml",
    "title": "Examen 2024 - correction",
    "section": "POO et UML",
    "text": "POO et UML\nUn magasin de légumes souhaite créer une application pour gérer son stock, ses clients et les commandes.\nChaque légume à un type, une variété, un prix et son stock (en kg).\nLe magasin dispose également d’une liste de clients qui sont déﬁnis par leurs numéros de client, nom, prénom, âge et s’ils possèdent la carte de ﬁdélité du magasin.\nUne commande possède un numéro de commande, un montant total initialement à 0, et est réalisée par un client. Une commande est décomposée en lignes de commandes. Chaque ligne contient un légume et une quantité.\n\n\n\n\n\n\nNote\n\n\n\nPour cet exercice, il y a plusieurs manières de répondre au besoin, en voici une.\n\n\n\n1\nProposez un diagramme de classes UML pour décrire l’application ci-dessus.\n\n\n\n\n\nclassDiagram\n    class Magasin {\n        -str nom\n        -List[Legume] stock\n        -List[Client] clients\n    }\n\n    class Legume {\n        -str type_leg\n        -str variete\n        -float prix\n        -float stock\n    }\n\n    class Client {\n        -int numeroClient\n        -str nom\n        -str prenom\n        -int age\n        -bool carteFidelite\n        -List[Commande]\n        +void validerCommande(int numeroCommande)\n    }\n\n    class Commande {\n        -int numeroClient\n        -int numeroCommande\n        -float montant\n        -List[LigneCommande] lignesCommande\n    }\n\n    class LigneCommande {\n        -Legume legume\n        -float quantite\n    }\n\n    Magasin o-- Client : gére\n    Client --&gt; Commande : réalise\n    Commande o-- LigneCommande : composée\n    LigneCommande -- Legume\n    Magasin o-- Legume : stocke\n\n\n\n\n\n\n\n\n2\nÉcrivez le constructeur de la classe Commande en Python.\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nclass Commande:\n    def __init__(self, numero_commande, numero_client):\n        self.numero_client = numero_client\n        self.numero_commande = numero_commande\n        self.montant = 0.0\n        self.lignes_commande = []\n\n\n\n\n\n3\nÉcrivez le code de la méthode valider_commande() dans la classe Magasin, qui permet de :\n\nVérifier si une commande est valide (si le stock de légumes est suffisant).\nCalculer et mettre à jour le montant total de la commande si la commande est valide.\nRetourner True si la commande est valide, False sinon.\n\n\n\n\n\n\n\nRéponse\n\n\n\n\n\nclass Magasin:\n\n    def __init__(self, nom):\n        self.nom = nom\n        self.stock = []     # Liste de Legume\n        self.clients = []\n\n    def valider_commande(self, commande) -&gt; bool:\n        total_commande = 0.0\n        \n        # Pour chaque Legume de la commande\n        for ligne in commande.lignes_commande:\n            legume = ligne.legume\n            quantite = ligne.quantite\n            \n            # Vérifier si le stock est suffisant\n            stock_legume = None\n            \n            for l in self.stock:\n                if l.variete == legume.variete and l.type_leg == legume.type_leg:\n                    stock_legume = l.stock\n                    break\n            \n            # Si le légume n'est pas trouvé ou le stock est insuffisant\n            if stock_legume is None or stock_legume &lt; quantite:\n                return False  \n            else:\n                total_commande += legume.prix * quantite\n        \n        # Mettre à jour le montant de la commande\n        commande.montant = total_commande\n        \n        # Mettre à jour le stock\n        for ligne in commande.lignes_commande:\n            legume = ligne.legume\n            quantite = ligne.quantite\n            for l in self.stock:\n                if l.variete == legume.variete and l.type == legume.type:\n                    l.stock -= quantite\n                    break\n    \n        return True"
  },
  {
    "objectID": "docs/outils/DBeaver.html",
    "href": "docs/outils/DBeaver.html",
    "title": "DBeaver",
    "section": "",
    "text": "Note\n\n\n\nDBeaver est un logiciel qui permet de se connecter à une base de données. Il offre une interface graphique conviviale pour se connecter, gérer et requêter différentes bases de données, notamment MySQL, PostgreSQL, Oracle, SQLite, et bien d’autres encore.\nOuvrez le logiciel DBeaver installé sur votre VM, puis suivez les indications ci-dessous."
  },
  {
    "objectID": "docs/outils/DBeaver.html#configuration",
    "href": "docs/outils/DBeaver.html#configuration",
    "title": "DBeaver",
    "section": "1 Configuration",
    "text": "1 Configuration\n\nMenu Fenêtre &gt; Preference\n\nFormatage SQL\n\nCasse des mots clefs : UPPER\nInsert spaces for tabs\nAppliquer\n\nMetadonnées\n\nDécocher Ouvrir une connexion séparée pour la lecture des métadonnées\n\nEditeur SQL\n\nDécocher Ouvrir une connexion séparée pour chaque éditeur\n\n\n\n\n1.1 Optionnel\n\nTemplates\n\nEnlever les modèles existants\nImporter le fichier templates_dbeaver.xml\nLes templates permettent d’écrire plus rapidement des requêtes"
  },
  {
    "objectID": "docs/outils/DBeaver.html#créer-la-connexion",
    "href": "docs/outils/DBeaver.html#créer-la-connexion",
    "title": "DBeaver",
    "section": "2 Créer la connexion",
    "text": "2 Créer la connexion\nPour créer une connexion vers la base de données ENSAI sur la VM :\n\nCliquer sur l’icone Nouvelle connexion en haut à gauche sous fichier\nSélectionner PostgreSQL puis suivant\n\nHost : sgbd-eleves.domensai.ecole\nPort : 5432\nDatabase : idxxxx\nNom d’utilisateur : idxxxx\nMot de passe : idxxxx\nTest de connexion\nAcceptez les mises à jour des pilotes\nTerminer"
  },
  {
    "objectID": "docs/outils/DBeaver.html#exécuter-du-sql",
    "href": "docs/outils/DBeaver.html#exécuter-du-sql",
    "title": "DBeaver",
    "section": "3 Exécuter du SQL",
    "text": "3 Exécuter du SQL\n\nCliquer sur l’icone SQL\nExécuter la requête courante (où est le curseur de la souris):\n\nCTRL + ENTREE\nle petit triangle orange\n\nExécuter toutes les requêtes\n\nle triangle orange à l’intérieur d’un parchemin"
  },
  {
    "objectID": "docs/outils/DBeaver.html#interface-pgadmin",
    "href": "docs/outils/DBeaver.html#interface-pgadmin",
    "title": "DBeaver",
    "section": "4 Interface pgAdmin",
    "text": "4 Interface pgAdmin\nEn cas de soucis avec DBeaver, une autre solution pour éxécuter des requêtes SQL est de passer par l’interface pgAdmin\n\nUtilisateur : idxxxx\nMot de passe : idxxxx\nUne fois connecté, cliquez sur idxxxx dans le menu de gauche\ncliquez sur SQL pour exécuter des requêtes"
  },
  {
    "objectID": "docs/outils/Markdown.html",
    "href": "docs/outils/Markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Markdown est un langage de balisage léger créé par John Gruber en 2004. Son objectif de simplifier l’écriture de texte destiné au web en permettant aux utilisateurs d’écrire en utilisant un format texte brut facile à lire et à écrire."
  },
  {
    "objectID": "docs/outils/Markdown.html#quest-ce-que-markdown",
    "href": "docs/outils/Markdown.html#quest-ce-que-markdown",
    "title": "Markdown",
    "section": "",
    "text": "Markdown est un langage de balisage léger créé par John Gruber en 2004. Son objectif de simplifier l’écriture de texte destiné au web en permettant aux utilisateurs d’écrire en utilisant un format texte brut facile à lire et à écrire."
  },
  {
    "objectID": "docs/outils/Markdown.html#pourquoi-utiliser-markdown",
    "href": "docs/outils/Markdown.html#pourquoi-utiliser-markdown",
    "title": "Markdown",
    "section": "2 Pourquoi utiliser Markdown ?",
    "text": "2 Pourquoi utiliser Markdown ?\nMarkdown a été conçu comme une alternative intuitive aux balisages plus complexes du HTML. Il s’est rapidement popularisé parmi les développeurs, les blogueurs et les rédacteurs pour sa simplicité et sa lisibilité.\n\n✅ Simplicité : Facile à apprendre et à utiliser, même si vous n’êtes pas familiers avec HTML\n✅ Lisibilité : Le texte brut en Markdown reste lisible même sans être converti en HTML\n✅ Portabilité : Les fichiers Markdown peuvent être convertis facilement en HTML, PDF…\n✅ Popularité : Supporté par de nombreuses plates-formes et outils de rédaction\n❌ Limitations : Markdown est conçu pour être simple, donc il ne supporte pas toutes les fonctionnalités avancées de mise en page"
  },
  {
    "objectID": "docs/outils/Markdown.html#écrire-du-markdown",
    "href": "docs/outils/Markdown.html#écrire-du-markdown",
    "title": "Markdown",
    "section": "3 Écrire du markdown",
    "text": "3 Écrire du markdown\nLes fichiers markdown sont des fichiers texte qui ont pour extension .md.\nIl existe de très nombreux éditeurs de Markdown :\n\nen ligne, par exemple HackMd\nà installer sur sa machine, par exemple dans Visual Studio Code\n\nLes éditeurs présentent généralement deux sections cote à cote :\n\nune partie édition où l’on écrit le code\nune partie vue où l’on voit le résultat\n\n\n3.1 Exemples\nDe très nombreuses ressources existent pour apprendre en quelques minutes le langage, par exemple https://commonmark.org/help/\nQuelques exemples de mise en forme :\n\n\n\nCode Markdown\nRésultat\n\n\n\n\n**texte en gras**\ntexte en gras\n\n\n*texte en italique*\ntexte en italique\n\n\n[lien](https://example.com)\nlien\n\n\n![texte alternatif](image.jpg)\n\n\n\n`code en ligne`\ncode en ligne\n\n\n# Titre de niveau 1\n\n\n\n## Titre de niveau 2\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nCette page est elle-même écrite en Markdown ! (avec une surcouche)\nVous pouvez consulter le code en cliquant sur le bouton &lt;/&gt; Code en haut à droite.\n\n\nUn large choix d’emoji est également disponible en Markdown 😎"
  },
  {
    "objectID": "docs/outils/Markdown.html#utilisation-dans-vscode",
    "href": "docs/outils/Markdown.html#utilisation-dans-vscode",
    "title": "Markdown",
    "section": "4 Utilisation dans VScode",
    "text": "4 Utilisation dans VScode\n\nCTRL + K puis V : pour avoir cote à cote les modes édition et vue\nExtensions utiles (à aller chercher dans le marketplace)\n\nmarkdownlint\nMarkdown Emoji\nMarkdown Checkboxes\nMarkdown Table\nMarkdown Preview Mermaid Support"
  },
  {
    "objectID": "docs/outils/VSCode.html",
    "href": "docs/outils/VSCode.html",
    "title": "Visual Studio Code",
    "section": "",
    "text": "Visual Studio Code (VS Code) est un éditeur de code source développé par Microsoft, gratuit et open-source, conçu pour être léger et performant. Il est compatible avec de très nombreux langages de programmation : Python, R, Java, JavaScript, C++…\n\n\n\nAuto-complétion : Aide à écrire du code plus rapidement et avec moins d’erreurs\nColoration syntaxique : Améliore la lisibilité du code\nDébogage intégré : Facilite l’identification et la correction des erreurs\nExtensibilité : grâce à une vaste bibliothèque d’extensions disponibles sur le marketplace\nConfiguration et outils : linters, formateurs de code…\n\nLe but de cette fiche est de :\n\nvous permettre d’exécuter un programme python avec VS Code\ndonner quelques astuces pour faciliter son utilisation"
  },
  {
    "objectID": "docs/outils/VSCode.html#visual-studio-code",
    "href": "docs/outils/VSCode.html#visual-studio-code",
    "title": "Visual Studio Code",
    "section": "",
    "text": "Visual Studio Code (VS Code) est un éditeur de code source développé par Microsoft, gratuit et open-source, conçu pour être léger et performant. Il est compatible avec de très nombreux langages de programmation : Python, R, Java, JavaScript, C++…\n\n\n\nAuto-complétion : Aide à écrire du code plus rapidement et avec moins d’erreurs\nColoration syntaxique : Améliore la lisibilité du code\nDébogage intégré : Facilite l’identification et la correction des erreurs\nExtensibilité : grâce à une vaste bibliothèque d’extensions disponibles sur le marketplace\nConfiguration et outils : linters, formateurs de code…\n\nLe but de cette fiche est de :\n\nvous permettre d’exécuter un programme python avec VS Code\ndonner quelques astuces pour faciliter son utilisation"
  },
  {
    "objectID": "docs/outils/VSCode.html#paramétrage",
    "href": "docs/outils/VSCode.html#paramétrage",
    "title": "Visual Studio Code",
    "section": "2 Paramétrage",
    "text": "2 Paramétrage\n\n2.1 Extensions\nDe très nombreuses extensions permettent d’améliorer votre utilisation de VS Code. Sur la version installée sur la VM ENSAI, vous pouvez trouver :\n\nBlack Formatter\nFlake8\nisort\nPython Test Explorer\n…\n❌ Désactiver l’extension Ruff (elle fait doublon avec Flake8)\n\nAutres extensions interessantes :\n\nBetter Comments\n\n\n\n2.2 Formatage et Linting\n\nUn formateur est un outil qui va mettre en forme votre code pour que ce soit joli et lisible\nun linter est un outil qui va vous avertir si votre code n’est pas joli\n\nex : ligne trop longue, espace manquant ou en trop…\n\n\nLes extensions Black Formatter et Flake8 sont respectivement un formateur et un linter\n\n\n2.3 Settings\nVous pouvez préciser le paramètrage à plusieurs niveaux :\n\nau niveau utilisateur (User)\nau niveau d’un dépôt (Workspace)\n\nLe fichier .vscode/settings.json contient du paramètrage qui va s’appliquer à tous les fichiers du dépôt.\nCe fichier contient par exemple les propriétés ci-dessous :\n\n\n.vscode/settings.json\n\n    \"flake8.args\": [\n        \"--max-line-length=100\"\n    ],\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"ms-python.black-formatter\",\n        \"editor.formatOnSave\": true,\n        \"editor.insertSpaces\": true,\n        \"editor.tabSize\": 4\n    },"
  },
  {
    "objectID": "docs/outils/VSCode.html#première-utilisation",
    "href": "docs/outils/VSCode.html#première-utilisation",
    "title": "Visual Studio Code",
    "section": "3 Première utilisation",
    "text": "3 Première utilisation\n\n\n\n\n\n\nNote\n\n\n\nNous allons créer un dépôt local avec Git, puis ouvrir ce dépôt avec VSCode.\n\n\n\nOuvrez Visual Studio Code\nOuvrez un terminal\n\nMenu Terminal &gt; New terminal (raccourci : CTRL + ù)\n\nCréez un dossier pour le Cours\n\nCopiez cette commande : mkdir -p /p/Cours2A/UE3_Remise_a_niveau\nDans le terminal, faîtes clic droit (Coller) puis ENTREE\nVérifiez que les dossiers sont bien créés, sinon créer les dossiers à la main\n\nClonez le dépôt\n\nPositionnez-vous dans le dossier créé : cd /p/Cours2A/UE3_Remise_a_niveau\ngit clone https://github.com/ludo2ne/ENSAI-2A-remise-a-niveau.git\n\nOuvrez un espace de travail\n\nDans VSCode : File &gt; Open Folder\nSélectionnez le dossier P:/Cours2A/UE3_Remise_a_niveau/ENSAI-2A-remise-a-niveau créé précédemment\nYes i trust…\n\nOuvrez, puis exécutez un fichier Python\n\nOuvrez le fichier Python-POO/exemple/src/__main__.py\nExecutez le fichier\n\nEn haut à droite, cliquer sur l’icone en forme de triangle ▷\nRun python file in terminal\n\nCela ouvre un terminal et exécute le fichier"
  },
  {
    "objectID": "docs/outils/VSCode.html#le-terminal-python",
    "href": "docs/outils/VSCode.html#le-terminal-python",
    "title": "Visual Studio Code",
    "section": "4 Le terminal python",
    "text": "4 Le terminal python\n2 modes :\n\nP:\\Cours\\Python\\tp1&gt;\n\npour éxecuter en totalité un fichier python\n\nen cliquant sur le triangle ▷\nen tapant la commande python bacasable.py\n\ntaper python en ENTREE pour passer à l’autre mode\n\n&gt;&gt;&gt; pour exécuter directement du code python\n\npermet d’exécuter uniquement certaines lignes du fichier\n\nen cliquant sur une ligne puis SHIFT + ENTREE\nen sélectionnant plusieurs lignes puis SHIFT + ENTREE\n\ndans ce mode on peut aussi écrire directement du python dans le terminal\ntaper quit() ou CTRL + Z pour retourner à l’autre mode"
  },
  {
    "objectID": "docs/outils/VSCode.html#python-vscode-et-les-packages",
    "href": "docs/outils/VSCode.html#python-vscode-et-les-packages",
    "title": "Visual Studio Code",
    "section": "5 Python, VSCode et les packages",
    "text": "5 Python, VSCode et les packages\nImaginez que votre code est organisé de la manière ci-dessous\n├───tp1\n│   └───src\n│   │   ├───vehicule\n│   │   │   ├───velo.py\n│   │   │   └───trottinette.py\n│   │   ├───animal\n│   │   │   ├───girafe.py\n│   │   │   └───ane.py\nSi dans la classe Girafe, vous voulez créer un objet de la classe Velo, vous pouvez par exemple faire ceci dans le code de girafe.py :\n\nimport de la classe Velo\npuis création d’un objet Velo\n\n\n\ngirafe.py\n\nfrom vehicule.velo import Velo\n\nclass Girafe:\n    def __init__(self, nom, nom_moyen_transport):\n        self.nom = nom\n        vehicule = None\n        if nom_moyen_transport * \"velo\":\n            vehicule = Velo()\n        self.moyen_transport = vehicule\n\n🚨 Cependant, il se peut que que VSCode et/ou le compilateur python n’apprécient pas ce genre d’imports et que vous rencontriez des erreurs du type le module velo n’existe pas\nComme solution de contournement, vous pouvez :\n\nen reprenant l’arborescence ci-dessus,\ndans le dossier code créez un dossier .vscode\ndans ce dossier .vscode, créer le fichier settings.json qui contient ceci :\n\n{\n    \"python.analysis.extraPaths\": [\n        \"./*\"\n    ],\n    \"terminal.integrated.env.windows\": {\n        \"PYTHONPATH\": \"${workspaceFolder}/src\",\n    },\n    \"terminal.integrated.env.linux\": {\n        \"PYTHONPATH\": \"${workspaceFolder}/src\",\n    },\n    \"python.languageServer\": \"Jedi\"\n}\n\npuis fermez et redémarrez VSCode\nFile &gt; Open Folder &gt; C:/.../tp1/code"
  },
  {
    "objectID": "docs/outils/VSCode.html#afficher-les-variables-denvironnement",
    "href": "docs/outils/VSCode.html#afficher-les-variables-denvironnement",
    "title": "Visual Studio Code",
    "section": "6 Afficher les variables d’environnement",
    "text": "6 Afficher les variables d’environnement\nprintenv\necho $PYTHONPATH\necho $HOME"
  },
  {
    "objectID": "docs/outils/outils.html",
    "href": "docs/outils/outils.html",
    "title": "Divers outils",
    "section": "",
    "text": "VM : parler de l’environnement de travail à l’ENSAI\nArborescence : pour bien organiser vos cours\nBookmarks : des favoris à importer dans votre navigateur\nVSCode : un environnement de développement\nUML : une introduction à la modélisation UML\nBash : pour apprendre à utiliser un terminal de commande\nMarkdown : langage de balisage léger et intuitif utilisé pour formater et structurer du texte\n\nHackMd : un éditeur en ligne de Markdown"
  },
  {
    "objectID": "docs/outils/outils.html#outils-présentés-dans-cette-partie",
    "href": "docs/outils/outils.html#outils-présentés-dans-cette-partie",
    "title": "Divers outils",
    "section": "",
    "text": "VM : parler de l’environnement de travail à l’ENSAI\nArborescence : pour bien organiser vos cours\nBookmarks : des favoris à importer dans votre navigateur\nVSCode : un environnement de développement\nUML : une introduction à la modélisation UML\nBash : pour apprendre à utiliser un terminal de commande\nMarkdown : langage de balisage léger et intuitif utilisé pour formater et structurer du texte\n\nHackMd : un éditeur en ligne de Markdown"
  },
  {
    "objectID": "docs/outils/outils.html#autres-outils",
    "href": "docs/outils/outils.html#autres-outils",
    "title": "Divers outils",
    "section": "2 Autres outils",
    "text": "2 Autres outils\n\n\n\nOutil\nIntérêt\n\n\n\n\nChatGPT\nDébugage, Génération de code, Génération de données, Documentation automatique\n\n\nStack Overflow\nTrés nombreuses questions et réponses en informatique\n\n\nJSON Formatter\nOutil en ligne pour formater et visualiser des données JSON\n\n\nDeepL\nOutil de traduction\n\n\nScribens\nCorrecteur grammatical en ligne"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html",
    "href": "docs/python/02-listes-et-dictionnaires.html",
    "title": "Listes et Dictionnaires",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#avant-de-commencer",
    "href": "docs/python/02-listes-et-dictionnaires.html#avant-de-commencer",
    "title": "Listes et Dictionnaires",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#conteneurs",
    "href": "docs/python/02-listes-et-dictionnaires.html#conteneurs",
    "title": "Listes et Dictionnaires",
    "section": "1 Conteneurs",
    "text": "1 Conteneurs\nIl existe plusieurs structures de données en Python :\n\nListes (list) : collection ordonnée et modifiable d’éléments\nDictionnaires (dict) : collection non ordonnée de paires clé-valeur\nEnsembles (set) : collection non ordonnée d’éléments uniques\nTuples (tuple) : collection ordonnée et immuable d’éléments\n\nNous allons ici nous concentrer sur les deux structures les plus courantes : les listes et les dictionnaires"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#listes",
    "href": "docs/python/02-listes-et-dictionnaires.html#listes",
    "title": "Listes et Dictionnaires",
    "section": "2 Listes",
    "text": "2 Listes\nPropriétés des listes Python :\n\nIndexation : Les éléments d’une liste sont indexés, ce qui signifie qu’ils peuvent être accédés en utilisant leur position dans la liste. L’index du premier élément est 0, et l’index du dernier élément est len(liste) - 1.\nMutable : Les listes sont des objets mutables, ce qui signifie que vous pouvez modifier leurs éléments. Vous pouvez ajouter, supprimer ou modifier des éléments.\nHétérogénéité : Les listes peuvent contenir des éléments de différents types de données : entiers, chaînes de caractères, booléens, voire d’autres listes.\nLongueur variable : Les listes peuvent contenir un nombre variable d’éléments. Elles peuvent être vides (sans éléments) ou contenir un nombre illimité d’éléments.\n\n\n2.1 Créer une liste\n\n# Liste d'entiers\na = [22, 29, 35, 56]\na\n\n\ntype(a)\n\n\n# Liste mixte\nb = [\"bonjour\", 20, True]\nprint(b)\n\n\n# Concaténation\na + b\n\n\n# Répétition\na * 2\n\nIl existe de nombreuses autres possibilités pour créer des listes.\n\nlist(range(1, 7))\n\n\n[x for x in range(1, 7)]\n\n\n# En séparant une chaîne de caractères\nc = \"bleu;blanc;rouge;vert;jaune\"\nc.split(\";\")\n\n\n\n2.2 Méthodes utiles\n\n# Nombre d'éléments\nlen(a)\n\n\n# Premier élément\na[0]\n\n\n# Dernier élément\na[-1]\n\n\n# Tous les éléments à partir de la position 1\na[1:]\n\n\n# Tester si une valeur appartient à une liste\n22 in a\n\n\n# Trouver la position d'un élément\na.index(29)\n\n\n# Inverser une liste (sans modifier la liste d'origine)\nprint(\"a[::-1] : \" + str(a[::-1]))\nprint(\"a :       \" + str(a))\n\n\n# Inverser une liste (ici l'inversion est sauvegardée dans la variable **a** )\na.reverse()\na\n\n\n# Trier une liste (sans modifier la liste d'origine)\nsorted(a)\n\n\n# Order décroissant\nsorted(a, reverse=True)\n\n\n# Trier une liste (en sauvegardant la modification dans la variable **a**)\nprint(\"Avant : \" + str(a))\na.sort()\nprint(\"Après : \" + str(a))\n\n\n\n2.3 Ajouter, modifier et supprimer\n\n# Ajouter à la fin\na.append(44)\na\n\n\n# Insérer à une position précise\na.insert(2, 88)\na\n\n\n# Modifier\na[0] = 99\na\n\n\n# Supprimer par position\na.pop(3)\na\n\n\n# Supprimer par valeur\na.remove(44)\na\n\n\n\n2.4 Copier une liste\nObservez, puis exécutez le code ci-dessous, il contient les instructions suivantes :\n\ncréation de la variable liste\ncréation de la variable copie\nsuppression du dernier élément de copie\naffichage de liste\n\n\nliste = [1, 2, 3, 4]\nliste2 = liste\nliste2.pop()\nliste\n\nNous pourrions nous attendre à ce que la variable liste ne soit pas modifiée et affiche [1, 2, 3, 4].\nPourtant la variable liste2 n’est pas une copie de liste, c’est simplement une autre manière d’appeler la même liste.\n\n# Pour créer une vraie copie qui sera distinct de l'original\ncopie = list(liste)\ncopie.append(9)\nliste, copie\n\n\n# Autre possibilité pour copier\ncp = liste.copy()\ncp.append(8)\nliste, cp"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#dictionnaires",
    "href": "docs/python/02-listes-et-dictionnaires.html#dictionnaires",
    "title": "Listes et Dictionnaires",
    "section": "3 Dictionnaires",
    "text": "3 Dictionnaires\nPropriétés importantes d’un dictionnaire en Python :\n\nIndexation par clé : Les éléments d’un dictionnaire sont indexés par des clés plutôt que par des positions. Chaque clé doit être unique dans le dictionnaire, et elle est associée à une valeur correspondante. La recherche d’une valeur associée à une clé est très rapide.\nMutable : Les dictionnaires sont des objets mutables, ce qui signifie que vous pouvez ajouter, supprimer ou modifier des éléments du dictionnaire après sa création.\nHétérogénéité : Les dictionnaires peuvent contenir des paires clé-valeur avec des types de données différents. Les clés peuvent être de types immuables tels que les chaînes de caractères, les entiers… Les valeurs peuvent être de n’importe quel type de données valide en Python.\nLongueur variable : Les dictionnaires peuvent contenir un nombre variable de paires clé-valeur. Ils peuvent être vides (sans paires clé-valeur) ou contenir un nombre illimité de paires.\nNon ordonné : Contrairement aux listes, les éléments d’un dictionnaire n’ont pas d’ordre défini. L’ordre dans lequel les paires clé-valeur sont stockées n’est pas garanti et peut changer lors des opérations de modification du dictionnaire.\n\n\n3.1 Créer un dictionnaire\n\ningredients = {'sucre': '100g', 'poire': 2, 'lait': '1L', 'sel': True}\ningredients\n\n\ntype(ingredients)\n\n\n# Nombre d'éléments\nlen(ingredients)\n\n\n# Recherche par clé\ningredients['lait']\n\n\n# Recherche par clé - autre possibilité\ningredients.get('lait')\n\n\n\n3.2 Ajouter, modifier et supprimer\n\n# Ajouter un élément\ningredients['fraise'] =  '200g'\ningredients\n\n\n# Modifier\ningredients['sucre'] =  '35g'\ningredients\n\n\n# Supprimer \ningredients.pop('lait')\ningredients\n\n\n\n3.3 Méthodes utiles\n\n# Liste des clés\nlist(ingredients.keys())      # idem : list(ingredients)\n\n\n# Liste des valeurs\nlist(ingredients.values())\n\n\n# Liste des items (liste de tuples)\nlist(ingredients.items())"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#les-types-vide",
    "href": "docs/python/02-listes-et-dictionnaires.html#les-types-vide",
    "title": "Listes et Dictionnaires",
    "section": "4 Les types « vide »",
    "text": "4 Les types « vide »\nMaintenant que nous avons vu les listes et les dictionnaires, nous pouvons parler des types vides.\nPar exemple, il est possible de créer :\n\nune variable qui ne contient rien : None\nune liste vide []\nun dictionnaire vide {}\n\n\nx = None\ntype(x)\n\n\ny = []\ntype(y)\n\n\nz = {}\ntype(z)"
  },
  {
    "objectID": "docs/python/02-listes-et-dictionnaires.html#exercices",
    "href": "docs/python/02-listes-et-dictionnaires.html#exercices",
    "title": "Listes et Dictionnaires",
    "section": "5 Exercices",
    "text": "5 Exercices\n\n5.1 Exercice 1\nEn partant de la liste notes = [\"do\", \"re\", \"re\", \"re\", \"fa\", \"sol\", \"solsi\", \"la\"], ajoutez, supprimez et modifiez des éléments pour qu’elle contienne les notes de musique “do re mi fa sol la si” dans le bon ordre.\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.2 Exercice 2\nProposez deux méthodes pour inverser la liste [\"un\", \"deux\", \"trois\", \"quatre\"]. Quelle est la différence majeure entre les deux méthodes ?\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.3 Exercice 3\nTestez le comportement de la méthode pop sur la liste des entiers de 1 à 9.\nPar exemple, testez pop() sans paramètres ou encore pop(-1).\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.4 Exercice 4\nTestez le comportement des méthodes min et max sur :\n\nsur une liste composée uniquement d’objets numériques (int et float) ;\nsur une liste composée uniquement de chaînes de caractères ;\nsur une liste composée d’un mélange d’objets numériques et textuels.\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.5 Exercice 5\nEssayer de créer une liste vide puis vérifiez son type.\nQuel intérêt cela pourrait-il avoir ?\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.6 Exercice 6\nSoit le dictionnaire suivant : animaux = {'chats': 5, 'chiens': 12}\nQue vont retourner les tests d’appartenance suivants ? Vérifiez vos prédictions.\n\n'chats' in animaux.keys()\n'chats' in animaux.values()\n'chats' in animaux\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.7 Exercice 7\nSoit le dictionnaire défini dans la cellule ci-dessous.\nAffichez à l’aide d’opérations print :\n\nla liste des noms des différentes classes\nla note de Miranda en histoire\nla liste des notes obtenues par Hypolyte\nla liste des noms des élèves de la 6emeB\nla liste des matières enseignées en 6eme A\nla liste de toutes les matières enseignées\nla liste des notes obtenues par les filles des deux classes\n\n\nresultats = {\n    \"6emeA\": {\"Miranda\" : {\"notes\": {\"physique\": 16, \"histoire\": 12}},\n              \"Celestin\": {\"notes\": {\"physique\": \"absent\", \"histoire\": 18}}\n             },\n    \"6emeB\": {\"Hypolyte\": {\"notes\": {\"maths\": 11, \"anglais\": 0}},\n              \"Josephine\": {\"notes\": {\"maths\": 16, \"anglais\": 20}}\n             }\n}\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.8 Exercice 8\nÀ l’aide d’un dictionnaire, comptez puis affichez le nombre d’occurences de chaque caractère dans la phrase suivante :\n\nJe compte le nombre d'occurences de chaque caractère de la phrase courante.\n\nAstuce : au préalable, faites un test sur une chaine plus petite.\n\n# Testez votre réponse dans cette cellule\n\n\n\n5.9 Exercice 9\nNettoyer cette liste pour retirer tous les doublons et ne conserver qu’une seule occurence de chaque fruit :\n\nfruits = ['pomme', 'banane', 'orange', 'fraise', 'citron', 'fraise', 'banane', 'orange', 'banane', 'pomme', 'fraise']\n\nIndice : utiliser les set\n\n# Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/04-fonctions.html",
    "href": "docs/python/04-fonctions.html",
    "title": "Les fonctions",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/04-fonctions.html#avant-de-commencer",
    "href": "docs/python/04-fonctions.html#avant-de-commencer",
    "title": "Les fonctions",
    "section": "",
    "text": "Téléchargez ce notebook Jupyter\nConnectez-vous au Jupyter ENSAI avec id et mot de passe\n\nou une autre plate-forme (SSPCloud, Jupyter Lab, Google Colab, Kaggle…)\n\nImportez le fichier .ipynb"
  },
  {
    "objectID": "docs/python/04-fonctions.html#fonctions",
    "href": "docs/python/04-fonctions.html#fonctions",
    "title": "Les fonctions",
    "section": "1 Fonctions",
    "text": "1 Fonctions\nL’idée d’une fonction est de regrouper ensemble des morceaux de codes qui pourraient être utilisés à plusieurs endroits de votre programme.\nUtiliser des fonctions est une bonne pratique :\n\ncela réduit la duplication du code\ncela permet de mieux structurer le code et le rendre plus clair\n\nUne fonction est composée de :\n\nun ensemble de paramètres\ndes instructions qui utilisent les paramètres\nretourne ou affiche un résultat\n\nLe mot clé def sert à définir une fonction.\nVoici un exemple de fonction :\n\nNom de la fonction : ma_fonction\nParamètres : 2 paramètres p1 et p2\nSortie : résultat de l’opération p1 x p2 + p1 + 5\n\n\ndef ma_fonction(p1, p2):\n    resultat = p1 * p2 + p1 + 5\n    return resultat\n\nMaintenant que notre fonction est définie, nous pouvons l’appeler autant de fois que nous le souhaitons\n\nma_fonction(2, 6)\n\n\nma_fonction(5, 1) + ma_fonction(8, 2)\n\n\n1.1 Arguments\nLes arguments sont les paramètres de la fonction.\nLorsqu’on appelle une fonction en lui spécifiant des arguments, on dit qu’on lui « passe » des arguments.\nCes arguments deviennent alors des variables qui peuvent être utilisées uniquement à l’intérieur de la fonction.\n\ndef maximum(a, b):\n    if a &gt; b:\n        resultat = a\n    else:\n        resultat = b\n    return resultat\n\n\nmaximum(1, 5)\n\nÀ l’extérieur des fonctions, les arguments n’existent plus et ne sont plus connus.\n\na\n\n\nPassage par position et passage par mot-clé\nEn Python, les fonctions admettent deux modes de passage des arguments :\n\nle passage par position : les arguments sont passés dans l’ordre dans lequel ils ont été définis\nle passage par mot-clé : on précise le nom du paramètre lors du passage de l’argument\n\nIllustrons cette différence à partir d’une fonction qui réalise simplement une division.\n\ndef division(x, y):\n    if y == 0:\n        print(\"ERREUR : Division par 0 impossible\")\n    else:\n        return x / y\n\n\n# Passage par position\ndivision(8, 2)  \n\n\n# Passage par mot-clé\ndivision(x=8, y=2)  \n\nDans le cas du passage par position, le respect de l’ordre est impératif.\n\nprint(division(0, 5))\nprint(division(5, 0))\n\nNous remarquons que s’affiche None ci-dessus.\nL’explication est que lorsque l’on passe dans la partie de code if y == 0, il n’y a pas de return.\nDonc par défaut la méthode renvoie None, ce qui représente l’absence de valeur.\nDans le cas du passage par mot-clé, l’ordre n’a plus d’importance.\n\nprint(division(x=0, y=5))\nprint(division(y=5, x=0))\n\n\n\nArguments obligatoires et arguments optionnels\nLorsqu’on définit une fonction, il est fréquent de vouloir faire cohabiter :\n\ndes arguments que doit absolument spécifier l’utilisateur\ndes arguments optionnels qui spécifient un comportement par défaut de la fonction, mais peuvent également être modifiés si nécessaire\n\nRegardons par exemple comment on peut modifier le comportement de la fonction print à l’aide d’un argument optionnel.\n\nprint(\"salut\")\nprint(\"salut\")\n\n\nprint(\"salut\", end=' ')\nprint(\"salut\")\n\nNous avons modifié le comportement du premier appel à print via le paramètre optionnel end.\nPar défaut, cette valeur est fixée à '\\n', soit un retour à la ligne.\nNous l’avons modifié dans la deuxième cellule à un espace, d’où la différence de résultat.\nNous allons maintenant créer une fonction avec un argument optionnel.\nPour expliquer le comportement de cette méthode, une documentation a été ajoutée entre les caractères \"\"\".\n\ndef note_finale(note1, note2, bonus=0) -&gt; float:\n    \"\"\"Fonction d'ajout de 2 notes\n    Parameters\n    ----------\n        note1 : float\n            la première note\n        note2 : float\n            la deuxième note\n        bonus : float\n            un bonus (optionnel, par défaut égal à 0)\n    Returns\n    -------\n        float : sommes des 2 notes et du bonus\n    \"\"\"\n    return note1 + note2 + bonus\n\n\n# Comportement par défaut (bonus=0)\nnote_finale(8.5, 7)  \n\n\n# Comportement modifié\nnote_finale(8.5, 7, bonus = 2)  \n\nVous remarquerez également que la signature de la fonction se termine par -&gt; float.\nC’est également un élément de documentation non contraignant. Cela siginfie le type de données attendu en sortie.\n\n\nBonus : nombre d’arguments variable\n\nLa notation *args permet à une fonction de recevoir un nombre variable d’arguments positionnels\nLa notation **kwargs permet à une fonction de recevoir un nombre variable d’arguments clé-valeur\n\n\n# Exemple d'utilisation de args\n\ndef moyenne(*args):\n    somme = 0\n    nb = 0\n    for a in args:\n        somme += a\n        nb += 1\n    print(f\"Moyenne de {args} : {somme / nb}\")\n\nmoyenne(10, 15)\nmoyenne(8, 20, 16, 12)\n\n\n# Exemple d'utilisation de kwargs\n\ndef recette(**kwargs):\n    for a in kwargs:\n        # get argument name\n        arg_name = a\n        # get argument value\n        arg_value = kwargs[arg_name]\n        print(arg_name, \" = \", arg_value)\n    \n    \nrecette(tomate=2, farine=\"100g\", sel=True)\n\n\n\n\n1.2 Résultats\n\nPrincipe\nOn a vu :\n\nque toute fonction renvoie un résultat en sortie\nque l’instruction return permet de spécifier ce résultat\n\nLorsque la fonction est appelée, elle est évaluée à la valeur spécifiée par return, et cette valeur peut alors être récupérée dans une variable et utilisée dans des calculs ultérieurs, et ainsi de suite.\n\ndef division(x, y):\n    return x / y\n\n\na = division(4, 2)\nb = division(9, 3)\ndivision(a, b)  # 2 / 3\n\nRemarque importante : lorsqu’une instruction return est atteinte dans une fonction, le reste de la fonction n’est pas exécuté.\n\ndef test(x):\n    return x\n    print(\"vais-je être affiché ?\")\n    \ntest(3)\n\n\n\nRenvoyer plusieurs résultats\nUne fonction renvoie par définition un résultat, qui peut être tout objet Python. Comment faire si l’on souhaite renvoyer plusieurs résultats ? On peut simplement enregistrer les différents résultats dans un conteneur (liste, tuple, dictionnaire, etc.), qui peut lui contenir un grand nombre d’objets.\n\ndef calculs_mathematiques(a, b):\n    somme = a + b\n    difference = a - b\n    produit = a * b\n    return somme, difference, produit\n\nresultats = calculs_mathematiques(10, 5)\n\nprint(resultats)\ntype(resultats)\n\nPar défaut, les retours multiples sont des tuples.\nMais il est également possible de retourner une liste ou un dictionnaire.\n\ndef puissance_liste(a):\n    return [a**2, a**3]\n\npuissance_liste(4)\n\n\ndef puissance_dico(nombre):\n    carre = nombre ** 2\n    cube = nombre ** 3\n    return {\"carre\": a**2, \"cube\": a**3}\n\npuissance_dico(4)\n\n\n\n\n1.3 Lambda fonctions\nIl existe une autre manière concise de définir une fonction simple, la lambda fonction.\n\ncarre = lambda x: x**2\n\ncarre(6)"
  },
  {
    "objectID": "docs/python/04-fonctions.html#exercices",
    "href": "docs/python/04-fonctions.html#exercices",
    "title": "Les fonctions",
    "section": "2 Exercices",
    "text": "2 Exercices\n\n2.1 Exercice 1\nCréer une fonction puissance qui prend en entrée deux nombres x et y et renvoie la fonction puissance \\(x^y\\).\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.2 Exercice 2\nÉcrire une fonction statistiques_descriptives qui :\n\nprend en entrée une liste de nombre\nrenvoie la moyenne et la variance\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.3 Exercice 3\nÉcrire une fonction est_pair qui :\n\nprend en entrée un paramètre\nretourne un booléen pour dire si ce paramètre est pair\n\nAjouter un test pour vérifier que le paramètre est un entier.\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.4 Exercice 4\nÉcrire une fonction qui :\n\nprend en entrée une liste d’éléments quelconques\nrenvoie une nouvelle liste constituée des éléments uniques de la liste initiale\npermet via un paramètre optionnel de trier ou non la liste finale par ordre alphanumérique (le comportement par défaut est de ne pas trier).\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.5 Exercice 5\nLes fonctions récursives sont des fonctions qui s’appellent elles-mêmes dans le corps de la fonction, ce qui entraîne des appels infinis jusqu’à atteindre un critère d’arrêt (voir exemple du triangle de Pascal ci-dessous).\nCoder de manière récursive la fonction factoriel.\n\ndef triangle_pascal(n):\n    if n == 0:\n        return [[1]]                                          # Condition d'arrêt\n    else:\n        triangle = triangle_pascal(n - 1)                     # Appel récursif pour obtenir les lignes précédentes\n        prev_row = triangle[-1]                               # Récupérer la dernière ligne générée\n        new_row = [1]                                         # Premier élément de la nouvelle ligne\n        # Calculer les éléments de la nouvelle ligne\n        for i in range(len(prev_row) - 1):\n            new_row.append(prev_row[i] + prev_row[i + 1])  \n        new_row.append(1)                                     # Dernier élément de la nouvelle ligne\n        triangle.append(new_row)                              # Ajouter la nouvelle ligne au triangle\n        return triangle\n\nprint('\\n'.join(['\\t'.join(map(str, row)) for row in triangle_pascal(10)]))\n\n\n# Testez votre réponse dans cette cellule\n\n\n\n2.6 Exercice 6\nÉcrire une fonction appliquer_fonction_liste qui :\n\nprend en paramètre :\n\nune liste d’entiers\nune fonction\n\nretourne la liste à laquelle on a appliqué la fonction\n\nExemple :\nappliquer_fonction_liste([1, 2, 3, 4], lambda x: x**2) -&gt; [1, 4, 9, 16]\n\n# Testez votre réponse dans cette cellule"
  },
  {
    "objectID": "docs/python/correction.html",
    "href": "docs/python/correction.html",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "# Plusieurs manières de faire, par exemple\n\nnotes = [\"do\", \"re\", \"re\", \"re\", \"fa\", \"sol\", \"solsi\", \"la\"]\n\nnotes.pop(3)           # suppression par index\nnotes.pop(2)\nnotes.remove(\"solsi\")  # suppression par valeur\nnotes.insert(2, \"mi\")  \n\nnotes\n\n['do', 're', 'mi', 'fa', 'sol', 'la']\n\n\n\n\n\n\nl = [\"un\", \"deux\", \"trois\", \"quatre\"]\n\n# Inverse la liste sans la modifier\nl_inv = list(reversed(l)) # cast en list\nprint(l_inv)\n\n# Modifie la liste\nl.reverse()\nprint(l)\n\n['quatre', 'trois', 'deux', 'un']\n['quatre', 'trois', 'deux', 'un']\n\n\n\n\n\n\nentiers = [n for n in range(1, 10)]\nprint(entiers)\n\nentiers.pop()\nprint(entiers)\n\nentiers.pop(-1)\nprint(entiers)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7]\n\n\n\n\n\n\nla = [\"triangle\", \"carré\", \"Rectangle\"]\nprint(max(la)) \nprint(min(la)) \n\n# Pour les chaines de caractères, c'est ordonné par code ASCII\n\n# Pas de notion d'ordre entre chaines de caractères et types numériques\n\ntriangle\nRectangle\n\n\n\n\n\n\ntype([])\n\n# ex extraire les entiers positifs\nrelatifs = [1, 12, -20, 5, 8, -19, -2]\n\npositifs = []\n\nfor z in relatifs:\n    if z &gt;= 0:\n        positifs.append(z)\n\nprint(positifs)\n\n[1, 12, 5, 8]\n\n\n\n\n\n🚧 TODO : faire sans boucle\n\nresultats = {\n    \"6emeA\": {\"Miranda\" : {\"notes\": {\"physique\": 16, \"histoire\": 12}},\n              \"Celestin\": {\"notes\": {\"physique\": \"absent\", \"histoire\": 18}}\n             },\n    \"6emeB\": {\"Hypolyte\": {\"notes\": {\"maths\": 11, \"anglais\": 0}},\n              \"Josephine\": {\"notes\": {\"maths\": 16, \"anglais\": 20}}\n             }\n}\n\nprint(list(resultats.keys()))\nprint(resultats[\"6emeA\"][\"Miranda\"][\"notes\"][\"histoire\"])\nprint(list(resultats[\"6emeB\"][\"Hypolyte\"][\"notes\"].values()))\nprint(list(resultats[\"6emeB\"].keys()))\n\nmatieres_6emeA = []\nfor eleve in resultats[\"6emeA\"].values():\n    matieres_6emeA += eleve[\"notes\"].keys()\n    \nprint(list(set(matieres_6emeA)))\n\n['6emeA', '6emeB']\n12\n[11, 0]\n['Hypolyte', 'Josephine']\n['histoire', 'physique']\n\n\n\n\n\n🚧 TODO : faire sans boucle\n\nchaine = \"Je compte le nombre d'occurences de chaque caractère de la phrase courante.\"\n\nlettres = {}\n\nfor c in chaine:\n    if c in lettres:\n        lettres[c] += 1\n    else:\n        lettres[c] = 1\n\nfor c, count in lettres.items():\n    print(f\"'{c}': {count}\")\n\n'J': 1\n'e': 12\n' ': 11\n'c': 8\n'o': 4\n'm': 2\n'p': 2\n't': 3\n'l': 2\n'n': 3\n'b': 1\n'r': 6\n'd': 3\n''': 1\n'u': 3\n's': 2\n'h': 2\n'a': 6\n'q': 1\n'è': 1\n'.': 1"
  },
  {
    "objectID": "docs/python/correction.html#ex1",
    "href": "docs/python/correction.html#ex1",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "# Plusieurs manières de faire, par exemple\n\nnotes = [\"do\", \"re\", \"re\", \"re\", \"fa\", \"sol\", \"solsi\", \"la\"]\n\nnotes.pop(3)           # suppression par index\nnotes.pop(2)\nnotes.remove(\"solsi\")  # suppression par valeur\nnotes.insert(2, \"mi\")  \n\nnotes\n\n['do', 're', 'mi', 'fa', 'sol', 'la']"
  },
  {
    "objectID": "docs/python/correction.html#ex2",
    "href": "docs/python/correction.html#ex2",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "l = [\"un\", \"deux\", \"trois\", \"quatre\"]\n\n# Inverse la liste sans la modifier\nl_inv = list(reversed(l)) # cast en list\nprint(l_inv)\n\n# Modifie la liste\nl.reverse()\nprint(l)\n\n['quatre', 'trois', 'deux', 'un']\n['quatre', 'trois', 'deux', 'un']"
  },
  {
    "objectID": "docs/python/correction.html#ex3",
    "href": "docs/python/correction.html#ex3",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "entiers = [n for n in range(1, 10)]\nprint(entiers)\n\nentiers.pop()\nprint(entiers)\n\nentiers.pop(-1)\nprint(entiers)\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n[1, 2, 3, 4, 5, 6, 7, 8]\n[1, 2, 3, 4, 5, 6, 7]"
  },
  {
    "objectID": "docs/python/correction.html#ex4",
    "href": "docs/python/correction.html#ex4",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "la = [\"triangle\", \"carré\", \"Rectangle\"]\nprint(max(la)) \nprint(min(la)) \n\n# Pour les chaines de caractères, c'est ordonné par code ASCII\n\n# Pas de notion d'ordre entre chaines de caractères et types numériques\n\ntriangle\nRectangle"
  },
  {
    "objectID": "docs/python/correction.html#ex5",
    "href": "docs/python/correction.html#ex5",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "type([])\n\n# ex extraire les entiers positifs\nrelatifs = [1, 12, -20, 5, 8, -19, -2]\n\npositifs = []\n\nfor z in relatifs:\n    if z &gt;= 0:\n        positifs.append(z)\n\nprint(positifs)\n\n[1, 12, 5, 8]"
  },
  {
    "objectID": "docs/python/correction.html#ex6",
    "href": "docs/python/correction.html#ex6",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "🚧 TODO : faire sans boucle\n\nresultats = {\n    \"6emeA\": {\"Miranda\" : {\"notes\": {\"physique\": 16, \"histoire\": 12}},\n              \"Celestin\": {\"notes\": {\"physique\": \"absent\", \"histoire\": 18}}\n             },\n    \"6emeB\": {\"Hypolyte\": {\"notes\": {\"maths\": 11, \"anglais\": 0}},\n              \"Josephine\": {\"notes\": {\"maths\": 16, \"anglais\": 20}}\n             }\n}\n\nprint(list(resultats.keys()))\nprint(resultats[\"6emeA\"][\"Miranda\"][\"notes\"][\"histoire\"])\nprint(list(resultats[\"6emeB\"][\"Hypolyte\"][\"notes\"].values()))\nprint(list(resultats[\"6emeB\"].keys()))\n\nmatieres_6emeA = []\nfor eleve in resultats[\"6emeA\"].values():\n    matieres_6emeA += eleve[\"notes\"].keys()\n    \nprint(list(set(matieres_6emeA)))\n\n['6emeA', '6emeB']\n12\n[11, 0]\n['Hypolyte', 'Josephine']\n['histoire', 'physique']"
  },
  {
    "objectID": "docs/python/correction.html#ex7",
    "href": "docs/python/correction.html#ex7",
    "title": "Corrections Notebooks",
    "section": "",
    "text": "🚧 TODO : faire sans boucle\n\nchaine = \"Je compte le nombre d'occurences de chaque caractère de la phrase courante.\"\n\nlettres = {}\n\nfor c in chaine:\n    if c in lettres:\n        lettres[c] += 1\n    else:\n        lettres[c] = 1\n\nfor c, count in lettres.items():\n    print(f\"'{c}': {count}\")\n\n'J': 1\n'e': 12\n' ': 11\n'c': 8\n'o': 4\n'm': 2\n'p': 2\n't': 3\n'l': 2\n'n': 3\n'b': 1\n'r': 6\n'd': 3\n''': 1\n'u': 3\n's': 2\n'h': 2\n'a': 6\n'q': 1\n'è': 1\n'.': 1"
  },
  {
    "objectID": "docs/python/correction.html#ex1-1",
    "href": "docs/python/correction.html#ex1-1",
    "title": "Corrections Notebooks",
    "section": "ex1",
    "text": "ex1\n\nsomme = 0\nfor i in range(1, 11):\n    somme += i**2\nsomme\n\n385"
  },
  {
    "objectID": "docs/python/correction.html#ex2-1",
    "href": "docs/python/correction.html#ex2-1",
    "title": "Corrections Notebooks",
    "section": "ex2",
    "text": "ex2\n\nfor i in range(5, -1, -1):\n    print(i)\nprint(\"Boom\")\n\n5\n4\n3\n2\n1\n0\nBoom"
  },
  {
    "objectID": "docs/python/correction.html#ex3-1",
    "href": "docs/python/correction.html#ex3-1",
    "title": "Corrections Notebooks",
    "section": "ex3",
    "text": "ex3\n\ngamme = ['do', 're', 'mi', 'fa', 'sol', 'la', 'si']\n\ni = 0\nwhile i &lt; len(gamme):\n    print(\"La note numéro \" + str(i) + \" de la gamme de do majeur est \" + gamme[i])\n    i += 1\n\nLa note numéro 0 de la gamme de do majeur est do\nLa note numéro 1 de la gamme de do majeur est re\nLa note numéro 2 de la gamme de do majeur est mi\nLa note numéro 3 de la gamme de do majeur est fa\nLa note numéro 4 de la gamme de do majeur est sol\nLa note numéro 5 de la gamme de do majeur est la\nLa note numéro 6 de la gamme de do majeur est si"
  },
  {
    "objectID": "docs/python/correction.html#ex4-1",
    "href": "docs/python/correction.html#ex4-1",
    "title": "Corrections Notebooks",
    "section": "ex4",
    "text": "ex4\n\nliste = [34, 7, 20, 12, 50, 23, 16, 28, 6, 11, 19, 13, 26, 8, 9]\ntaille = len(liste)\n\nfor i in range(taille):\n    for j in range(i, taille):\n        if liste[i] &gt; liste[j]:\n            tmp = liste[j]\n            liste[j] = liste[i]\n            liste[i] = tmp\nliste\n\n[6, 7, 8, 9, 11, 12, 13, 16, 19, 20, 23, 26, 28, 34, 50]"
  },
  {
    "objectID": "docs/python/correction.html#ex5-1",
    "href": "docs/python/correction.html#ex5-1",
    "title": "Corrections Notebooks",
    "section": "ex5",
    "text": "ex5\n\na = 0\nb = 1\nfor i in range(10):\n    print(a + b)\n    b = a + b\n    a = b - a\n\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89"
  },
  {
    "objectID": "docs/python/correction.html#ex6-1",
    "href": "docs/python/correction.html#ex6-1",
    "title": "Corrections Notebooks",
    "section": "ex6",
    "text": "ex6\n\nx = [8, 18, 6, 0, 15, 17.5, 9, 1]\nminimum = float('inf')\nmaximum = -float('inf')\n\nfor i in x:\n    if i &gt; maximum:\n        maximum = i\n    if i &lt; minimum:\n        minimum = i\n        \nprint(\"max : \" + str(maximum))\nprint(\"min : \" + str(minimum))\n\nmax : 18\nmin : 0"
  },
  {
    "objectID": "docs/python/correction.html#ex7-1",
    "href": "docs/python/correction.html#ex7-1",
    "title": "Corrections Notebooks",
    "section": "ex7",
    "text": "ex7\nfor eleve in notes:\n    print(eleve, end = ' : ')\n    nb_notes = 0\n    somme = 0\n    for note in notes[eleve]:\n        nb_notes += 1\n        somme += note\n    print(somme/nb_notes)"
  },
  {
    "objectID": "docs/python/correction.html#ex1-2",
    "href": "docs/python/correction.html#ex1-2",
    "title": "Corrections Notebooks",
    "section": "ex1",
    "text": "ex1\n\ndef puissance(x, y):\n    return x**y\n\nprint(puissance(2, 10))\n\n1024"
  },
  {
    "objectID": "docs/python/correction.html#ex2-2",
    "href": "docs/python/correction.html#ex2-2",
    "title": "Corrections Notebooks",
    "section": "ex2",
    "text": "ex2\nimport numpy as np\n\ndef statistiques_descriptives(liste):\n    return round(np.mean(liste),2), round(np.var(liste),2)\n\nstatistiques_descriptives([1,12,20,3,8,15,17])"
  },
  {
    "objectID": "docs/python/correction.html#ex3-2",
    "href": "docs/python/correction.html#ex3-2",
    "title": "Corrections Notebooks",
    "section": "ex3",
    "text": "ex3\n\ndef est_pair(i):\n    if type(i) is not int:\n        print(\"Le paramètre \" + str(i) + \" n'est pas entier\")\n    else:\n        return i%2 == 0\n    \nprint(est_pair(12))\nprint(est_pair(8.5))\nprint(est_pair(\"toto\"))\n\nTrue\nLe paramètre 8.5 n'est pas entier\nNone\nLe paramètre toto n'est pas entier\nNone"
  },
  {
    "objectID": "docs/python/correction.html#ex4-2",
    "href": "docs/python/correction.html#ex4-2",
    "title": "Corrections Notebooks",
    "section": "ex4",
    "text": "ex4\n\ndef enlever_doublons(liste, trier = False):\n    if trier:\n        return sorted(set(liste))\n    else:\n        return list(set(liste))\n\nprint(enlever_doublons([1,12,1,4,4]))\nprint(enlever_doublons([1,12,1,4,4], True))\n\n[1, 12, 4]\n[1, 4, 12]"
  },
  {
    "objectID": "docs/python/correction.html#ex5-2",
    "href": "docs/python/correction.html#ex5-2",
    "title": "Corrections Notebooks",
    "section": "ex5",
    "text": "ex5\n\ndef factoriel_rec(i):\n    if i == 0:\n        return 1\n    else:\n        return i * factoriel_rec(i-1)\n    \nfactoriel_rec(5)\n\n120"
  },
  {
    "objectID": "docs/python/correction.html#ex6-2",
    "href": "docs/python/correction.html#ex6-2",
    "title": "Corrections Notebooks",
    "section": "ex6",
    "text": "ex6\n\ndef appliquer_fonction_liste(liste, fonction):\n    res = [fonction(element) for element in liste]\n    return res\n\nl = [\"abcd\",\"Ensai\",\"ReNNes\"]\nmajuscule = lambda c:c.upper()\n\nappliquer_fonction_liste(l, majuscule)\n\n['ABCD', 'ENSAI', 'RENNES']"
  },
  {
    "objectID": "docs/python/correction.html#ex1-3",
    "href": "docs/python/correction.html#ex1-3",
    "title": "Corrections Notebooks",
    "section": "ex1",
    "text": "ex1\n# by ChatGPT\n\nclass Etudiant:\n    def __init__(self, nom, age):\n        self.nom = nom\n        self.age = age\n        self.liste_notes = []\n\n    def ajouter_note(self, note):\n        self.liste_notes.append(note)\n\n    def calculer_moyenne(self):\n        if len(self.liste_notes) == 0:\n            return 0\n        total = sum(self.liste_notes)\n        moyenne = total / len(self.liste_notes)\n        return moyenne\n\n# Exemple d'utilisation\netudiant1 = Etudiant(\"Alice\", 20)\netudiant1.ajouter_note(15)\netudiant1.ajouter_note(18)\netudiant1.ajouter_note(12)\nmoyenne_etudiant1 = etudiant1.calculer_moyenne()\nprint(f\"Moyenne de {etudiant1.nom}: {moyenne_etudiant1}\")"
  },
  {
    "objectID": "docs/python/correction.html#ex2-3",
    "href": "docs/python/correction.html#ex2-3",
    "title": "Corrections Notebooks",
    "section": "ex2",
    "text": "ex2\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        \n    def distance(self, autrePoint):\n        return math.sqrt((self.x - autrePoint.x)**2 + (self.y - autrePoint.y)**2)\n    \np1 = Point(0,0)\np2 = Point(1,1)\nprint(p1.distance(p2))\n\nclass Cercle:\n    def __init__(self, p_centre, p_rayon):\n        self.centre = p_centre\n        self.rayon = p_rayon\n        \n    def calculer_surface(self):\n        return math.pi * self.rayon**2\n    \nc1 = Cercle(p1, 2)\nprint(c1.calculer_surface())"
  },
  {
    "objectID": "docs/python/correction.html#ex3-3",
    "href": "docs/python/correction.html#ex3-3",
    "title": "Corrections Notebooks",
    "section": "ex3",
    "text": "ex3\nclass CompteBancaire:\n    def __init__(self, titulaire, solde):\n        self.titulaire = titulaire\n        self.solde = solde\n        \n    def afficher_solde(self):\n        print(\"Le solde du compte de \" + self.titulaire + \" est \" + str(self.solde) + \" euros.\")\n        \n    def deposer(self, montant):\n        self.solde += montant\n    \n    def retirer(self, montant):\n        if self.solde &gt;= montant:\n            self.solde -= montant\n            print(\"Retrait accepté.\")\n        else:\n            print(\"Retrait refusé : fonds insuffisants.\")\n            \n    def transferer(self, autreCompte, montant):\n        if self.solde &gt;= montant:\n            autreCompte.solde += montant\n            self.solde -= montant\n        else:\n            print(\"Transfert refusé : fonds insuffisants.\")\n            \nclient1 = CompteBancaire(\"Bernard\", 2000)\nclient2 = CompteBancaire(\"Bianca\", 5000)\n\nclient1.afficher_solde()\nclient2.afficher_solde()\n\nprint()  # saut de ligne\n\nclient1.deposer(1000)\nclient1.afficher_solde() # +1000\n\nprint()\n\nclient2.retirer(6000)\nclient2.afficher_solde() # aucun changement\n\nprint()\n\nclient2.retirer(1000)\nclient2.afficher_solde() # -1000\n\nprint()\n\nclient2.transferer(client1, 5000)\nclient2.afficher_solde() # aucun changement\n\nprint()\n\nclient2.transferer(client1, 2000)\nclient2.afficher_solde() # - 2000\nclient1.afficher_solde() # + 2000"
  },
  {
    "objectID": "docs/python/python-notebooks.html",
    "href": "docs/python/python-notebooks.html",
    "title": "Notebooks Python",
    "section": "",
    "text": "Pour découvrir Python, nous allons commencer par coder dans ces 5 notebooks :\n\nLes types et variables\nLes listes et dictionnaires\nLes boucles\nLes fonctions\nIntroduction à la Programmation Orientée Objet\n\nPour réaliser ces notebooks, je me suis inspiré des ressources ci-dessous :\n\nFormation Initiation à Python du SSP Cloud INSEE\nCours de Python dispensés à l’ENSAE par Lino Galiana et Xavier Dupré\nCours de Python de l’Université Paris Cité"
  },
  {
    "objectID": "docs/python/python-notebooks.html#les-notebooks",
    "href": "docs/python/python-notebooks.html#les-notebooks",
    "title": "Notebooks Python",
    "section": "",
    "text": "Pour découvrir Python, nous allons commencer par coder dans ces 5 notebooks :\n\nLes types et variables\nLes listes et dictionnaires\nLes boucles\nLes fonctions\nIntroduction à la Programmation Orientée Objet\n\nPour réaliser ces notebooks, je me suis inspiré des ressources ci-dessous :\n\nFormation Initiation à Python du SSP Cloud INSEE\nCours de Python dispensés à l’ENSAE par Lino Galiana et Xavier Dupré\nCours de Python de l’Université Paris Cité"
  },
  {
    "objectID": "docs/python/python-notebooks.html#utiliser-un-notebook",
    "href": "docs/python/python-notebooks.html#utiliser-un-notebook",
    "title": "Notebooks Python",
    "section": "2 Utiliser un notebook",
    "text": "2 Utiliser un notebook\n\n\n\n\n\n\nMode opératoire\n\n\n\n\nCommencez par vous rendre sur la page de l’un des 5 notebooks cités ci-dessus\nTéléchargez sur votre machine le fichier .ipynb\nConnectez-vous à l’un des services proposés ci-dessous\nUploadez sur ce service le fichier .ipynb\n\n\n\nVous avez plusieurs possibilités pour lancer les notebooks :\n\nle datalab du GENES\nle datalab SSPCloud ➡️ vous pouvez créer un compte avec votre mail ENSAI\nUn cluster Jupyter de l’ENSAI ➡️ si vous avez vos idep et mot de passe\n\nSi vous n’avez, ni identifiants, ni mail ENSAI, d’autres solutions existent :\n\nJupyter Lab online\nKaggle notebooks\nGoogle Colab\n\n\nDatalabCluster ENSAIJupyter Lab onlineColab et Kaggle\n\n\n\nConnectez-vous au datalab\nAllez dans le menu Catalogue de services\nLancer Jupyter-python\nSuivez les mêmes instructions que pour le Cluster ENSAI\n\n\n\n\nConnectez-vous au cluster Jupyter avec id et mot de passe\nImportez un notebook : en haut à gauche, sous la barre de menu, utilisez la flèche ⬆️\nDans la colonne de gauche :\n\nl’icone en forme de dossier permet d’explorer les fichiers\nl’icone en forme de liste permet d’afficher la table des matières\n\nLe champ Code permet d’indiquer si la cellule attend du code python ou du texte (Markdown)\n\n\n\n\n\nAllez sur la page Jupyter Lab online\nSuivez les mêmes instructions que pour le Cluster ENSAI\n\n\n\n\nConnectez-vous au service\nImportez le notebook (Fichier &gt; Importer le notebook)\n\n\n\n\n\n2.1 Types de cellules\nUn notebook est constitué de cellules. Vous pouvez créer une nouvelle cellule en cliquant sur le bouton + dans la barre d’outils.\nIl existe deux types de cellules principaux :\n\nles cellules de code (où vous écrivez et exécutez du code Python)\nles cellules de texte (où vous écrivez du texte formaté en utilisant Markdown)\n\n\n\n\n\n\n\nLe langage Markdown\n\n\n\n\n\nC’est un langage simple et intuitif qui permet de formater du texte (Ce site est généré avec du code markdown).\nDe très nombreuses ressources sont disponibles sur internet, par exemple\nQuelques exemples :\n\n\n\nCode\nMise en forme\n\n\n\n\n**texte en gras**\ntexte en gras\n\n\n*texte en italique*\ntexte en italique\n\n\n# Titre de niveau 1\n\n\n\n## Titre de niveau 2\n\n\n\n- Élement de liste à puces\n- Élement de liste à puces\n\n\n\n\n\n\nLe type de cellule souhaité est modifiable dans la barre d’outils."
  },
  {
    "objectID": "docs/python/python-notebooks.html#commandes-utiles",
    "href": "docs/python/python-notebooks.html#commandes-utiles",
    "title": "Notebooks Python",
    "section": "3 Commandes utiles",
    "text": "3 Commandes utiles\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\nSHIFT + ENTER\nExécuter une cellule et passer à la suivante.\n\n\nCTRL + ENTER\nExécuter une cellule sans passer à la suivante.\n\n\nESC\nPasser en mode commande (les bordures de cellule deviennent bleues).\n\n\nENTER\nPasser en mode édition (vous pouvez modifier le contenu de la cellule).\n\n\nA\nInsérer une cellule au-dessus de la cellule courante.\n\n\nB\nInsérer une cellule en dessous de la cellule courante.\n\n\nD + D\nSupprimer une cellule."
  },
  {
    "objectID": "docs/python/python-notebooks.html#ressources-utiles",
    "href": "docs/python/python-notebooks.html#ressources-utiles",
    "title": "Notebooks Python",
    "section": "4 Ressources utiles",
    "text": "4 Ressources utiles\nVous trouverez plus d’informations sur les notebooks, sur le site de la formation INSEE d’initiation à Python."
  },
  {
    "objectID": "docs/sql/sql-exercice.html",
    "href": "docs/sql/sql-exercice.html",
    "title": "Exercice BDR et SQL",
    "section": "",
    "text": "Vous allez effectuer cet exercice sur le datalab du GENES.\nVous pouvez également réaliser l’exercice sur :\n\nle SSPCloud, même modop que sur le datalab du GENES\nla VM ENSAI (voir section ci-après)\ntrouver une ressource sur internet permettant d’exécuter du SQL\n\n\n\n\nConnectez-vous à https://onyxia.lab.groupe-genes.fr/\nLancez un service PostgreSQL\n\npour créer votre base de données\n\nLancez un service Cloudbeaver\n\npour interagir avec la base de données que vous venez de créer\n\n\nAttendez que le service Cloudbeaver se lance :\n\nOuvrez le service\n\nCliquer pour copier le mot de passe\nOuvrir le service\n\nAuthentification\n\nusername : user-&lt;idxxxx&gt;-ensai\npassword : collez le mot de passe (CTRL+V) copié juste avant\n\n\nUne fois connecté :\n\nDans l’explorateur à gauche, vous devez voir afficher votre connexion à la base de données PostgreSQL\nCliquez sur l’icone SQL en haut à gauche\n\n\n\n\n\n\n\nSi la connection ne s’est pas faite\n\n\n\n\nCliquez su +, puis New connection\nSélectionnez PostgreSQL\nRenseignez : Host, Port, Database, Username, Password\n\nPour obtenir ces informations, retournez sur le Datalab, onglet Mes Services, puis cliquez sur le README du service PostgreSQL.\n\nTEST pour vérifier que la connexion se fait bien\nCREATE\nDans l’explorer à gauche, cliquez sur votre connexion pour qu’elle passe au vert\n\n\n\n\n\n\nAutre possibilité si vous êtes connectés sur la VM ENSAI :\n\nLancez le logiciel Dbeaver\nParamétrez DBeaver\n\n\n\n\nSi vous n’avez pas accès aux ressources de l’ENSAI, voici par exemple quelques ressources pour faire les exercices :\n\nhttps://www.programiz.com/sql/online-compiler/\n\nDROP table customers; DROP table orders; DROP table shippings;\npour supprimer les tables par défaut\n\nhttps://www.mycompiler.io/fr/new/sql"
  },
  {
    "objectID": "docs/sql/sql-exercice.html#se-connecter-à-une-base-de-données",
    "href": "docs/sql/sql-exercice.html#se-connecter-à-une-base-de-données",
    "title": "Exercice BDR et SQL",
    "section": "",
    "text": "Vous allez effectuer cet exercice sur le datalab du GENES.\nVous pouvez également réaliser l’exercice sur :\n\nle SSPCloud, même modop que sur le datalab du GENES\nla VM ENSAI (voir section ci-après)\ntrouver une ressource sur internet permettant d’exécuter du SQL\n\n\n\n\nConnectez-vous à https://onyxia.lab.groupe-genes.fr/\nLancez un service PostgreSQL\n\npour créer votre base de données\n\nLancez un service Cloudbeaver\n\npour interagir avec la base de données que vous venez de créer\n\n\nAttendez que le service Cloudbeaver se lance :\n\nOuvrez le service\n\nCliquer pour copier le mot de passe\nOuvrir le service\n\nAuthentification\n\nusername : user-&lt;idxxxx&gt;-ensai\npassword : collez le mot de passe (CTRL+V) copié juste avant\n\n\nUne fois connecté :\n\nDans l’explorateur à gauche, vous devez voir afficher votre connexion à la base de données PostgreSQL\nCliquez sur l’icone SQL en haut à gauche\n\n\n\n\n\n\n\nSi la connection ne s’est pas faite\n\n\n\n\nCliquez su +, puis New connection\nSélectionnez PostgreSQL\nRenseignez : Host, Port, Database, Username, Password\n\nPour obtenir ces informations, retournez sur le Datalab, onglet Mes Services, puis cliquez sur le README du service PostgreSQL.\n\nTEST pour vérifier que la connexion se fait bien\nCREATE\nDans l’explorer à gauche, cliquez sur votre connexion pour qu’elle passe au vert\n\n\n\n\n\n\nAutre possibilité si vous êtes connectés sur la VM ENSAI :\n\nLancez le logiciel Dbeaver\nParamétrez DBeaver\n\n\n\n\nSi vous n’avez pas accès aux ressources de l’ENSAI, voici par exemple quelques ressources pour faire les exercices :\n\nhttps://www.programiz.com/sql/online-compiler/\n\nDROP table customers; DROP table orders; DROP table shippings;\npour supprimer les tables par défaut\n\nhttps://www.mycompiler.io/fr/new/sql"
  },
  {
    "objectID": "docs/sql/sql-exercice.html#données-de-lexercice",
    "href": "docs/sql/sql-exercice.html#données-de-lexercice",
    "title": "Exercice BDR et SQL",
    "section": "Données de l’exercice",
    "text": "Données de l’exercice\n\nCopiez le contenu du fichier echecs.sql\nCollez dans votre éditeur\nExécutez le script"
  },
  {
    "objectID": "docs/sql/sql-exercice.html#description-des-données",
    "href": "docs/sql/sql-exercice.html#description-des-données",
    "title": "Exercice BDR et SQL",
    "section": "1 Description des données",
    "text": "1 Description des données\nNous avons une liste de joueurs et de tournois. Les joueurs peuvent participer aux différents tournois.\nUn tournoi est supervisé par un arbitre. Un arbitre est un joueur qui a obtenu un grade d’arbitre.\nDans un tournoi, les parties se déroulent à une certaine cadence (Lente, Rapide, Blitz).\n\n\n\n\n\nclassDiagram\n  class arbitre_grade {\n    id_arbitre_grade: INT(PK)\n    nom: VARCHAR\n  }\n\n  class joueur {\n    id_joueur: INT(PK)\n    pseudo: VARCHAR\n    nom: VARCHAR\n    prenom: VARCHAR\n    elo: INT\n    mail: VARCHAR\n    id_arbitre_grade: INT(FK -&gt; arbitre_grade)\n  }\n\n  class cadence {\n    id_cadence: INT(PK)\n    nom: VARCHAR\n  }\n\n  class tournoi {\n    id_tournoi: INT(PK)\n    id_arbitre: INT(FK -&gt; joueur)\n    nom: VARCHAR\n    debut: DATE\n    fin: DATE\n    nb_rondes: INT\n    id_cadence: INT(FK -&gt; cadence)\n  }\n\n  class participant {\n    id_tournoi: INT(FK -&gt; tournoi)\n    id_joueur: INT(FK -&gt; joueur)\n  }\n\n  arbitre_grade -- joueur\n  cadence -- tournoi\n  tournoi -- participant\n  joueur -- participant"
  },
  {
    "objectID": "docs/sql/sql-exercice.html#questions",
    "href": "docs/sql/sql-exercice.html#questions",
    "title": "Exercice BDR et SQL",
    "section": "2 Questions",
    "text": "2 Questions\n\n2.1 Découverte des tables\n\nListez tous les joueurs\nFaîtes de même sur les autres tables pour observer leur contenu\nListez tous les joueurs ordonnés par elo descroissant\nListez tous les joueurs ayant un elo inférieur ou égal à 2000\nListez tous les joueurs ayant un elo inférieur ou égal à 2000 et dont le prénom contient un “e” (majuscule ou minuscule)\n\n💡 voir méthode UPPER\n\n\n\n\n2.2 Mise à jour\n\nCréez la joueuse : Martine Dupont, elo : 1999, Arbitre Elite\nSupprimez le joueur de pseudo marc78\nEssayez de supprimer le joueur ayant pour id : 20\n\nPourquoi cela ne fonctionne pas ? Que faudrait-t-il faire pour supprimer ce joueur ?\n\nListez les joueurs qui sont arbitres\n\n💡 voir IS NOT NULL\n\nAjoutez à la table joueur la colonne de type booléen est_arbitre\nRemplissez cette nouvelle colonne pour tous les joueurs\n\n\n\n2.3 Jointures\n\nListez les joueurs (nom, prénom) qui sont arbitres, ainsi que leur grade d’arbitre\nListez tous les joueurs (nom, prénom) ainsi que leur grade d’arbitre s’ils le sont\n\n\n\n2.4 Agrégations\n\nComptez le nombre de joueurs qui sont arbitre\nComptez le nombre d’arbitres par grade\nComptez le nombre d’arbitres par grade et n’afficher que si la moyenne elo des arbitres du grade est supérieure à 2000\nAffichez la liste des tournois (nom du tournoi, cadence, arbitre)\nAjouter le nombre de joueurs et le elo max des joueurs\n\n\n\n\n\n\n\nCorrection\n\n\n\n\n\nLien vers la correction"
  }
]